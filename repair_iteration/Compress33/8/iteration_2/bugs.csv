bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	3	2	add
2	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	3	2	add
3	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  If(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  If(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  ';'  expected	3	None	add
4	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	3	None	add
5	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	3	None	add
6	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	12	2	add
7	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	12	2	add
8	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	12	None	add
9	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	12	None	add
10	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  ';'  expected	12	None	add
11	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	12	None	add
12	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	18	None	replace
13	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	18	None	replace
14	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	18	None	replace
15	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	18	None	replace
16	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	18	None	replace
17	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	18	None	replace
18	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	18	None	replace
19	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
20	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
21	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
22	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
23	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
24	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
25	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
26	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  unreachable  statement  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  unreachable  statement	1	None	add
27	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
28	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);	  	non-compiled	[CE]  unreachable  statement	1	None	add
29	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
30	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	1	None	add
31	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  in.read();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream  in  =  in.read();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
32	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  in.readInt();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream  in  =  in.readInt();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
33	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
34	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
35	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
37	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new  BZip2CompressorInputStream(in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	compilable	  [FE]  CompressorException  	15	2	replace
38	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	compilable	  [FE]  CompressorException  	15	2	replace
39	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  result  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol  result	15	None	replace
40	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  'void'  type  not  allowed  here	15	None	replace
41	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean)	15	None	replace
42	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)	15	None	replace
43	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
44	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)	9	None	replace
45	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  final  parameter  in  may  not  be  assigned  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	9	None	replace
46	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)	9	None	replace
47	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)  [FE]                        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)	9	None	replace
48	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,boolean)  [FE]                          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,boolean)	9	None	replace
49	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]                            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	9	None	replace
50	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]                              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	9	None	replace
51	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
52	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
53	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
54	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
55	[BUG]  [BUGGY]  InputStream  in  =  in.readInput();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  in.readInput();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readInput();	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
56	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	5	None	replace
57	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	5	None	replace
58	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)	5	None	replace
59	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in);  [CE]  cannot  find  symbol  deFLATE  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	5	None	replace
60	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	5	None	replace
61	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	10	2	add
62	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	10	2	add
63	[BUG]  [BUGGY]      BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  ';'  expected	10	None	add
64	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	10	2	add
65	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	10	2	add
66	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	10	2	add
67	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	10	2	add
68	[BUG]  [BUGGY]      BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  ';'  expected	10	None	add
69	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  NullPointerException  	10	2	add
70	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  NullPointerException  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  NullPointerException  	10	2	add
71	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  	non-compiled	[CE]  '('  or  '['  expected	10	None	add
72	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
73	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
74	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])	6	None	replace
75	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)	17	None	replace
76	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)	17	None	replace
77	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  SNAPPY_RAW);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)	17	None	replace
78	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  e);  [CE]  cannot  find  symbol  e  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  e);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  e);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  e	17	None	replace
79	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,Boolean)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,Boolean)	17	None	replace
80	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,int)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,int)	17	None	replace
81	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength));  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  'void'  type  not  allowed  here	17	None	replace
82	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int)	14	None	replace
83	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long)	14	None	replace
84	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int)	14	None	replace
85	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  1);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  1);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	14	None	replace
86	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	2	2	replace
87	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	2	2	replace
88	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)	2	None	replace
89	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)	19	None	replace
90	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  0);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  0);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)	19	None	replace
91	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  1);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  1);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	19	None	replace
92	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  4);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  4);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  4);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	19	None	replace
93	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  10);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  10);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  10);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	19	None	replace
94	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)	8	None	replace
95	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	8	None	replace
96	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)  [FE]        NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)	8	None	replace
97	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean)  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean)	8	None	replace
98	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream)  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  in);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream)	8	None	replace
99	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]              NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  0);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  0);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	8	None	replace
100	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	7	2	add
101	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	7	2	add
102	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	add
103	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]        NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	7	None	add
104	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	7	2	add
105	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	7	2	add
106	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	7	2	add
107	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	7	2	add
108	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	7	None	add
109	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	7	None	add
110	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                  NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	7	None	add
111	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	8	None	replace
112	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean)  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean)	8	None	replace
113	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  0);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  0);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	9	None	replace
114	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	18	None	replace
115	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	18	None	replace
116	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	18	None	replace
117	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  4);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  4);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  4);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	14	None	replace
118	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	12	None	add
119	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  UntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  UntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	17	None	replace
120	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  PACK200);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)	17	None	replace
121	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)	15	None	replace
122	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)	15	None	replace
123	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
124	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }	      	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
125	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	      	compilable	  [FE]  CompressorException  	11	2	replace
126	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	      	compilable	  [FE]  CompressorException  	11	2	replace
127	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	      	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	11	None	replace
128	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	1	None	add
129	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	add
130	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  unreachable  statement	1	None	add
131	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	1	None	add
132	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  pendingEOF  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  pendingEOF	1	None	add
133	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	1	None	add
134	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	3	None	add
135	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	3	2	add
136	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	3	2	add
137	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
138	[BUG]  [BUGGY]  InputStream  in  =  in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  in.readInt();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readInt();	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	4	None	replace
139	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
140	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  in.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  in.decompressConcatenated();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  in.decompressConcatenated();	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
141	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION;	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
142	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  0);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	19	None	replace
143	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ';'  expected	16	None	replace
144	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ';'  expected	16	None	replace
145	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  illegal  start  of  expression  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
146	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
147	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated));  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated));  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated));	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	6	None	replace
148	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	add
149	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	7	None	add
150	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
151	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	13	None	replace
152	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
153	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
154	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	13	2	replace
155	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	13	2	replace
156	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
157	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	13	None	replace
158	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	5	None	replace
159	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP);	  return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	5	None	replace
160	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
161	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
162	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION;	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
163	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  safeInputStream(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
164	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
165	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  PACK200);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	18	None	replace
166	[BUG]  [BUGGY]  InputStream  in  =  in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  in.readIn();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readIn();	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	replace
167	[BUG]  [BUGGY]  InputStream  in  =  in.read(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  in.read(signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read(signatureLength);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	replace
168	[BUG]  [BUGGY]  InputStream  in  =  in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  in.read();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read();	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	replace
169	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in.mark(signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	in.mark(signatureLength);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	compilable	  [FE]  CompressorException  	16	2	replace
170	[BUG]  [BUGGY]  in.mark(signatureLength);  [FE]  CompressorException  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in.mark(signatureLength);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	compilable	  [FE]  CompressorException  	16	2	replace
171	[BUG]  [BUGGY]  in.mark(signatureLength));  [CE]  ';'  expected  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in.mark(signatureLength));  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength));	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ';'  expected	16	None	replace
172	[BUG]  [BUGGY]  InputStream  in  =  in.readOut();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  InputStream  in  =  in.readOut();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readOut();	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	replace
173	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	add
174	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	add
175	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
176	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
177	[BUG]  [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]      if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	        if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	10	None	add
178	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,Boolean)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,Boolean)	9	None	replace
179	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in.decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.decompressConcatenated);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	15	None	replace
180	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  PACK200);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	14	None	replace
181	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	14	None	replace
182	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP);	  return    new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	14	None	replace
183	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  0);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  0);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)	17	None	replace
184	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	return  new  BZip2CompressorInputStream(in);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	2	2	replace
185	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  [FE]  CompressorException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	2	2	replace
186	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	13	None	replace
187	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  ';'  expected	1	None	add
188	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  ';'  expected	1	None	add
189	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  [CE]  unreachable  statement  [FE]        NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();	  	non-compiled	[CE]  unreachable  statement	1	None	add
190	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]  signature  =  in.readBytes(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
191	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
192	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new  BZip2CompressorInputStream(in);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	8	2	replace
193	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  [FE]  CompressorException  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	8	2	replace
194	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	12	None	add
195	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
196	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  ';'  expected	7	None	add
197	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  ';'  expected	7	None	add
198	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]          NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	7	None	add
199	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]            NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DECOMPRESSION);	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	7	None	add
200	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]              NullPointerException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DECOMPRESSED);	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	7	None	add
201	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,InputStream)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {    [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in);  [BUGGY]    }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,InputStream)	6	None	replace
