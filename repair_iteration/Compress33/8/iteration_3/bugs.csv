bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [CE]  cannot  find  symbol  deFLATE  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	50	None	replace
2	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String)	50	None	replace
3	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	50	None	replace
4	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,Boolean)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,Boolean)	50	None	replace
5	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  4);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  4);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  4);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	50	None	replace
6	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,int)  [FE]                                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,int)	50	None	replace
7	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  IOUtils.readFully(signature));  [CE]  no  suitable  method  found  for  readFully(byte[])  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  IOUtils.readFully(signature));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  IOUtils.readFully(signature));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    UntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[])	119	None	replace
8	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  GZIP);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    UntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)	119	None	replace
9	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  Boolean.valueOf);  [CE]  cannot  find  symbol  valueOf  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  Boolean.valueOf);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  Boolean.valueOf);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    UntilEOF);    	non-compiled	[CE]  cannot  find  symbol  valueOf	119	None	replace
10	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  4);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  4);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  4);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    UntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)	119	None	replace
11	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  decompressConcatenated);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
12	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
13	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  DEFLATE);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
14	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF,  signatureLength);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  decompressUntilEOF,  signatureLength);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
15	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(signature,  decompressUntilEOF);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
16	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
17	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(decompressUntilEOF,  in);  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(decompressUntilEOF,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(decompressUntilEOF,  in);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
18	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)	120	None	replace
19	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)	120	None	replace
20	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)	120	None	replace
21	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  PACK200,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	120	None	replace
22	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated,  signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)	120	None	replace
23	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)	120	None	replace
24	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	120	None	replace
25	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,boolean)	58	None	replace
26	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)	58	None	replace
27	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  e);  [CE]  cannot  find  symbol  e  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  e);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  e);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  e	58	None	replace
28	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressUntilEOF);  [CE]  cannot  find  symbol  deFLATE  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	58	None	replace
29	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,String)	58	None	replace
30	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,int)	58	None	replace
31	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
32	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
33	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
34	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
35	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	60	None	replace
36	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)	60	None	replace
37	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	60	None	replace
38	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  PACK200);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	60	None	replace
39	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  GZIP);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	60	None	replace
40	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  PACK200,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	60	None	replace
41	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  PACK200);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	60	None	replace
42	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
44	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
45	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
46	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
47	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  0))  {  return  new  BZip2CompressorInputStream(in,  0);	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
48	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
49	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
50	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
51	[BUG]  [BUGGY]  in.mark(signatureLength),  decompressConcatenated);  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	40	None	replace
52	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
53	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
54	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [CE]  'void'  type  not  allowed  here  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
55	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.length);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    4);    	non-compiled	[CE]  cannot  find  symbol  length	92	None	replace
56	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DFLATE);  [CE]  cannot  find  symbol  DFLATE  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    4);    	non-compiled	[CE]  cannot  find  symbol  DFLATE	92	None	replace
57	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  3);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  3);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  3);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    4);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	92	None	replace
58	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,String,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,String,int)	48	None	replace
59	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String,boolean)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String,boolean)	48	None	replace
60	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	48	None	replace
61	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,String)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,String)	48	None	replace
62	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,String)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,String)	48	None	replace
63	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	48	None	replace
64	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	21	None	replace
65	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	21	None	replace
66	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	21	None	replace
67	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	21	None	replace
68	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	21	None	replace
69	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	64	2	add
70	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	64	2	add
71	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	64	None	add
72	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  ';'  expected	64	None	add
73	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(Signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  Signature	64	None	add
74	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.read();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
75	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readFully(in,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
76	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt(in,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
77	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(signatureLength,  BZip2CompressorInputStream.DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt(signatureLength,  BZip2CompressorInputStream.DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt(signatureLength,  BZip2CompressorInputStream.DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
78	[BUG]  [BUGGY]  InputStream  in  =  JOUtils.readInt(signatureLength,  IOUtils.readInt(signature));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  JOUtils.readInt(signatureLength,  IOUtils.readInt(signature));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  JOUtils.readInt(signatureLength,  IOUtils.readInt(signature));	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
79	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(signatureLength,  BZip2CompressorInputStream.class);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt(signatureLength,  BZip2CompressorInputStream.class);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt(signatureLength,  BZip2CompressorInputStream.class);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
80	[BUG]  [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	196	None	replace
81	[BUG]  [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	196	None	replace
82	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	196	2	replace
83	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	196	2	replace
84	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	196	2	replace
85	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	196	2	replace
86	[BUG]  [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	196	None	replace
87	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    e);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,InputStream)	78	None	replace
88	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in.length);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    e);    	non-compiled	[CE]  cannot  find  symbol  length	78	None	replace
89	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
90	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  return  new  BZip2CompressorInputStream(in);  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  return  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    return  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  unreachable  statement	184	None	add
91	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
92	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  BZip2Compressor  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2Compressor	184	None	add
93	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [CE]  unreachable  statement  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
94	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  unreachable  statement  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
95	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	184	None	add
96	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]                  CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	184	None	add
97	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  in,  decompressConcatenated.decompressConcatenated();  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  in,  decompressConcatenated.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  in,  decompressConcatenated.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  ';'  expected	140	None	replace
98	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  DECOMPRESSED_CONCATENATOR.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  DECOMPRESSED_CONCATENATOR.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  DECOMPRESSED_CONCATENATOR.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
99	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  this.in.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  this.in.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  this.in.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
100	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  DECOMPRESSION.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  DECOMPRESSION.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  DECOMPRESSION.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
101	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  out.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  out.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  out.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
102	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  in.denominationConcatenated();  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  in.denominationConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  in.denominationConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
103	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)	94	None	replace
104	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean,InputStream)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  in);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean,InputStream)	94	None	replace
105	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String,Boolean)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressUntilEOF);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String,Boolean)	94	None	replace
106	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)	94	None	replace
107	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,byte[])  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressUntilEOF,  signature);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,byte[])	94	None	replace
108	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
109	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
110	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack2CompressorInputStream(in,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
111	[BUG]  [BUGGY]  in.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	176	None	replace
112	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.matches(signature,  signatureLength);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
113	[BUG]  [BUGGY]  nisip.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  nisip.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	nisip.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	176	None	replace
114	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	154	2	add
115	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	154	2	add
116	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  If(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  If(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  ';'  expected	154	None	add
117	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	154	None	add
118	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(Signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(Signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(Signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  Signature	154	None	add
119	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
120	[BUG]  [BUGGY]  ||  in.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
121	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	144	None	replace
122	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	144	None	replace
123	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	144	None	replace
124	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	144	None	replace
125	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	129	None	replace
126	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	129	None	replace
127	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
128	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
129	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
130	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	129	None	replace
131	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
132	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
133	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
134	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
135	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
136	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	4	None	replace
137	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	compilable	  [FE]  NullPointerException  	4	2	replace
138	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  NullPointerException  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	compilable	  [FE]  NullPointerException  	4	2	replace
139	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	compilable	  [FE]  NullPointerException  	4	2	replace
140	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  NullPointerException  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	compilable	  [FE]  NullPointerException  	4	2	replace
141	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	4	None	replace
142	[BUG]  [BUGGY]  If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  ';'  expected	4	None	replace
143	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	4	None	replace
144	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)	49	None	replace
145	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,int)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,int)	49	None	replace
146	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature.length);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature.length);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)	49	None	replace
147	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,Boolean)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,Boolean)	49	None	replace
148	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,String)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,String)	49	None	replace
149	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)	77	None	replace
150	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)	77	None	replace
151	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,boolean)	77	None	replace
152	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)	77	None	replace
153	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  SNAPPY_RAW,  SNAPPY_FRAMED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  SNAPPY_RAW,  SNAPPY_FRAMED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  SNAPPY_RAW,  SNAPPY_FRAMED);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)	77	None	replace
154	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)	77	None	replace
155	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)	77	None	replace
156	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
157	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
158	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.getInputStream();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.getInputStream();	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
159	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.get(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.get(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.get(signatureLength);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
160	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  ||    BZip2CompressorInputStream.matches(signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
161	[BUG]  [BUGGY]  ||  in.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
162	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,Boolean)	41	None	replace
163	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);  [CE]  cannot  find  symbol  result  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  result	41	None	replace
164	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean,InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF,  in);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean,InputStream)	41	None	replace
165	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean,int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean,int)	41	None	replace
166	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,Boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,Boolean)	41	None	replace
167	[BUG]  [BUGGY]  nisip  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  find  symbol  nisip  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  nisip  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	nisip  =  IOUtils.readFully(in,  signatureLength);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  nisip	7	None	replace
168	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.getInputStream();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.getInputStream();	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
169	[BUG]  [BUGGY]  nisip  =  IOUtils.readFully(in,  signature);  [CE]  cannot  find  symbol  nisip  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  nisip  =  IOUtils.readFully(in,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	nisip  =  IOUtils.readFully(in,  signature);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  nisip	7	None	replace
170	[BUG]  [BUGGY]  InputStream  in  =  in.readInput(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readInput(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readInput(signatureLength);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
171	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	159	None	replace
172	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)	159	None	replace
173	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	159	None	replace
174	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	159	None	replace
175	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  GZIP);  [CE]  cannot  find  symbol  deFLATE  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in,  GZIP);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	159	None	replace
176	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  LZMA);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	159	None	replace
177	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
178	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
179	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  0))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  0))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signatureLength,  0))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
180	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
181	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  1);  }  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  1);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  1);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
182	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  DEFLATE))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  DEFLATE))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  DEFLATE))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
183	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
184	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  this.in.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  this.in.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
185	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
186	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.readInt());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.readInt());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.readInt());	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
187	[BUG]  [BUGGY]  InputStream  in  =  in.readUTF();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readUTF();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readUTF();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
188	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length);	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
189	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  GZIP);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)	15	None	replace
190	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)	15	None	replace
191	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	15	None	replace
192	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	15	None	replace
193	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,InputStream,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  GZIP);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,InputStream,String)	15	None	replace
194	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    SignatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
195	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    SignatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	8	None	replace
196	[BUG]  [BUGGY]  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    SignatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	8	None	replace
197	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	132	2	replace
198	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	132	2	replace
199	[BUG]  [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
200	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	132	None	replace
201	[BUG]  [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
202	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
203	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	11	None	replace
204	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
205	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	191	None	replace
206	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
207	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
208	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [CE]  'void'  type  not  allowed  here  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	191	None	replace
209	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
210	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
211	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
212	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
213	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
214	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
215	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
216	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
217	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
218	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
219	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
220	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,int)	89	None	replace
221	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,int)	89	None	replace
222	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,int)	89	None	replace
223	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  0,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,int,boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  0,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  0,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,int,boolean)	89	None	replace
224	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,String)	89	None	replace
225	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,InputStream,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,InputStream,int)	89	None	replace
226	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  in.length);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  in.length);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	89	None	replace
227	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	103	None	replace
228	[BUG]  [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
229	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	103	None	replace
230	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	103	None	replace
231	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	103	None	replace
232	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
233	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,boolean)	13	None	replace
234	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,boolean)	13	None	replace
235	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signatureLength,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,InputStream,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signatureLength,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signatureLength,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,InputStream,boolean)	13	None	replace
236	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompress,  in,  decompressConcatenated);  [CE]  cannot  find  symbol  decompress  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompress,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompress,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompress	13	None	replace
237	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,boolean)	13	None	replace
238	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	177	None	replace
239	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	177	None	replace
240	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  CompressorException  	177	2	replace
241	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  CompressorException  	177	2	replace
242	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	46	None	replace
243	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int,Boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int,Boolean)	46	None	replace
244	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  signatureLength);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)	46	None	replace
245	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int,String)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int,String)	46	None	replace
246	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in,    decompressConcatenated);    new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	compilable	  [FE]  CompressorException  	37	2	add
247	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	compilable	  [FE]  CompressorException  	37	2	add
248	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	add
249	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	add
250	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	37	2	add
251	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	37	2	add
252	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	add
253	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream	  	non-compiled	[CE]  '('  or  '['  expected	37	None	add
254	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	add
255	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	add
256	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int,int)	122	None	replace
257	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0);  [CE]  cannot  find  symbol  result  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    0);    	non-compiled	[CE]  cannot  find  symbol  result	122	None	replace
258	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	158	None	replace
259	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)	158	None	replace
260	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	158	None	replace
261	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,int,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in,  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,int,int)	82	None	replace
262	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  0,  signatureLength);  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength),  0,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  'void'  type  not  allowed  here	82	None	replace
263	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  in.length);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0,  in.length);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	82	None	replace
264	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int,boolean)	82	None	replace
265	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	in.mark(signatureLength);    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	169	2	add
266	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	169	2	add
267	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
268	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
269	[BUG]  [BUGGY]  in.mark(signatureLength);  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  final  parameter  in  may  not  be  assigned  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	169	None	add
270	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
271	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
272	[BUG]  [BUGGY]  in.mark(signatureLength);  in  =  new  BZip2CompressorInputStream(signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  in  =  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    in  =  new  BZip2CompressorInputStream(signatureLength);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	169	None	add
273	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
274	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);	  BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	143	None	replace
275	[BUG]  [BUGGY]  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	143	None	replace
276	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.length);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.length);	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
277	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength,  decompressConcatenated));  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength,  decompressConcatenated));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in.mark(signatureLength,  decompressConcatenated));	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
278	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength,  decompressConcatenated));  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength,  decompressConcatenated));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength,  decompressConcatenated));	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
279	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  DEFLATE);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  DEFLATE);	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
280	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signature,  decompressConcatenated));  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.mark(signature,  decompressConcatenated));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in.mark(signature,  decompressConcatenated));	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
281	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated.mark(signature,  signatureLength));  [CE]  boolean  cannot  be  dereferenced  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated.mark(signature,  signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated.mark(signature,  signatureLength));	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  boolean  cannot  be  dereferenced	147	None	replace
282	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.read());  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.read());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.read());	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
283	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  0,  signatureLength);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int)	99	None	replace
284	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  0L);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  0L);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  0L);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long)	99	None	replace
285	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  1);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	99	None	replace
286	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  0L,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  0L,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  0L,  signatureLength);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int)	99	None	replace
287	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in.decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in.decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	179	None	replace
288	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature.decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature.decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature.decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	179	None	replace
289	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in.decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in.decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in.decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	179	None	replace
290	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	121	None	replace
291	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [CE]  cannot  find  symbol  result  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  cannot  find  symbol  result	121	None	replace
292	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String,int)	121	None	replace
293	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  in,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,String)	121	None	replace
294	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.matches(signature,  DEFLATE);	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
295	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.matches(signature,  decompressConcatenated);	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
296	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	174	None	replace
297	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  }	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	174	None	replace
298	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	replace
299	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	2	None	replace
300	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress);  }  [CE]  cannot  find  symbol  decompress  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  decompress	2	None	replace
301	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCase);  }  [CE]  cannot  find  symbol  decompressCase  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCase);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCase);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  decompressCase	2	None	replace
302	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	135	2	add
303	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	135	2	add
304	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in	  	non-compiled	[CE]  ')'  expected	135	None	add
305	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
306	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream	  	non-compiled	[CE]  '('  or  '['  expected	135	None	add
307	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  If(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  If(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    If(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  ';'  expected	135	None	add
308	[BUG]  [BUGGY]  If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    }    	non-compiled	[CE]  ';'  expected	5	None	replace
309	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	replace
310	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  in);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	replace
311	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	replace
312	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(signature,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
313	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressUntilEOF);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
314	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  decompressUntilEOF);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
315	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  signatureLength);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
316	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated,  DEFLATE);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
317	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(in,  DEFLATE);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
318	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	105	None	replace
319	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
320	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
321	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
322	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
323	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
324	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
325	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
326	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  0);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
327	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
328	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
329	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
330	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
331	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
332	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
333	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[],Boolean)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[],Boolean)	88	None	replace
334	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)	88	None	replace
335	[BUG]  [BUGGY]  InputStream  in  =  this.in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  this.in.read();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  this.in.read();	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
336	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readFully(signature,  signatureLength);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
337	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.read(signature);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
338	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(signature,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt(signature,  12);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt(signature,  12);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
339	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	112	None	replace
340	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated);	  new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	112	None	replace
341	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength);	  new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	112	None	replace
342	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	124	None	replace
343	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  unreachable  statement	125	None	add
344	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
345	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2	  	non-compiled	[CE]  '('  or  '['  expected	125	None	add
346	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream	  	non-compiled	[CE]  '('  or  '['  expected	125	None	add
347	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compress	  	non-compiled	[CE]  '('  or  '['  expected	125	None	add
348	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return	  	non-compiled	[CE]  illegal  start  of  expression	125	None	add
349	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorIn  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorIn	  	non-compiled	[CE]  '('  or  '['  expected	125	None	add
350	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.createBZip2CompressorInputStream(signature,  decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.createBZip2CompressorInputStream(signature,  decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.createBZip2CompressorInputStream(signature,  decompressConcatenated,  in);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
351	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,byte[])  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signature);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,byte[])	201	None	replace
352	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(signature,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
353	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[])  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature);	  new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[])	193	None	replace
354	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  signatureLength);	  new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	193	None	replace
355	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  BZIP2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  BZIP2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  BZIP2);	  new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	193	None	replace
356	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	104	2	add
357	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	104	2	add
358	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	104	2	add
359	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	104	2	add
360	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	add
361	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	104	None	add
362	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	104	None	add
363	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  'catch'  without  'try'  [FE]              NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  'catch'  without  'try'	104	None	add
364	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	104	None	add
365	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	104	2	add
366	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	104	2	add
367	[BUG]  [BUGGY]  DecompressUntilEOF  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
368	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  final  parameter  in  may  not  be  assigned  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	87	None	replace
369	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
370	[BUG]  [BUGGY]  InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
371	[BUG]  [BUGGY]  InputStream  in  =  in.readFully(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readFully(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readFully(signatureLength);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
372	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  this.in.read(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  this.in.read(signatureLength);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
373	[BUG]  [BUGGY]  InputStream  in  =  in.read(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.read(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read(signatureLength,  decompressConcatenated);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
374	[BUG]  [BUGGY]  InputStream  in  =  in.readInt(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readInt(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readInt(signatureLength);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
375	[BUG]  [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	188	None	replace
376	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	188	2	replace
377	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	188	2	replace
378	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  PACK200,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	180	None	replace
379	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  PACK200,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  PACK200,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	180	None	replace
380	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2,  PACK200);  [CE]  cannot  find  symbol  GZIP2  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP2,  PACK200);	  return    new    BZip2CompressorInputStream(in,    PACK200);    	non-compiled	[CE]  cannot  find  symbol  GZIP2	180	None	replace
381	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	180	None	replace
382	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
383	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
384	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
385	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
386	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
387	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
388	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
389	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
390	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  CompressorException  	26	2	replace
391	[BUG]  [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip1CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	118	None	replace
392	[BUG]  [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip1CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	118	None	replace
393	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  1);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	91	None	replace
394	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String)	200	None	replace
395	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  SNAPPY_RAW);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	200	None	replace
396	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  in);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,InputStream)	200	None	replace
397	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	200	None	replace
398	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.readInt();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
399	[BUG]  [BUGGY]  InputStream  in  =  BZip2Compressor.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2Compressor.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2Compressor.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
400	[BUG]  [BUGGY]  in  =  in.readInt();  [CE]  cannot  find  symbol  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  in.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  in.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
401	[BUG]  [BUGGY]  safeInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressUntilEOF);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
402	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated,  signatureLength);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
403	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated,  SNAPPY_RAW);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
404	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated,  BZip2CompressorInputStream);  [CE]  cannot  find  symbol  BZip2CompressorInputStream  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressConcatenated,  BZip2CompressorInputStream);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated,  BZip2CompressorInputStream);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  BZip2CompressorInputStream	163	None	replace
405	[BUG]  [BUGGY]  in.mark(signature.length));  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signature.length));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signature.length));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
406	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFLATE));  [CE]  ';'  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFLATE));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.DEFLATE));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
407	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT_COMPRESSION);  [CE]  cannot  find  symbol  DEFAULT_COMPRESSION  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT_COMPRESSION);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT_COMPRESSION);	  in.mark(signatureLength));    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_COMPRESSION	171	None	replace
408	[BUG]  [BUGGY]  in.mark(signatureLength  +  12));  [CE]  ';'  expected  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength  +  12));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength  +  12));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
409	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFLATE);  [CE]  cannot  find  symbol  DEFLATE  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.DEFLATE);	  in.mark(signatureLength));    	non-compiled	[CE]  cannot  find  symbol  DEFLATE	171	None	replace
410	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT_SIZE));  [CE]  ';'  expected  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT_SIZE));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT_SIZE));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
411	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,Boolean)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,Boolean)	97	None	replace
412	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,boolean)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,boolean)	97	None	replace
413	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean,String)	97	None	replace
414	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  SNAPPY_RAW);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean,String)	97	None	replace
415	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,InputStream,boolean)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  in,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,InputStream,boolean)	97	None	replace
416	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean,int)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated,  signatureLength);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean,int)	97	None	replace
417	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,boolean)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,boolean)	75	None	replace
418	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  e);  [CE]  cannot  find  symbol  e  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  e);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  e);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  e	75	None	replace
419	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  in.mark(signatureLength));	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  'void'  type  not  allowed  here	75	None	replace
420	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,InputStream,boolean,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,InputStream,boolean,int)	75	None	replace
421	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  deFLATE  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	75	None	replace
422	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)	75	None	replace
423	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	18	None	replace
424	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)	18	None	replace
425	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  decompressConcatenated,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)	18	None	replace
426	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  ||    BZip2CompressorInputStream.matches(signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
427	[BUG]  [BUGGY]  ||  in.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
428	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,Boolean)	79	None	replace
429	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,Boolean)	79	None	replace
430	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,Boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,Boolean)	79	None	replace
431	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,int,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,int,boolean)	79	None	replace
432	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength),  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	79	None	replace
433	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,Boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,Boolean)	79	None	replace
434	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)	79	None	replace
435	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(signature,  signatureLength);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(signature,  signatureLength);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
436	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(signatureLength,  decompressConcatenated);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
437	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(signatureLength,  DEFLATE);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
438	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.create(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.create(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.create(signatureLength,  decompressConcatenated);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	43	None	replace
439	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.create(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.create(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.create(signature,  signatureLength);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	43	None	replace
440	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(in,  signatureLength);  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(in,  signatureLength);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
441	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	165	None	replace
442	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  signatureLength;  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  signatureLength;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  signatureLength;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
443	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  signatureLength;  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  signatureLength;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  signatureLength;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
444	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  1;  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  1;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  1;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
445	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  InputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  InputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  InputStream.DECOMPRESSION;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
446	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP_DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP_DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP_DECOMPRESSION;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
447	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,InputStream)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressUntilEOF,  in);	  new    BZip2CompressorInputStream(decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,InputStream)	111	None	replace
448	[BUG]  [BUGGY]  decompressConcatenated  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressConcatenated  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressConcatenated  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  incompatible  types	98	None	replace
449	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);	  new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)	98	None	replace
450	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF);	  new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean)	98	None	replace
451	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  in,  0);	  new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)	98	None	replace
452	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readIn();	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
453	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  this.in.readIn();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  this.in.readIn();	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
454	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn(signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readIn(signature);	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
455	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInputStream(in,  signatureLength);	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
456	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)	16	None	replace
457	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	16	None	replace
458	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String,int)	16	None	replace
459	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String,int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String,int)	16	None	replace
460	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  GZIP);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)	56	None	replace
461	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	28	None	replace
462	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	28	None	replace
463	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  in.mark(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  in.mark(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	28	None	replace
464	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)	195	None	replace
465	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	195	None	replace
466	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	68	None	replace
467	[BUG]  [BUGGY]  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	68	None	replace
468	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	68	None	replace
469	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	68	None	replace
470	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(signature,  decompressConcatenated);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
471	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(signatureLength,  decompressConcatenated);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
472	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  signatureLength);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
473	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressConcatenated,  decompressUntilEOF);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
474	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
475	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
476	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
477	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
478	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
479	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  in.mark(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  in.mark(signatureLength),  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  in.mark(signatureLength),  decompressUntilEOF);	  new    BZip2CompressorInputStream(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	96	None	replace
480	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,Boolean)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressUntilEOF);	  new    BZip2CompressorInputStream(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,Boolean)	96	None	replace
481	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,int)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressUntilEOF,  signatureLength);	  new    BZip2CompressorInputStream(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,int)	96	None	replace
482	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signatureLength,  in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signatureLength,  in.mark(signatureLength));	  new    BZip2CompressorInputStream(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	96	None	replace
483	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
484	[BUG]  [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
485	[BUG]  [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
486	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
487	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
488	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
489	[BUG]  [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
490	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
491	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
492	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
493	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
494	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  0);  }  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  0);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  0);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
495	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
496	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
497	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
498	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	106	2	add
499	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	106	2	add
500	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	106	2	add
501	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	106	2	add
502	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	106	None	add
503	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	106	2	add
504	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	106	2	add
505	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	106	None	add
506	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  0);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]              NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  0);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  0);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	106	None	add
507	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	106	None	add
508	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  'catch'  without  'try'  [FE]                  NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  'catch'  without  'try'	106	None	add
509	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA,  1);	  return    new    BZip2CompressorInputStream(in,    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	85	None	replace
510	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2,  1);  [CE]  cannot  find  symbol  GZIP2  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP2,  1);	  return    new    BZip2CompressorInputStream(in,    1);    	non-compiled	[CE]  cannot  find  symbol  GZIP2	85	None	replace
511	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean,boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean,boolean)	178	None	replace
512	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,Boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,Boolean)	178	None	replace
513	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,boolean,Boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE,  decompressConcatenated,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String,boolean,Boolean)	178	None	replace
514	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.matches(signatureLength,  DEFLATE);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
515	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    new  BZip2CompressorInputStream(in);	  	compilable	  [FE]  CompressorException  	192	2	add
516	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    new  BZip2CompressorInputStream(in);	  	compilable	  [FE]  CompressorException  	192	2	add
517	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
518	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
519	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
520	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
521	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	192	2	add
522	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	192	2	add
523	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
524	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
525	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  unreachable  statement  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  unreachable  statement	192	None	add
526	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.close();  }	  	compilable	  [FE]  CompressorException  	192	2	add
527	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.close();  }  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.close();  }	  	compilable	  [FE]  CompressorException  	192	2	add
528	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	192	None	add
529	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  InputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	25	None	replace
530	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.close();  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
531	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	30	None	replace
532	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.reset();  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.reset();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.reset();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
533	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
534	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
535	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
536	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
537	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  illegal  start  of  expression  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
538	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0  [CE]  illegal  start  of  expression  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
539	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readIn(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readIn(signature,  signatureLength);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
540	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.readIn());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.readIn());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.readIn());	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
541	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	14	None	replace
542	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	14	None	replace
543	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
544	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	14	None	replace
545	[BUG]  [BUGGY]  DecompressConcatenated  <  T>)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [CE]  not  a  statement  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  T>)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  T>)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
546	[BUG]  [BUGGY]  DecompressConcatenated  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [CE]  not  a  statement  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  not  a  statement	14	None	replace
547	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	76	None	replace
548	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	128	None	replace
549	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	128	None	replace
550	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  0);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	128	None	replace
551	[BUG]  [BUGGY]  in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  not  a  statement	150	None	replace
552	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ')'  expected	150	None	replace
553	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  '('  or  '['  expected	150	None	replace
554	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
555	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,boolean,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature,  in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  in,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],InputStream,boolean,int)	80	None	replace
556	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,InputStream,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,InputStream,int)	80	None	replace
557	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	80	None	replace
558	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated,  signatureLength);  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  'void'  type  not  allowed  here	80	None	replace
559	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  result  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  result	80	None	replace
560	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,int)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,int)	80	None	replace
561	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	148	None	replace
562	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  ')'  expected	148	None	replace
563	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  ')'  expected	148	None	replace
564	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
565	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
566	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
567	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  [CE]  illegal  start  of  expression  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
568	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  [CE]  illegal  start  of  expression  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  0))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
569	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [CE]  illegal  start  of  expression  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
570	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  [CE]  illegal  start  of  expression  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
571	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	66	2	add
572	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	66	2	add
573	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {	  	non-compiled	[CE]  'catch'  without  'try'	66	None	add
574	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	66	None	add
575	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(SignatureLength);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(SignatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(SignatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	66	None	add
576	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  ';'  expected	66	None	add
577	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  0);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	27	None	replace
578	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  1);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
579	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  12);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  12);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
580	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  2);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
581	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  32);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  32);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  32);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
582	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  10);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  10);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  10);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
583	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  3);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  3);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  3);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
584	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	110	None	replace
585	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  [CE]  'catch'  without  'try'  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	110	None	replace
586	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  0);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,int)	183	None	replace
587	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  1);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)	183	None	replace
588	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  0);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,int)	183	None	replace
589	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  2);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)	183	None	replace
590	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,int)	44	None	replace
591	[BUG]  [BUGGY]  if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }	  return    new    BZip2CompressorInputStream(decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  length	74	None	replace
592	[BUG]  [BUGGY]  if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  else  {  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  length	74	None	replace
593	[BUG]  [BUGGY]  if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  BZip2CompressorInputStream.length)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    BZip2CompressorInputStream(decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  length	74	None	replace
594	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	100	2	add
595	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	100	2	add
596	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
597	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  cannot  find  symbol	100	None	add
598	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	100	2	add
599	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	100	2	add
600	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSED);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
601	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSING);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSING);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSING);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
602	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSION);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
603	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSATION);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSATION);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSATION);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
604	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
605	[BUG]  [BUGGY]  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZip2Compressor  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZip2Compressor	10	None	replace
606	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength);	  new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	95	None	replace
607	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW);	  new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	95	None	replace
608	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  in);  [CE]  cannot  find  symbol  deFLATE  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(deFLATE,  in);	  new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	95	None	replace
609	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200);	  new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	95	None	replace
610	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  10);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  10);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  10);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    10);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	93	None	replace
611	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  12);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  12);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    10);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	93	None	replace
612	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInput();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  this.in.readInput();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  this.in.readInput();	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
613	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInput();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInput();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readInput();	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
614	[BUG]  [BUGGY]  InputStream  in  =  JOUtils.readInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  JOUtils.readInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  JOUtils.readInputStream(in,  signatureLength);	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
615	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInput(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInput(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInput(in,  signatureLength);	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
616	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  LZMA);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String)	116	None	replace
617	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)	116	None	replace
618	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
619	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	63	None	replace
620	[BUG]  [BUGGY]  If(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  If(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	If(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	151	None	replace
621	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompress	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
622	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
623	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
624	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	133	None	replace
625	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)	38	None	replace
626	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	replace
627	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  result  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  result	42	None	replace
628	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	replace
629	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	replace
630	[BUG]  [BUGGY]  ensureConcatenated(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ensureConcatenated(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	ensureConcatenated(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
631	[BUG]  [BUGGY]  safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
632	[BUG]  [BUGGY]  safeInputStream(in,  DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
633	[BUG]  [BUGGY]  safeInputStream(in,  0)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  0)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  0)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
634	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  ';'  expected	52	None	replace
635	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  0);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in,  0);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
636	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
637	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  UntilEOF);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
638	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
639	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
640	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
641	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
642	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	86	2	add
643	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	86	2	add
644	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(compressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  compressUntilEOF  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(compressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(compressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  compressUntilEOF	86	None	add
645	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    If(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  ';'  expected	86	None	add
646	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(descompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  descompressUntilEOF  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(descompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(descompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  descompressUntilEOF	86	None	add
647	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSING);  }  [CE]  cannot  find  symbol  DECOMPRESSING  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSING);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSING);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSING	86	None	add
648	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
649	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
650	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
651	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
652	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
653	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenate);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenate);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenate);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
654	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  PACK200);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	57	None	replace
655	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	57	None	replace
656	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  SNAPPY_FRAMED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  SNAPPY_FRAMED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  SNAPPY_FRAMED);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	57	None	replace
657	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])	47	None	replace
658	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,String)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  SNAPPY_RAW);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,String)	47	None	replace
659	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,String)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,String)	47	None	replace
660	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	186	None	replace
661	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	186	None	replace
662	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	186	None	replace
663	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
664	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compress  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compress	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
665	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2  [CE]  illegal  start  of  expression  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
666	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  illegal  start  of  expression  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
667	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  [CE]  illegal  start  of  expression  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
668	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZi  [CE]  illegal  start  of  expression  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZi  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZi	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
669	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip  [CE]  illegal  start  of  expression  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
670	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	131	None	replace
671	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0.0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0.0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0.0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	131	None	replace
672	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  10))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  10))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	131	2	replace
673	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  10))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  10))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  10))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	131	2	replace
674	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  SNAPPY_FRAMED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  SNAPPY_FRAMED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  SNAPPY_FRAMED);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	114	None	replace
675	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	114	None	replace
676	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	114	None	replace
677	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	114	None	replace
678	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in.intValue  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in.intValue  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in.intValue  :  BZip2CompressorInputStream.DECOMPRESSION;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
679	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  signatureLength;  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  signatureLength;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  signatureLength;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
680	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  InputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  InputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  InputStream.DECOMPRESSION;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
681	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  1;  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  1;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION  +  1;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
682	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  signatureLength;  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  signatureLength;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  signatureLength;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
683	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP_DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP_DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP_DECOMPRESSION;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
684	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	in.mark(signature.length);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	170	2	replace
685	[BUG]  [BUGGY]  in.mark(signature.length);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signature.length);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	170	2	replace
686	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.DEFAULT);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	170	None	replace
687	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.length);  [CE]  cannot  find  symbol  length  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.length);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	170	None	replace
688	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.BZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.BZIP);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  BZIP	170	None	replace
689	[BUG]  [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.BZIP2);  [CE]  cannot  find  symbol  BZIP2  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.set(signatureLength,  BZip2CompressorInputStream.BZIP2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.set(signatureLength,  BZip2CompressorInputStream.BZIP2);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  BZIP2	170	None	replace
690	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	181	None	replace
691	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean)	181	None	replace
692	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	181	None	replace
693	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	181	None	replace
694	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated);	  result    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean)	39	None	replace
695	[BUG]  [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  result    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	39	None	replace
696	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  result  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  result    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  result	39	None	replace
697	[BUG]  [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  result    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	39	None	replace
698	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  CompressorException  	107	2	replace
699	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  CompressorException  	107	2	replace
700	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	107	None	replace
701	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	107	None	replace
702	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	107	None	replace
703	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	197	None	replace
704	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	197	None	replace
705	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	175	None	replace
706	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	175	None	replace
707	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	175	None	replace
708	[BUG]  [BUGGY]  in.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	175	None	replace
709	[BUG]  [BUGGY]  if(in.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
710	[BUG]  [BUGGY]  nisip.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  nisip.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	nisip.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	175	None	replace
711	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.close();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	in.close();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	compilable	  [FE]  CompressorException  	189	2	replace
712	[BUG]  [BUGGY]  in.close();  [FE]  CompressorException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.close();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.close();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	compilable	  [FE]  CompressorException  	189	2	replace
713	[BUG]  [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  'void'  type  not  allowed  here	189	None	replace
714	[BUG]  [BUGGY]  if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  'void'  type  not  allowed  here	189	None	replace
715	[BUG]  [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  	189	None	replace
716	[BUG]  [BUGGY]  if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  	189	None	replace
717	[BUG]  [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  'void'  type  not  allowed  here	189	None	replace
718	[BUG]  [BUGGY]  if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  'void'  type  not  allowed  here	189	None	replace
719	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
720	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	108	None	replace
721	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
722	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
723	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureL  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureL  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureL	  	non-compiled	[CE]  ')'  expected	6	None	add
724	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
725	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))	  	compilable	  [FE]  CompressorException  	6	2	add
726	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))	  	compilable	  [FE]  CompressorException  	6	2	add
727	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature	  	non-compiled	[CE]  ')'  expected	6	None	add
728	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(sig  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(sig  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(sig	  	non-compiled	[CE]  ')'  expected	6	None	add
729	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signature  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signature  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signature	  	non-compiled	[CE]  ')'  expected	6	None	add
730	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZ  [CE]  '('  or  '['  expected  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZ  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZ	  	non-compiled	[CE]  '('  or  '['  expected	6	None	add
731	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(  [CE]  illegal  start  of  expression  [FE]                  CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
732	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DFLATE);  [CE]  cannot  find  symbol  DFLATE  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DFLATE);	  return    new    BZip2CompressorInputStream(in,    4);    	non-compiled	[CE]  cannot  find  symbol  DFLATE	117	None	replace
733	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2);  [CE]  cannot  find  symbol  GZIP2  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP2);	  return    new    BZip2CompressorInputStream(in,    4);    	non-compiled	[CE]  cannot  find  symbol  GZIP2	117	None	replace
734	[BUG]  [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
735	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	102	None	replace
736	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	61	2	add
737	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	61	2	add
738	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	61	None	add
739	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	61	None	add
740	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	61	None	add
741	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  ';'  expected	61	None	add
742	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	61	None	add
743	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  4);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  4);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  4);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	142	None	replace
744	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  3);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  3);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  3);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	142	None	replace
745	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [CE]  'void'  type  not  allowed  here  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in.mark(signatureLength),  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  'void'  type  not  allowed  here	198	None	replace
746	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,String)	198	None	replace
747	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(DEFLATE,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(DEFLATE,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(DEFLATE,  in);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,InputStream)	198	None	replace
748	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  +  1));  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  +  1));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  +  1));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    in.mark(signatureLength));    	non-compiled	[CE]  'void'  type  not  allowed  here	81	None	replace
749	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength),  DEFLATE);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength),  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength),  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    in.mark(signatureLength));    	non-compiled	[CE]  'void'  type  not  allowed  here	81	None	replace
750	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  -  1));  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  -  1));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  -  1));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    in.mark(signatureLength));    	non-compiled	[CE]  'void'  type  not  allowed  here	81	None	replace
751	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  in.mark(signatureLength));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    in.mark(signatureLength));    	non-compiled	[CE]  'void'  type  not  allowed  here	81	None	replace
752	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  +  2));  [CE]  'void'  type  not  allowed  here  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  +  2));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.mark(signatureLength  +  2));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    in.mark(signatureLength));    	non-compiled	[CE]  'void'  type  not  allowed  here	81	None	replace
753	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	182	None	replace
754	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  signatureLength);	  return    new    BZip2CompressorInputStream(deFLATE,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	59	None	replace
755	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in);  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in);	  return    new    BZip2CompressorInputStream(deFLATE,    in);    	non-compiled	[CE]  'void'  type  not  allowed  here	59	None	replace
756	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
757	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	173	None	replace
758	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    0L);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,boolean)	83	None	replace
759	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L),  signatureLength);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L),  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L),  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0L);    	non-compiled	[CE]  ';'  expected	83	None	replace
760	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    0L);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,String)	83	None	replace
761	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	109	None	replace
762	[BUG]  [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
763	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	109	None	replace
764	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  NullPointerException  	69	2	add
765	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  NullPointerException  	69	2	add
766	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	69	None	add
767	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	69	None	add
768	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	69	None	add
769	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    If(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  ';'  expected	69	None	add
770	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]              NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	69	None	add
771	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  [CE]  'catch'  without  'try'  [FE]                NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {	  	non-compiled	[CE]  'catch'  without  'try'	69	None	add
772	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signatureLength);	  return    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	185	None	replace
773	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
774	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
775	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
776	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
777	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
778	[BUG]  [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
779	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	134	None	replace
780	[BUG]  [BUGGY]  if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	134	None	replace
781	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	compilable	  [FE]  CompressorException  	134	2	replace
782	[BUG]  [BUGGY]  if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	compilable	  [FE]  CompressorException  	134	2	replace
783	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressCon	  	non-compiled	[CE]  ')'  expected	1	None	add
784	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  	non-compiled	[CE]  ')'  expected	1	None	add
785	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	1	2	add
786	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	1	2	add
787	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	1	None	add
788	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decom  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decom  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decom	  	non-compiled	[CE]  ')'  expected	1	None	add
789	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
790	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  	non-compiled	[CE]  ')'  expected	1	None	add
791	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  [CE]  '('  expected  [FE]                  CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if	  	non-compiled	[CE]  '('  expected	1	None	add
792	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  0L,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,long,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  0L,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in,  0L,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,long,int)	84	None	replace
793	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int,boolean)	84	None	replace
794	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,boolean,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L,  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,boolean,int)	84	None	replace
795	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L,  signatureLength,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,long,int,String)	84	None	replace
796	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  Integer.MAX_VALUE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  Integer.MAX_VALUE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  Integer.MAX_VALUE,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int)	84	None	replace
797	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	115	None	replace
798	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,boolean)	115	None	replace
799	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);	  return    new    BZip2CompressorInputStream(deFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,String)	115	None	replace
800	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	17	None	replace
801	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,boolean)	17	None	replace
802	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(deFLATE,  in,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	17	None	replace
803	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  signatureLength);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,int)	17	None	replace
804	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String,boolean)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  DEFLATE,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String,boolean)	17	None	replace
805	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
806	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  signatureLength)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
807	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0)  {  return  new  MutableCompressorInputStream(in,  0);  }  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0)  {  return  new  MutableCompressorInputStream(in,  0);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0)  {  return  new  MutableCompressorInputStream(in,  0);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
808	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF)  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  }  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF)  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF)  {  return  new  MutableCompressorInputStream(in,  UntilEOF);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
809	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
810	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signatureLength,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
811	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  DEFLATE)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  DEFLATE)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  DEFLATE)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
812	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in.mark(signatureLength));	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	101	None	replace
813	[BUG]  [BUGGY]  ensureConcatenated(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ensureConcatenated(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	ensureConcatenated(in,  decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
814	[BUG]  [BUGGY]  safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
815	[BUG]  [BUGGY]  safeInputStream(in,  0)  {  return  new  BZip2CompressorInputStream(in,  0);  }  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  0)  {  return  new  BZip2CompressorInputStream(in,  0);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  0)  {  return  new  BZip2CompressorInputStream(in,  0);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
816	[BUG]  [BUGGY]  safeInputStream(in,  DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
817	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
818	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  4);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  4);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  4);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
819	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  0);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
820	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
821	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
822	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  2);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
823	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	130	None	replace
824	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
825	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signatureLength);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
826	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
827	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  in);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
828	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF,  0);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean,int)	90	None	replace
829	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  4);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  4);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  4);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)	90	None	replace
830	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  1);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int)	90	None	replace
831	[BUG]  [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
832	[BUG]  [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  not  a  statement  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
833	[BUG]  [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  not  a  statement  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
834	[BUG]  [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  not  a  statement  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  not  a  statement	3	None	replace
835	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	compilable	  [FE]  CompressorException  	126	2	replace
836	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	compilable	  [FE]  CompressorException  	126	2	replace
837	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	126	None	replace
838	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	126	None	replace
839	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
840	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  '('  or  '['  expected	126	None	replace
841	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]              CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
842	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  decompressUntilEOF);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
843	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(in,  DEFLATE);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
844	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  DEFLATE);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
845	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.newInstance(decompressConcatenated,  in);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.newInstance(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
846	[BUG]  [BUGGY]  if(BZIP2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZIP2CompressorInputStream  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZIP2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZIP2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZIP2CompressorInputStream	175	None	replace
847	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	175	None	replace
848	[BUG]  [BUGGY]  if(BZIP2.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZIP2.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZIP2.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;	175	None	replace
849	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	175	None	replace
850	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	124	None	replace
851	[BUG]  [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	124	None	replace
852	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    	compilable	  [FE]  CompressorException  	65	2	replace
853	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    	compilable	  [FE]  CompressorException  	65	2	replace
854	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	65	None	replace
855	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in);  }  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0))  {  return  new  MutableCompressorInputStream(in);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
856	[BUG]  [BUGGY]  in.decompressConcatenated(signatureLength));  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.decompressConcatenated(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.decompressConcatenated(signatureLength));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
857	[BUG]  [BUGGY]  in.decompress(signatureLength));  [CE]  ';'  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.decompress(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.decompress(signatureLength));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
858	[BUG]  [BUGGY]  in.seek(signatureLength));  [CE]  ';'  expected  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.seek(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.seek(signatureLength));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
859	[BUG]  [BUGGY]  in.mark(signatureLength)+  1);  [CE]  not  a  statement  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength)+  1);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength)+  1);	  in.mark(signatureLength));    	non-compiled	[CE]  not  a  statement	171	None	replace
860	[BUG]  [BUGGY]  decompressConcatenated  =  new  BZip2CompressorInputStream(in);  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressConcatenated  =  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressConcatenated  =  new  BZip2CompressorInputStream(in);	  new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  incompatible  types	112	None	replace
861	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	4	None	replace
862	[BUG]  [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	4	None	replace
863	[BUG]  [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	4	None	replace
864	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
865	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESS  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESS  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESS	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  ')'  expected	4	None	replace
866	[BUG]  [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
867	[BUG]  [BUGGY]  final  GZIP2CompressorInputStream  in  =  new  GZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  GZIP2CompressorInputStream  in  =  new  GZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  GZIP2CompressorInputStream  in  =  new  GZip2CompressorInputStream(decompressConcatenated,  signature);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
868	[BUG]  [BUGGY]  final  GZIP2CompressorInputStream  in  =  new  GZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  final  GZIP2CompressorInputStream  in  =  new  GZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	final  GZIP2CompressorInputStream  in  =  new  GZip2CompressorInputStream(signature,  decompressConcatenated);	  final    BZip2CompressorInputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
869	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  not  a  statement	110	None	replace
870	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  ')'  expected	110	None	replace
871	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureL  [CE]  not  a  statement  [FE]                          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureL  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureL	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  not  a  statement	110	None	replace
872	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	109	None	replace
873	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	109	None	replace
874	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	109	None	replace
875	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	109	None	replace
876	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signature);  [CE]  cannot  find  symbol  deFLATE  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(deFLATE,  signature);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	47	None	replace
877	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(deflate,  signature);  [CE]  cannot  find  symbol  deflate  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(deflate,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(deflate,  signature);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deflate	47	None	replace
878	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(DEFLATE,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,byte[])  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(DEFLATE,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(DEFLATE,  signature);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,byte[])	47	None	replace
879	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompress,  signature);  [CE]  cannot  find  symbol  decompress  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompress,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompress,  signature);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompress	47	None	replace
880	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	131	None	replace
881	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  final  parameter  in  may  not  be  assigned  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	131	None	replace
882	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	131	None	replace
883	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  in,  decompressUntilEOF,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(deFLATE,  in,  decompressUntilEOF,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	97	None	replace
884	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,InputStream,boolean)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressUntilEOF,  in,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,InputStream,boolean)	97	None	replace
885	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean)	97	None	replace
886	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  LZMA,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  LZMA,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)	181	None	replace
887	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  final  parameter  in  may  not  be  assigned  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	130	None	replace
888	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  unreachable  statement	130	None	replace
889	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signatureLength)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signatureLength)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signatureLength)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
890	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  pendingEOF)  {  return  new  MutableCompressorInputStream(in,  pendingEOF);  }  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  pendingEOF)  {  return  new  MutableCompressorInputStream(in,  pendingEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  pendingEOF)  {  return  new  MutableCompressorInputStream(in,  pendingEOF);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated)    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	153	None	replace
891	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
892	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  BZip2CompressorInputStream.create(in,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
893	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  DEFLATE?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  DEFLATE?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  DEFLATE?  in  :  BZip2CompressorInputStream.create(in,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
894	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0L,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,long,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0L,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  0L,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,long,int)	84	None	replace
895	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0L,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,long,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0L,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0L,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0L,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,long,int)	84	None	replace
896	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW);	  new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)	98	None	replace
897	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  0,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  0,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  0,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int,int)	113	None	replace
898	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  0);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	113	None	replace
899	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  0);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)	113	None	replace
900	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
901	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
902	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    signature))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
903	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressUntilEOF));  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressUntilEOF));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressUntilEOF));	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
904	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in);	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
905	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
906	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	176	None	replace
907	[BUG]  [BUGGY]  if(BZIP2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZIP2CompressorInputStream  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZIP2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZIP2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZIP2CompressorInputStream	176	None	replace
908	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
909	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(deFLATE);  [CE]  cannot  find  symbol  deFLATE  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(deFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(deFLATE);	  new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	193	None	replace
910	[BUG]  [BUGGY]  new  GZIP2CompressorInputStream(in);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIP2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIP2CompressorInputStream(in);	  new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
911	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	29	None	replace
912	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	replace
913	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	29	None	replace
914	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  return    new    BZip2CompressorInputStream(in);    	compilable	  [FE]  CompressorException  	185	2	replace
915	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  return    new    BZip2CompressorInputStream(in);    	compilable	  [FE]  CompressorException  	185	2	replace
916	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  PACK200);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)	122	None	replace
917	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	18	None	replace
918	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	27	None	replace
919	[BUG]  [BUGGY]  if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  incompatible  types  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  incompatible  types	27	None	replace
920	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ')'  expected	27	None	replace
921	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)	159	None	replace
922	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	159	None	replace
923	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	190	None	replace
924	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	190	None	replace
925	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
926	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
927	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	190	None	replace
928	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressUntilEOF,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,InputStream,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressUntilEOF,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressUntilEOF,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,InputStream,boolean)	13	None	replace
929	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(bZIP2,  in,  decompressConcatenated);  [CE]  cannot  find  symbol  bZIP2  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(bZIP2,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(bZIP2,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  bZIP2	13	None	replace
930	[BUG]  [BUGGY]  if(signature!=  null)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signature!=  null)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signature!=  null)  {  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  }	  return    new    BZip2CompressorInputStream(decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])	74	None	replace
931	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,byte[])  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signature);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,byte[])	74	None	replace
932	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  cannot  find  symbol  result  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  result	74	None	replace
933	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
934	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
935	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
936	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	149	None	replace
937	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	165	None	replace
938	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	165	None	replace
939	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  40);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  40);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  40);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    10);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int)	93	None	replace
940	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
941	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  0)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  0)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  0)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
942	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	7	None	replace
943	[BUG]  [BUGGY]  CompressorInputStream  in  =  new  CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  CompressorInputStream  in  =  new  CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	CompressorInputStream  in  =  new  CompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
944	[BUG]  [BUGGY]  MutableCompressorInputStream  in  =  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream  in  =  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream  in  =  new  MutableCompressorInputStream(in,  decompressConcatenated);	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
945	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	132	None	replace
946	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  pendingEOF  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  pendingEOF	132	None	replace
947	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	132	None	replace
948	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	132	None	replace
949	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	15	None	replace
950	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
951	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
952	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
953	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
954	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
955	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	68	None	replace
956	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	68	None	replace
957	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int)	46	None	replace
958	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean,int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF,  signatureLength);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean,int)	46	None	replace
959	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,Boolean)	46	None	replace
960	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in.decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  in.decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  in.decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	179	None	replace
961	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE.decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE.decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE.decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	179	None	replace
962	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
963	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	108	None	replace
964	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,Boolean)	182	None	replace
965	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(	  	non-compiled	[CE]  illegal  start  of  expression	37	None	add
966	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInput  [CE]  '('  or  '['  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInput  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in,    decompressConcatenated);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInput	  	non-compiled	[CE]  '('  or  '['  expected	37	None	add
967	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	173	None	replace
968	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	173	None	replace
969	[BUG]  [BUGGY]  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  not  a  statement  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  not  a  statement	134	None	replace
970	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)	120	None	replace
971	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)	120	None	replace
972	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	69	None	add
973	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	69	None	add
974	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	69	None	add
975	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	61	None	add
976	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	61	None	add
977	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BOZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  BOZip2CompressorInputStream  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BOZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BOZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  BOZip2CompressorInputStream	61	None	add
978	[BUG]  [BUGGY]  safeInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  DEFLATE);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
979	[BUG]  [BUGGY]  SafeInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  SafeInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	SafeInputStream(in,  decompressConcatenated);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
980	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated,  DEFLATE);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
981	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInput(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInput(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readInput(in);	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
982	[BUG]  [BUGGY]  InputStream  in  =  GZip2CompressorInputStream.readInput();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  GZip2CompressorInputStream.readInput();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  GZip2CompressorInputStream.readInput();	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
983	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInput(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInput(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInput(in,  DEFLATE);	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
984	[BUG]  [BUGGY]  InputStream  in  =  BZip2Compressor.readInput();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2Compressor.readInput();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2Compressor.readInput();	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
985	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  0);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	142	None	replace
986	[BUG]  [BUGGY]  safeCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
987	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
988	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
989	[BUG]  [BUGGY]  RecompressUntilEOF  =  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  RecompressUntilEOF  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  RecompressUntilEOF  =  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	RecompressUntilEOF  =  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  RecompressUntilEOF	62	None	replace
990	[BUG]  [BUGGY]  safeCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	62	None	replace
991	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readFully(in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
992	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.read();  [CE]  non-static  method  read()  cannot  be  referenced  from  a  static  context  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.read();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.read();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  non-static  method  read()  cannot  be  referenced  from  a  static  context	31	None	replace
993	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt(in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
994	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	14	None	replace
995	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	14	None	replace
996	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,boolean)	45	None	replace
997	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0.0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0.0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0.0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	155	None	replace
998	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcat  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcat  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcat	  	non-compiled	[CE]  ')'  expected	1	None	add
999	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  de  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  de  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  de	  	non-compiled	[CE]  ')'  expected	1	None	add
1000	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1001	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(decompressConcatenated,  signature))  {	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
1002	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF,  0);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean,int)	90	None	replace
1003	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated,  0);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean,int)	90	None	replace
1004	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  signatureLength,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  signatureLength,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  signatureLength,  0);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int,int)	90	None	replace
1005	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1006	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1007	[BUG]  [BUGGY]  safeInputStream(in,  UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }	  safeInputStream(in,    decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	53	None	replace
1008	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compressor  [CE]  '('  or  '['  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compressor  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2Compressor	  	non-compiled	[CE]  '('  or  '['  expected	125	None	add
1009	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInput  [CE]  '('  or  '['  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInput  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInput	  	non-compiled	[CE]  '('  or  '['  expected	125	None	add
1010	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in	  	non-compiled	[CE]  ')'  expected	125	None	add
1011	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  }	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	174	None	replace
1012	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	174	None	replace
1013	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	128	None	replace
1014	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	128	None	replace
1015	[BUG]  [BUGGY]  if(UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	128	None	replace
1016	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	128	None	replace
1017	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);	  new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	95	None	replace
1018	[BUG]  [BUGGY]  if(DEFLATE.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;	194	None	replace
1019	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(!BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	194	2	replace
1020	[BUG]  [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	194	2	replace
1021	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  in.mark(signatureLength));	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    in.mark(signatureLength));    	non-compiled	[CE]  'void'  type  not  allowed  here	81	None	replace
1022	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	63	None	replace
1023	[BUG]  [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  UntilEOF);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	5	None	replace
1024	[BUG]  [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	5	None	replace
1025	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
1026	[BUG]  [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESS  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESS  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESS	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    }    	non-compiled	[CE]  ')'  expected	5	None	replace
1027	[BUG]  [BUGGY]  DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
1028	[BUG]  [BUGGY]  CompressorInputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  CompressorInputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	CompressorInputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1029	[BUG]  [BUGGY]  CompressorInputStream  in  =  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  CompressorInputStream  in  =  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	CompressorInputStream  in  =  new  CompressorInputStream(in,  decompressUntilEOF);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1030	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  BZIP2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  BZIP2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  BZIP2);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    e);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)	78	None	replace
1031	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  LZMA);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    e);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String)	78	None	replace
1032	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  GZIP2);  [CE]  cannot  find  symbol  GZIP2  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  GZIP2);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  GZIP2);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    e);    	non-compiled	[CE]  cannot  find  symbol  GZIP2	78	None	replace
1033	[BUG]  [BUGGY]  decompressUntilEOF  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	87	None	replace
1034	[BUG]  [BUGGY]  DecompressUntilEOF  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
1035	[BUG]  [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	87	None	replace
1036	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)	80	None	replace
1037	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	80	None	replace
1038	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  in  =  new  BZip2CompressorInputStream(in);  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  unreachable  statement	184	None	add
1039	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	184	None	add
1040	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	184	None	add
1041	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
1042	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
1043	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	102	None	replace
1044	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1045	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
1046	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature	  	non-compiled	[CE]  ')'  expected	104	None	add
1047	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureL  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureL  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureL	  	non-compiled	[CE]  ')'  expected	104	None	add
1048	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
1049	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	9	None	replace
1050	[BUG]  [BUGGY]  if(DFLATE.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  DFLATE  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DFLATE.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DFLATE.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  cannot  find  symbol  DFLATE	9	None	replace
1051	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[])	38	None	replace
1052	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DECOMPRESSION);	  new    BZip2CompressorInputStream(decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	111	None	replace
1053	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DECOMPRESSED);	  new    BZip2CompressorInputStream(decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	111	None	replace
1054	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  decompressConcatenated,  signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  decompressConcatenated,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  decompressConcatenated,  signatureLength,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	76	None	replace
1055	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)	76	None	replace
1056	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  LZMA);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	116	None	replace
1057	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	116	None	replace
1058	[BUG]  [BUGGY]  if(BZip0CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip0CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZip0CompressorInputStream  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip0CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip0CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip0CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip0CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip1CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZip0CompressorInputStream	118	None	replace
1059	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.DECOMPRESSION;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1060	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP;  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.BZIP;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1061	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,String)	58	None	replace
1062	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1063	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	28	None	replace
1064	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  }  [CE]  unreachable  statement  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  unreachable  statement	28	None	replace
1065	[BUG]  [BUGGY]  in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  not  a  statement	150	None	replace
1066	[BUG]  [BUGGY]  in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  not  a  statement	150	None	replace
1067	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ')'  expected	150	None	replace
1068	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	67	None	replace
1069	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	67	2	replace
1070	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	67	2	replace
1071	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	67	None	replace
1072	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  ';'  expected  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated)  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1073	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  ';'  expected	67	None	replace
1074	[BUG]  [BUGGY]  InputStream  in  =  GZip2CompressorInputStream.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  GZip2CompressorInputStream.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  GZip2CompressorInputStream.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1075	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readInt(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readInt(signature.length);	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1076	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [CE]  unreachable  statement  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  unreachable  statement	189	None	replace
1077	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [CE]  cannot  find  symbol  UntilEOF  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	189	None	replace
1078	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	189	None	replace
1079	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,InputStream,boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,InputStream,boolean)	12	None	replace
1080	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	86	None	add
1081	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  NullPointerException  	86	2	add
1082	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  NullPointerException  	86	2	add
1083	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DECOMPRESSION  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DECOMPRESSION  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DECOMPRESSION  :  BZip2CompressorInputStream.DECOMPRESSION;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1084	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  BZip2CompressorInputStream.DECOMPRESSION;	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1085	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1086	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  DEFLATE?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  DEFLATE?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  DEFLATE?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1087	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  IN  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  IN  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  IN  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1088	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  deFLATE  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(deFLATE,  signature,  decompressUntilEOF);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	94	None	replace
1089	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  DEFLATE);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)	41	None	replace
1090	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  DEFLATE);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean,String)	41	None	replace
1091	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	25	None	replace
1092	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	25	None	replace
1093	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  signature);	  InputStream    in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	25	None	replace
1094	[BUG]  [BUGGY]  if(DEFLATE.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  method  matches  in  class  String  cannot  be  applied  to  given  types;	11	None	replace
1095	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	11	None	replace
1096	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	17	None	replace
1097	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)	17	None	replace
1098	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP,  decompressConcatenated);	  new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	17	None	replace
1099	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readIn(in);	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1100	[BUG]  [BUGGY]  InputStream  in  =  this.in.readOut();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  this.in.readOut();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  this.in.readOut();	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1101	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readOut(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readOut(signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readOut(signature);	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1102	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readOut(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readOut(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readOut(in);	  InputStream    in    =    in.readOut();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1103	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	195	None	replace
1104	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	195	None	replace
1105	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	195	None	replace
1106	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches	  	non-compiled	[CE]  ')'  expected	6	None	add
1107	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
1108	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorIn  [CE]  ')'  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorIn  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorIn	  	non-compiled	[CE]  ')'  expected	6	None	add
1109	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,int,boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(DEFLATE,  signatureLength,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(String,int,boolean)	48	None	replace
1110	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompress,  DEFLATE,  signatureLength);  [CE]  cannot  find  symbol  decompress  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompress,  DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompress,  DEFLATE,  signatureLength);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompress	48	None	replace
1111	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(decompressConcatenated,  signature))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(decompressConcatenated,  signature))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(decompressConcatenated,  signature))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
1112	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  DEFLATE);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  DEFLATE);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
1113	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int)	77	None	replace
1114	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_FRAMED,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_FRAMED,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_FRAMED,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int)	77	None	replace
1115	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(signature,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(signature,  UntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(signature,  UntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	199	None	replace
1116	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip1CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	64	None	add
1117	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressedorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  BZip2CompressedorInputStream  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressedorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressedorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2CompressedorInputStream	64	None	add
1118	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,Boolean)	178	None	replace
1119	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean,boolean)	178	None	replace
1120	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,boolean)	178	None	replace
1121	[BUG]  [BUGGY]  if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  [CE]  incompatible  types  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  incompatible  types	191	None	replace
1122	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength));	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1123	[BUG]  [BUGGY]  if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  else  {  [CE]  'catch'  without  'try'  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  else  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  else  {	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  'catch'  without  'try'	191	None	replace
1124	[BUG]  [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.decompressConcatenated  =  Boolean.valueOf(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	170	None	replace
1125	[BUG]  [BUGGY]  in.decompress(signatureLength);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.decompress(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.decompress(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
1126	[BUG]  [BUGGY]  in.decompressConcatenated(signatureLength);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.decompressConcatenated(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.decompressConcatenated(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
1127	[BUG]  [BUGGY]  in.write(BZip2CompressorInputStream.DEFLATE);  [CE]  cannot  find  symbol  DEFLATE  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(BZip2CompressorInputStream.DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(BZip2CompressorInputStream.DEFLATE);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  DEFLATE	170	None	replace
1128	[BUG]  [BUGGY]  in.write(BZip2CompressorInputStream.class);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(BZip2CompressorInputStream.class);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(BZip2CompressorInputStream.class);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
1129	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  PACK200);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	50	None	replace
1130	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  GZIP);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	50	None	replace
1131	[BUG]  [BUGGY]  if(UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	144	None	replace
1132	[BUG]  [BUGGY]  if(UntilEOF)  {  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(UntilEOF)  {  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(UntilEOF)  {  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	144	None	replace
1133	[BUG]  [BUGGY]  UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	UntilEOF.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	144	None	replace
1134	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressUntilEOF,  signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,byte[])  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressUntilEOF,  signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressUntilEOF,  signature);	  return    new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,byte[])	88	None	replace
1135	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  deFLATE  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	88	None	replace
1136	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean,InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(signature,  decompressUntilEOF,  in);	  return    new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean,InputStream)	88	None	replace
1137	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.read(signatureLength);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1138	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.read(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.read(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.read(signature,  signatureLength);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1139	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(signature,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.read(signature,  signatureLength);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1140	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,String)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  SNAPPY_RAW);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,String)	49	None	replace
1141	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1142	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1143	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  illegal  start  of  expression  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1144	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  3);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  3);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  3);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	99	None	replace
1145	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  DEFLATE.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  DEFLATE.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  DEFLATE.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1146	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  decompressUntilEOF.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  decompressUntilEOF.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  decompressUntilEOF.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1147	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  Integer.toString(in.decompressConcatenated());  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  Integer.toString(in.decompressConcatenated());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  Integer.toString(in.decompressConcatenated());	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1148	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.read(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.read(in);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
1149	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readFully(signature);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
1150	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readFully(signature.length);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
1151	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  DEFLATE);  }  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in,  DEFLATE);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ';'  expected	127	None	replace
1152	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1153	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1154	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  IN  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  IN  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  IN  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1155	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  PACK200);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	60	None	replace
1156	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
1157	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSIONEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSIONEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  DEFLATE);  new  BZip2CompressorInputStream(in,  DECOMPRESSIONEOF);	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	100	None	add
1158	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	100	2	add
1159	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	compilable	  [FE]  NullPointerException  	100	2	add
1160	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSIONEOF);  [CE]  cannot  find  symbol  DECOMPRESSIONEOF  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSIONEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new  BZip2CompressorInputStream(in,  decompressUntilEOF);  new  BZip2CompressorInputStream(in,  DECOMPRESSIONEOF);	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSIONEOF	100	None	add
1161	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP,  DEFLATE,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	57	None	replace
1162	[BUG]  [BUGGY]  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1163	[BUG]  [BUGGY]  if(in  ==  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in  ==  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in  ==  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1164	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1165	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1166	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip  [CE]  '('  or  '['  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1167	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated,  in);  }	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean,InputStream)	201	None	replace
1168	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[],InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  in);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[],InputStream)	201	None	replace
1169	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  }	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)	201	None	replace
1170	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  3);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  3);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  3);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    UntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int)	119	None	replace
1171	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  DEFLATE,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  SNAPPY_RAW,  DEFLATE,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,boolean)	16	None	replace
1172	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  DEFLATE,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String,String)	16	None	replace
1173	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,int)	16	None	replace
1174	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1175	[BUG]  [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  not  a  statement	105	None	replace
1176	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean)	105	None	replace
1177	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	105	None	replace
1178	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength,  decompressUntilEOF);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1179	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(decompressConcatenated,  decompressUntilEOF);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1180	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  0);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  0);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
1181	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength  +  1),  decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength  +  1),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength  +  1),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
1182	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in.length);  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength),  in.length);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
1183	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength  -  1),  decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength  -  1),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength  -  1),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressConcatenated);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
1184	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(out,  decompressConcatenated);  [CE]  cannot  find  symbol  out  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(out,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(out,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  out	115	None	replace
1185	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressUntilEOF,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(Boolean,boolean)	115	None	replace
1186	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	135	2	add
1187	[BUG]  [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in);    }    if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	135	2	add
1188	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
1189	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature	  	non-compiled	[CE]  ')'  expected	106	None	add
1190	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
1191	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  [CE]  <identifier>  expected  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new	  	non-compiled	[CE]  <identifier>  expected	106	None	add
1192	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(decompressUntilEOF);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
1193	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  SNAPPY_RAW);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  SNAPPY_RAW);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
1194	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	151	None	replace
1195	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
1196	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
1197	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  unreachable  statement	192	None	add
1198	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  new  BZip2CompressorInputStream(in))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  new  BZip2CompressorInputStream(in))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  new  BZip2CompressorInputStream(in))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  ')'  expected	192	None	add
1199	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream	  	non-compiled	[CE]  '('  or  '['  expected	192	None	add
1200	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_FRAMED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_FRAMED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_FRAMED);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)	121	None	replace
1201	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(IN,  decompressConcatenated,  SNAPPY_RAW);  [CE]  cannot  find  symbol  IN  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(IN,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(IN,  decompressConcatenated,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  cannot  find  symbol  IN	121	None	replace
1202	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(IN,  in,  decompressConcatenated);  [CE]  cannot  find  symbol  IN  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(IN,  in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(IN,  in,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  cannot  find  symbol  IN	121	None	replace
1203	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	21	None	replace
1204	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,InputStream,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,InputStream,Boolean)	79	None	replace
1205	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,boolean)	82	None	replace
1206	[BUG]  [BUGGY]  InputStream  in  =  JOUtils.readInt(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  JOUtils.readInt(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  JOUtils.readInt(in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1207	[BUG]  [BUGGY]  byte[]  in  =  in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  in  =  in.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  in  =  in.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1208	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	66	2	add
1209	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	66	2	add
1210	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	66	None	add
1211	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	66	None	add
1212	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0L);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,long)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  0L);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  0L);	  return    new    BZip2CompressorInputStream(in,    0L);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,long)	83	None	replace
1213	[BUG]  [BUGGY]  DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  decompressUntilEOF);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
1214	[BUG]  [BUGGY]  DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DeservedCompressorInputStream  in  =  new  DeservedCompressorInputStream(in,  DEFLATE);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
1215	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	154	None	add
1216	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1217	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  DEFLATE  :  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1218	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(IN,  decompressConcatenated);  [CE]  cannot  find  symbol  IN  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(IN,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(IN,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(deFLATE,    in);    	non-compiled	[CE]  cannot  find  symbol  IN	59	None	replace
1219	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readIn(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readIn(in,  signatureLength);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
1220	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readIn(signature);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readIn(signature);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
1221	[BUG]  [BUGGY]  InputStream  in  =  GZip2CompressorInputStream.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  GZip2CompressorInputStream.readIn();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  GZip2CompressorInputStream.readIn();	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
1222	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,String)	89	None	replace
1223	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,Boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,int,Boolean)	89	None	replace
1224	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  UntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  0,  signatureLength,  UntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	89	None	replace
1225	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	70	None	replace
1226	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  ';'  expected  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  UntilEOF))  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
1227	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressUntilEOF)  {  return  new  MutableCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  ';'  expected	70	None	replace
1228	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	70	2	replace
1229	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	70	2	replace
1230	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]            NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	70	None	replace
1231	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
1232	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
1233	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  '('  or  '['  expected	148	None	replace
1234	[BUG]  [BUGGY]  result  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  cannot  find  symbol  result  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  result  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	result  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);	  result    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  result	39	None	replace
1235	[BUG]  [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);	  result    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	39	None	replace
1236	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1237	[BUG]  [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIPCompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	107	None	replace
1238	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readIn(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readIn(in,  signatureLength);	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
1239	[BUG]  [BUGGY]  InputStream  in  =  in.readFully();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readFully();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readFully();	  InputStream    in    =    in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	166	None	replace
1240	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
1241	[BUG]  [BUGGY]  if(in.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.matches(signature,  signatureLength))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1242	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
1243	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  Pack2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	176	None	replace
1244	[BUG]  [BUGGY]  &&  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  &&  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	&&  BZip2CompressorInputStream.matches(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
1245	[BUG]  [BUGGY]  if(decompressConcatenated)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1246	[BUG]  [BUGGY]  if(!in.isEmpty())  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!in.isEmpty())  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!in.isEmpty())  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1247	[BUG]  [BUGGY]  if(in.isEnabled())  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.isEnabled())  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.isEnabled())  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2Compress    	non-compiled	[CE]  '('  or  '['  expected	71	None	replace
1248	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	4	None	replace
1249	[BUG]  [BUGGY]  if(delimpressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  delimpressConcatenated  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(delimpressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(delimpressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  delimpressConcatenated	4	None	replace
1250	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSED);    }    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	4	None	replace
1251	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	86	None	add
1252	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [CE]  cannot  find  symbol  DECOMPRESSED  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSED);  }	  	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSED	86	None	add
1253	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  LZMA);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,String)	60	None	replace
1254	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deflate,  signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  deflate  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deflate,  signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deflate,  signature,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  deflate	88	None	replace
1255	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW,  SNAPPY_FRAMED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW,  SNAPPY_FRAMED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  SNAPPY_RAW,  SNAPPY_FRAMED);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,String,String)	16	None	replace
1256	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2COMpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  BZip2COMpressorInputStream  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2COMpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2COMpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2COMpressorInputStream	64	None	add
1257	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2ConpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  BZip2ConpressorInputStream  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2ConpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2ConpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2ConpressorInputStream	64	None	add
1258	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	27	None	replace
1259	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  descompressConcatenated  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  descompressConcatenated))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  cannot  find  symbol  descompressConcatenated	126	None	replace
1260	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	108	None	replace
1261	[BUG]  [BUGGY]  in.write(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
1262	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
1263	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2,  DEFLATE);  [CE]  cannot  find  symbol  GZIP2  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  GZIP2,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  GZIP2,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    GZIP);    	non-compiled	[CE]  cannot  find  symbol  GZIP2	182	None	replace
1264	[BUG]  [BUGGY]  if(decompressConcatenated  >  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated  >  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated  >  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	14	None	replace
1265	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	14	None	replace
1266	[BUG]  [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String)	14	None	replace
1267	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  0)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  0)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	196	None	replace
1268	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	196	None	replace
1269	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	196	2	replace
1270	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	196	2	replace
1271	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  new  BZip2CompressorInputStream(in);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  0)  {  new  BZip2CompressorInputStream(in);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  0)  {  new  BZip2CompressorInputStream(in);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  ';'  expected	196	None	replace
1272	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    else    {    return    new    BZip2CompressorInputStream(in);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	125	None	add
1273	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signatureLength));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signatureLength));	  return    new    BZip2CompressorInputStream(deFLATE,    in);    	non-compiled	[CE]  'void'  type  not  allowed  here	59	None	replace
1274	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1275	[BUG]  [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  decompressConcatenated,  DEFLATE);	  DesecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1276	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	184	None	add
1277	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  new  BZip2CompressorInputStream(in)))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  new  BZip2CompressorInputStream(in)))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  new  BZip2CompressorInputStream(in)))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	184	None	add
1278	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  null))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  null))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return    new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  null))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	184	None	add
1279	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenation);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenation);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenation);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	124	None	replace
1280	[BUG]  [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZip1CompressorInputStream  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip1CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip1CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    SignatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  BZip1CompressorInputStream	8	None	replace
1281	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DecompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  DecompressConcatenated  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DecompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DecompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    SignatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  DecompressConcatenated	8	None	replace
1282	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(in.decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	179	None	replace
1283	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  in,  DEFLATE);	  new    BZip2CompressorInputStream(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String)	98	None	replace
1284	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  DEFLATE,  PACK200);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)	76	None	replace
1285	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  signatureLength,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,int,String)	76	None	replace
1286	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF)||  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
1287	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	102	None	replace
1288	[BUG]  [BUGGY]  in.write(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1289	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
1290	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String,Boolean)	121	None	replace
1291	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  SNAPPY_FRAMED);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  SNAPPY_FRAMED);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  SNAPPY_RAW,  SNAPPY_FRAMED);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,String,String)	121	None	replace
1292	[BUG]  [BUGGY]  Return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [CE]  not  a  statement  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  Return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	Return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    SNAPPY_RAW);    	non-compiled	[CE]  not  a  statement	121	None	replace
1293	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  InputStream  in  =  in.readInt();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  InputStream  in  =  in.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);  InputStream  in  =  in.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1294	[BUG]  [BUGGY]  InputStream  in  =  decompressUntilEOF.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  decompressUntilEOF.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  decompressUntilEOF.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1295	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF,  in);  InputStream  in  =  in.readInt();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF,  in);  InputStream  in  =  in.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF,  in);  InputStream  in  =  in.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1296	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes();  InputStream  in  =  in.readInt();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes();  InputStream  in  =  in.readInt();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes();  InputStream  in  =  in.readInt();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1297	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in);  }  [CE]  ';'  expected  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  signatureLength))  {  return  new  MutableCompressorInputStream(in);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in);    }    	non-compiled	[CE]  ';'  expected	65	None	replace
1298	[BUG]  [BUGGY]  }  [CE]  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	}	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  	10	None	replace
1299	[BUG]  [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	}  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  	10	None	replace
1300	[BUG]  [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	}  else  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  	10	None	replace
1301	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	}  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	10	2	replace
1302	[BUG]  [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	}  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	10	2	replace
1303	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	197	None	replace
1304	[BUG]  [BUGGY]  new  GZIP2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  ';'  expected  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIP2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIP2CompressorInputStream(in,  decompressUntilEOF);  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	197	None	replace
1305	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  DEFLATE,  GZIP);	  new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String)	95	None	replace
1306	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  GZIP,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    GZIP);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,Boolean)	15	None	replace
1307	[BUG]  [BUGGY]  in.setLength(signatureLength);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.setLength(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.setLength(signatureLength);	  in.mark(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1308	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength  +  12);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	in.mark(signatureLength  +  12);	  in.mark(signatureLength));    	compilable	  [FE]  CompressorException  	171	2	replace
1309	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  [FE]  CompressorException  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength  +  12);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength  +  12);	  in.mark(signatureLength));    	compilable	  [FE]  CompressorException  	171	2	replace
1310	[BUG]  [BUGGY]  in.write(signature.length));  [CE]  ';'  expected  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signature.length));  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signature.length));	  in.mark(signatureLength));    	non-compiled	[CE]  ';'  expected	171	None	replace
1311	[BUG]  [BUGGY]  ||  in.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signatureLength,    signature))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
1312	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	173	None	replace
1313	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated),  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated),  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated),  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  	173	None	replace
1314	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	69	None	add
1315	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(Integer.matches(signature,  signatureLength))  {  return  new  IntegerCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(Integer.matches(signature,  signatureLength))  {  return  new  IntegerCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(Integer.matches(signature,  signatureLength))  {  return  new  IntegerCompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol	69	None	add
1316	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  incompatible  types  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  if(in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    if(in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  incompatible  types	69	None	add
1317	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
1318	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength,  decompressUntilEOF);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	186	None	replace
1319	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated)&&  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	186	None	replace
1320	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	104	None	add
1321	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  not  a  statement	104	None	add
1322	[BUG]  [BUGGY]  if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'void'  type  not  allowed  here  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	187	None	replace
1323	[BUG]  [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'void'  type  not  allowed  here  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	187	None	replace
1324	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	26	2	replace
1325	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	26	2	replace
1326	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	26	2	replace
1327	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	26	2	replace
1328	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	26	2	replace
1329	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	26	2	replace
1330	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  IOUtils.readFully(in,  signature.length);	  InputStream    in    =    in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
1331	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	67	None	replace
1332	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	67	None	replace
1333	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength)||  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1334	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,Boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  PACK200,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,Boolean)	18	None	replace
1335	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signatureLength,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
1336	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1337	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  pendingEOF  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  pendingEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  pendingEOF	151	None	replace
1338	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(decompressConcatenated,  in);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1339	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  decompressUntilEOF);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	68	None	replace
1340	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  in,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,InputStream,int)	82	None	replace
1341	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0,  signatureLength,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int,int,String)	82	None	replace
1342	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  PACK200,  SNAPPY_RAW);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  PACK200,  SNAPPY_RAW);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  PACK200,  SNAPPY_RAW);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    PACK200);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,String,String)	120	None	replace
1343	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	101	2	replace
1344	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	101	2	replace
1345	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	101	2	replace
1346	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	compilable	  [FE]  NullPointerException  	101	2	replace
1347	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.write(signatureLength);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.write(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.write(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
1348	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[],Boolean)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(decompressConcatenated,  signature,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(decompressConcatenated,  signature,  decompressUntilEOF);	  new    BZip2CompressorInputStream(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,byte[],Boolean)	94	None	replace
1349	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	54	None	replace
1350	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressConcatenated);  [CE]  cannot  find  symbol  deFLATE  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(deFLATE,  signature,  decompressConcatenated);	  in    =    new    BZip2CompressorInputStream(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	47	None	replace
1351	[BUG]  [BUGGY]  SafeInputStream  in  =  safeInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  SafeInputStream  in  =  safeInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	SafeInputStream  in  =  safeInputStream(in,  decompressConcatenated);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
1352	[BUG]  [BUGGY]  safeInputStream(in,  decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressConcatenated,  in.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressConcatenated,  in.length);	  safeInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  length	163	None	replace
1353	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  LZMA,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    LZMA);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,String,String)	116	None	replace
1354	[BUG]  [BUGGY]  DesecompressUntilEOF  =  decompressUntilEOF?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  DesecompressUntilEOF  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressUntilEOF  =  decompressUntilEOF?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressUntilEOF  =  decompressUntilEOF?  in  :  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  DesecompressUntilEOF	87	None	replace
1355	[BUG]  [BUGGY]  DesecompressUntilEOF  =  decompressUntilEOF?  in  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  DesecompressUntilEOF  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressUntilEOF  =  decompressUntilEOF?  in  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressUntilEOF  =  decompressUntilEOF?  in  :  BZip2CompressorInputStream.DECOMPRESSION;	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  DesecompressUntilEOF	87	None	replace
1356	[BUG]  [BUGGY]  safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	safeInputStream(in,  decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  if(decompressUntilEOF)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	87	None	replace
1357	[BUG]  [BUGGY]  new  GZip2CompressorInputStream(in);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZip2CompressorInputStream(in);	  new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1358	[BUG]  [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	replace
1359	[BUG]  [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	29	None	replace
1360	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	29	None	replace
1361	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read(BZip2CompressorInputStream.DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read(BZip2CompressorInputStream.DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    byte[]  signature  =  in.read(BZip2CompressorInputStream.DEFLATE);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
1362	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	add
1363	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	132	None	replace
1364	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  pending))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  pending  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  pending))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  pending))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    pendingEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  pending	132	None	replace
1365	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
1366	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
1367	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
1368	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	149	None	replace
1369	[BUG]  [BUGGY]  InputStream  in  =  in.readIO();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readIO();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readIO();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1370	[BUG]  [BUGGY]  InputStream  in  =  in.readInt()  -  1;  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readInt()  -  1;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readInt()  -  1;	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1371	[BUG]  [BUGGY]  InputStream  in  =  in.readIOF();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.readIOF();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.readIOF();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1372	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  pendingEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  pendingEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  pendingEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  }	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	152	None	replace
1373	[BUG]  [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	143	None	replace
1374	[BUG]  [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  unreachable  statement	130	None	replace
1375	[BUG]  [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  final  parameter  in  may  not  be  assigned  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	130	None	replace
1376	[BUG]  [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	130	None	replace
1377	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  decompressUntilEOF,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,Boolean,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  decompressUntilEOF,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated,  decompressUntilEOF,  decompressUntilEOF);	  in    =    new    BZip2CompressorInputStream(signatureLength,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean,Boolean,Boolean)	178	None	replace
1378	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	103	None	replace
1379	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in);  }	          if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	174	None	replace
1380	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);	  in    =    new    BZip2CompressorInputStream(signatureLength,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	50	None	replace
1381	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  0);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  0);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  0);	  in    =    new    BZip2CompressorInputStream(signatureLength,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	113	None	replace
1382	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  [CE]  illegal  start  of  expression  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
1383	[BUG]  [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new        BZip2CompressorInputStream(in,        decompressUntilEOF);        if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    decompressUntilEOF;  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  not  a  statement	106	None	add
1384	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	66	None	add
1385	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2ConpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  BZip2ConpressorInputStream  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2ConpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2ConpressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2ConpressorInputStream	66	None	add
1386	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2InputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  BZip2InputStream  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  if(BZip2InputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    else    {    in.mark(signatureLength);    }    if(BZip2InputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2InputStream	66	None	add
1387	[BUG]  [BUGGY]  ||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  ||    BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1388	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  UntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated,  UntilEOF);	  in    =    new    BZip2CompressorInputStream(signature.length,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	49	None	replace
1389	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  decompressConcatenated);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	201	None	replace
1390	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature),  decompressConcatenated);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	201	None	replace
1391	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature),  decompressConcatenated,  signatureLength);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature),  decompressConcatenated,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature),  decompressConcatenated,  signatureLength);	  return    new    BZip2CompressorInputStream(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	201	None	replace
1392	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	192	None	add
1393	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
1394	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	192	2	add
1395	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  null))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2CompressorInputStream.matches(signature,  null))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2CompressorInputStream.matches(signature,  null))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	192	None	add
1396	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2InputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  cannot  find  symbol  BZip2InputStream  [FE]          CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in);  if(BZip2InputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new    BZip2CompressorInputStream(in);    if(BZip2InputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2InputStream	192	None	add
1397	[BUG]  [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
1398	[BUG]  [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(GZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	194	None	replace
1399	[BUG]  [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(GZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	194	None	replace
1400	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  descompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  descompressUntilEOF  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  descompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  descompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  descompressUntilEOF	61	None	add
1401	[BUG]  [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]          if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	                if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	61	None	add
1402	[BUG]  [BUGGY]  new  GZIP2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  GZIP2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  GZIP2CompressorInputStream(in,  decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ')'  expected	150	None	replace
1403	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    return    new    BZip2CompressorInputStream(    	non-compiled	[CE]  ')'  expected	150	None	replace
1404	[BUG]  [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  signatureLength);	          BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	63	None	replace
1405	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.decompressConcatenated);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.decompressConcatenated);	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
1406	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.limit());  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.limit());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in.mark(signature,  decompressConcatenated),  in.limit());	  return    new    BZip2CompressorInputStream(in.mark(signature,    decompressConcatenated));    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	147	None	replace
1407	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  MutableCompressorInputStream  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  MutableCompressorInputStream	156	None	replace
1408	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  signatureLength);  }  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  MutableCompressorInputStream(in,  signatureLength);  }	  MutableCompressorInputStream.matches(signature,    0))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ';'  expected	156	None	replace
1409	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  decompressUntilEOF,  in);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,Boolean,InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  decompressUntilEOF,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  decompressUntilEOF,  in);	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,boolean,int,Boolean,InputStream)	79	None	replace
1410	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in.readLine());  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in.readLine());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength,  in.readLine());	  return    new    BZip2CompressorInputStream(in,    decompressConcatenated,    signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1411	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  DECOMPRESSION);  [CE]  'void'  type  not  allowed  here  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in.mark(signatureLength),  DECOMPRESSION);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in.mark(signatureLength),  DECOMPRESSION);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    	non-compiled	[CE]  'void'  type  not  allowed  here	199	None	replace
1412	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	110	None	replace
1413	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	110	None	replace
1414	[BUG]  [BUGGY]  if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  'void'  type  not  allowed  here	189	None	replace
1415	[BUG]  [BUGGY]  if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [CE]  'void'  type  not  allowed  here  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(in.mark(signatureLength)>  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.close();    	non-compiled	[CE]  'void'  type  not  allowed  here	189	None	replace
1416	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  DEFLATE))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	175	None	replace
1417	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signatureLength,  decompressConcatenated))  {  return  new  GZip2CompressorInputStream(in,  signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    GZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	175	None	replace
1418	[BUG]  [BUGGY]  ||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
1419	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in);	  return    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  cannot  find  symbol	185	None	replace
1420	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE);  [CE]  cannot  find  symbol  deFLATE  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(deFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(deFLATE);	  return    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	185	None	replace
1421	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1422	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1423	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1424	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  byte[]  signature  =  in.readBytes(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1425	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(decompressConcatenated,  in);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
1426	[BUG]  [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressCONcatenated);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  GZip2CompressorInputStream(in,  decompressCONcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  GZip2CompressorInputStream(in,  decompressCONcatenated);	  return    new    GZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	123	None	replace
1427	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(decompressConcatenated,  DEFLATE);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1428	[BUG]  [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in  =  BZip2CompressorInputStream.create(decompressConcatenated,  signatureLength,  DEFLATE);	  in    =    BZip2CompressorInputStream.create(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
1429	[BUG]  [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
1430	[BUG]  [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	30	None	replace
1431	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	compilable	  [FE]  CompressorException  	30	2	replace
1432	[BUG]  [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(DEFLATE.equals(signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    return    new    BZip2CompressorInputStream(in,    DEFLATE);    	compilable	  [FE]  CompressorException  	30	2	replace
1433	[BUG]  [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInput(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  BZip2CompressorInputStream.readInput(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  BZip2CompressorInputStream.readInput(in,  signatureLength);	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
1434	[BUG]  [BUGGY]  InputStream  in  =  JOUtils.readInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  JOUtils.readInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  JOUtils.readInputStream(in,  DEFLATE);	  InputStream    in    =    in.readInput();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
1435	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  PACK200);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  PACK200);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  PACK200);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	99	None	replace
1436	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  LZMA);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	99	None	replace
1437	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  GZIP);	  new    BZip2CompressorInputStream(in,    0);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	99	None	replace
1438	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  DECOMPRESSION);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DECOMPRESSION);    }    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	5	None	replace
1439	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,Boolean,Boolean)	41	None	replace
1440	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  decompressBlock);  [CE]  cannot  find  symbol  decompressBlock  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  decompressBlock);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  decompressUntilEOF,  decompressBlock);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  decompressBlock	41	None	replace
1441	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  UntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  UntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	75	None	replace
1442	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  GZIP);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  GZIP);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated,  signatureLength,  GZIP);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressConcatenated,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,boolean,int,String)	75	None	replace
1443	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(decompressConcatenated,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.create(decompressConcatenated,  in);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.create(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1444	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.close();  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.close();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.close();  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	198	None	replace
1445	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.write(signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.write(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.write(signatureLength);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	198	None	replace
1446	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.release();  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.release();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.release();  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	198	None	replace
1447	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.reset();  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.reset();  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  in.reset();  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	198	None	replace
1448	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  in.mark(signatureLength);  [CE]  unreachable  statement  [FE]            NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  in.mark(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  unreachable  statement	28	None	replace
1449	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE);  in.mark(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	28	None	replace
1450	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  in.mark(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  in.mark(signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  in.mark(signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	28	None	replace
1451	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  pendingEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  pendingEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  pendingEOF))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
1452	[BUG]  [BUGGY]  MutableCompressorInputStream.matches(signature,  DEFLATE))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  MutableCompressorInputStream.matches(signature,  DEFLATE))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	MutableCompressorInputStream.matches(signature,  DEFLATE))  {  return  new  MutableCompressorInputStream(in,  decompressConcatenated);	  MutableCompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    MutableCompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  ';'  expected	157	None	replace
1453	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  LZMA);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  LZMA);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  signatureLength,  LZMA);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,int,String)	56	None	replace
1454	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  PACK200,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,String,Boolean)	58	None	replace
1455	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,InputStream,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  DEFLATE,  in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String,InputStream,Boolean)	58	None	replace
1456	[BUG]  [BUGGY]  in.write(signature.length);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(signature.length);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	170	None	replace
1457	[BUG]  [BUGGY]  in.write(BZip2_CompressorInputStream.toByteArray());  [CE]  cannot  find  symbol  BZip2_CompressorInputStream  [FE]      CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.write(BZip2_CompressorInputStream.toByteArray());  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.write(BZip2_CompressorInputStream.toByteArray());	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  BZip2_CompressorInputStream	170	None	replace
1458	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  InputStream  in  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  InputStream  in  =  in.read();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);  InputStream  in  =  in.read();	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
1459	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
1460	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  signatureLength);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
1461	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);  return  new  BZip2CompressorInputStream(in,  DEFLATE);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
1462	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
1463	[BUG]  [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  new  BZip2CompressorInputStream(in,  decompressConcatenated);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	new  BZip2CompressorInputStream(in,  decompressConcatenated);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	195	None	replace
1464	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	195	None	replace
1465	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  [CE]  'void'  type  not  allowed  here  [FE]                NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	191	None	replace
1466	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1467	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF  [CE]  ')'  expected  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signatureLength),  decompressUntilEOF	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  ')'  expected	191	None	replace
1468	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  decompressUntilEOF?  in.decompressConcatenated()  :  in.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  decompressUntilEOF?  in.decompressConcatenated()  :  in.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  decompressUntilEOF?  in.decompressConcatenated()  :  in.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1469	[BUG]  [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  this.decompressConcatenated.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  <  N>  decompressConcatenated  =  this.decompressConcatenated.decompressConcatenated();  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  <  N>  decompressConcatenated  =  this.decompressConcatenated.decompressConcatenated();	  DecompressConcatenated    <    N>    decompressConcatenated    =    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1470	[BUG]  [BUGGY]  if(decompressConcatenated  ||  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'void'  type  not  allowed  here  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressConcatenated  ||  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressConcatenated  ||  in.mark(signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'void'  type  not  allowed  here	134	None	replace
1471	[BUG]  [BUGGY]  DecompressConcatenated  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  DecompressConcatenated  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenated  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenated  =  decompressConcatenated?  in  :  new  BZip2CompressorInputStream(in,  DEFLATE);	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  cannot  find  symbol  DecompressConcatenated	134	None	replace
1472	[BUG]  [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	in.mark(signatureLength)  {  return  new  BZip2CompressorInputStream(in);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    in.mark(signatureLength)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ';'  expected	188	None	replace
1473	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L),  decompressConcatenated);  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  0L),  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  0L),  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    0L);    	non-compiled	[CE]  ';'  expected	83	None	replace
1474	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  LZMA))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	133	None	replace
1475	[BUG]  [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  GZip2CompressorInputStream  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(GZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(GZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  GZip2CompressorInputStream	133	None	replace
1476	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean)  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(in,  decompressUntilEOF,  decompressConcatenated);	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,Boolean,boolean)	133	None	replace
1477	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	109	None	replace
1478	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	109	None	replace
1479	[BUG]  [BUGGY]  if(!decompressUntilEOF)  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(!decompressUntilEOF)  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(!decompressUntilEOF)  {  if(decompressConcatenated)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	3	None	replace
1480	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  NullPointerException  	3	2	replace
1481	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  NullPointerException  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  NullPointerException  	3	2	replace
1482	[BUG]  [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(decompressUntilEOF)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  if(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    If(decompressConcatenated)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	3	None	replace
1483	[BUG]  [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int,Boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength,  decompressUntilEOF);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	return  new  BZip2CompressorInputStream(decompressConcatenated,  in,  signatureLength,  decompressUntilEOF);	  return    new    BZip2CompressorInputStream(decompressConcatenated,    in,    signatureLength);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,InputStream,int,Boolean)	42	None	replace
1484	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	          if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    else    {    in.mark(signatureLength);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	70	None	replace
1485	[BUG]  [BUGGY]  InputStream  in  =  in.read(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.read(signature.length);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read(signature.length);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1486	[BUG]  [BUGGY]  InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream.DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream.DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream.DEFLATE);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1487	[BUG]  [BUGGY]  InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream.class);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream.class);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  in.read(signatureLength,  BZip2CompressorInputStream.class);	  InputStream    in    =    in.read(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1488	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	add	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	6	2	add
1489	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	if(BZip2CompressorInputStream.matches(signature,        signatureLength))        {        return        new        BZip2CompressorInputStream(in,        decompressConcatenated);        }        if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	6	2	add
1490	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength,  DEFLATE);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
1491	[BUG]  [BUGGY]  ||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  ||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	||  in.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  ||    BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1492	[BUG]  [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  in);  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DecompressConcatenator  <  Object>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  in);	  DecompressConcatenator    <    Object>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  ';'  expected	141	None	replace
1493	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              NullPointerException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    if(BZip2CompressorInputStream.matches(signature,    0))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	131	None	replace
1494	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  in);  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  in);  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  in  :  BZip2CompressorInputStream.DECOMPRESSION,  in);	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  ';'  expected	162	None	replace
1495	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  signatureLength  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  signatureLength  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  signatureLength  :  BZip2CompressorInputStream.DECOMPRESSION;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1496	[BUG]  [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DECOMPRESSION  :  BZip2CompressorInputStream.DECOMPRESSION;  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {      [BUGGY]  DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DECOMPRESSION  :  BZip2CompressorInputStream.DECOMPRESSION;  [BUGGY]      }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	221	221	2	replace	DesecompressConcatenator  <?>  in  =  decompressConcatenated?  DECOMPRESSION  :  BZip2CompressorInputStream.DECOMPRESSION;	  DesecompressConcatenator    <?>    in    =    decompressConcatenated?    in    :    BZip2CompressorInputStream.DECOMPRESSION;    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
