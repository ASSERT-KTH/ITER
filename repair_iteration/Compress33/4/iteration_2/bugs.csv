bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]      final  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  byte[]  signature  =  new  byte[12];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  byte[]  signature  =  new  byte[12];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
2	[BUG]  [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature);  [CE]  no  suitable  method  found  for  readFully(byte[])  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  int  signatureLength  =  IOUtils.readFully(signature);	  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[])	12	None	add
3	[BUG]  [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	12	None	add
4	[BUG]  [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  0);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  int  signatureLength  =  IOUtils.readFully(signature,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	12	None	add
5	[BUG]  [BUGGY]      final  byte[]  signature  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  byte[]  signature  =  in.read();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  byte[]  signature  =  in.read();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
6	[BUG]  [BUGGY]      final  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  byte[]  signature  =  new  byte[6];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
7	[BUG]  [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  int  signatureLength  =  IOUtils.readFully(signature,  1);	  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	12	None	add
8	[BUG]  [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	12	None	add
9	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    1);    in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	1	2	add
10	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	1	2	add
11	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in.mark(signature.length  -  1);	  	non-compiled	[CE]  ';'  expected	1	None	add
12	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    byte[]  signature  =  in.mark(signature.length  -  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
13	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	1	None	add
14	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	1	None	add
15	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	1	None	add
16	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	1	None	add
17	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
18	[BUG]  [BUGGY]  in.write(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  2);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
19	[BUG]  [BUGGY]  in.write(signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signatureLength  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  1);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	18	None	replace
20	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  -  1,  signatureLength);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signatureLength);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	18	None	replace
21	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signature.length);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  -  1,  signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signature.length);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
22	[BUG]  [BUGGY]  in.copy(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.copy(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  1);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
23	[BUG]  [BUGGY]  in.write(signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  1);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
24	[BUG]  [BUGGY]  in.setLength(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.setLength(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  1);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
25	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setLength(signature.length);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  Integer  signatureLength  =  in.setLength(signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  in.setLength(signature.length);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
26	[BUG]  [BUGGY]  in.setLength(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.setLength(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  +  12);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
27	[BUG]  [BUGGY]  in.setLength(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.setLength(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  2);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
28	[BUG]  [BUGGY]  in.setLength(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.setLength(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  12);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
29	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  11);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  +  11);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
30	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  11);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  11);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
31	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  +  2);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
32	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  2);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
33	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  6);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  +  6);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
34	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  6);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  6);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
35	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	5	2	add
36	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	5	2	add
37	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	add
38	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	5	None	add
39	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	5	None	add
40	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	add
41	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	5	None	add
42	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  3);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  3);	  in.mark(signature.length    -    1);    	compilable	  [FE]  CompressorException  	2	2	replace
43	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  3);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  3);	  in.mark(signature.length    -    1);    	compilable	  [FE]  CompressorException  	2	2	replace
44	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  4);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  4);	  in.mark(signature.length    -    1);    	compilable	  [FE]  CompressorException  	2	2	replace
45	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  4);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  4);	  in.mark(signature.length    -    1);    	compilable	  [FE]  CompressorException  	2	2	replace
46	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	10	2	add
47	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	10	2	add
48	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
49	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
50	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
51	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  type  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
52	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  type  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
53	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  type  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
54	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  type  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  illegal  start  of  type	10	None	add
55	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length,  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  1);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
56	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length,  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  2);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
57	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  12);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
58	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length,  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  12);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
59	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length,  4);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  4);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
60	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  3);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length,  3);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  3);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
61	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  new  byte[6];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[6];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
62	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  new  byte[16];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[16];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
63	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  new  byte[1];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[1];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
64	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  new  byte[4];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[4];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
65	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  final  byte[]  signature  =  new  byte[1];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[1];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
66	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[10];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  new  byte[10];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[10];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
67	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  3);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  +  3);	  in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	6	2	replace
68	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  3);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  3);	  in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	6	2	replace
69	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  /  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  12);	  in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	6	2	replace
70	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  /  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  12);	  in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	6	2	replace
71	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    2);    in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	7	2	add
72	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	7	2	add
73	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in.mark(signature.length  -  2);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in.mark(signature.length  -  2);	  	non-compiled	[CE]  ';'  expected	7	None	add
74	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	7	None	add
75	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  byte[]  signature  =  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  byte[]  signature  =  in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    byte[]  signature  =  in.mark(signature.length  -  2);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
76	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	7	None	add
77	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	7	None	add
78	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  [CE]  illegal  start  of  type  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
79	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.markSupported();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.markSupported();	  in.close();    	compilable	  [FE]  CompressorException  	16	2	replace
80	[BUG]  [BUGGY]  in.markSupported();  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.markSupported();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();	  in.close();    	compilable	  [FE]  CompressorException  	16	2	replace
81	[BUG]  [BUGGY]  in.flush();  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.flush();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.flush();	  in.close();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
82	[BUG]  [BUGGY]  in.write(signature);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature);	  in.close();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
83	[BUG]  [BUGGY]  in.release();  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.release();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.release();	  in.close();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
84	[BUG]  [BUGGY]  in.write(signature,  0,  signature.length);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature,  0,  signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signature.length);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
85	[BUG]  [BUGGY]  in.write(signature.length,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length,  signatureLength);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  signatureLength);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	17	None	replace
86	[BUG]  [BUGGY]  in.write(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
87	[BUG]  [BUGGY]  in.write(signature.length,  1);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length,  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  1);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
88	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  6);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  6);	  in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	11	2	replace
89	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  6);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  6);	  in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	11	2	replace
90	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  11);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  11);	  in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	8	2	replace
91	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  11);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  11);	  in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	8	2	replace
92	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	3	2	add
93	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	3	2	add
94	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	3	None	add
95	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	add
96	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	3	None	add
97	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	3	None	add
98	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	3	None	add
99	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length,  decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  decompressConcatenated);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
100	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  1;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  1;  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)+  1;	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
101	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  [CE]  ';'  expected  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in.mark(signature.length  -  12);	  	non-compiled	[CE]  ';'  expected	10	None	add
102	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  in.mark(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    byte[]  signature  =  in.mark(signature.length  -  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
103	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in  =  createInputStream(in,  signature.length  -  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
104	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[12];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    byte[]  signature  =  new  byte[12];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
105	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  byte[12];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  byte[12];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in  =  new  byte[12];	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
106	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in  =  createInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
107	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    byte[]  signature  =  in.mark(signature.length  +  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
108	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in.mark(signature.length  +  1);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  InputStream  in.mark(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    InputStream  in.mark(signature.length  +  1);	  	non-compiled	[CE]  ';'  expected	3	None	add
109	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  this.in.mark(signature.length  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  this.in.mark(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    InputStream  in  =  this.in.mark(signature.length  +  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
110	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  signature.length  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    InputStream  in  =  createInputStream(in,  signature.length  +  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
111	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in.mark(signature.length  +  1);  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in.mark(signature.length  +  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    InputStream  in  =  createInputStream(in.mark(signature.length  +  1);	  	non-compiled	[CE]  ')'  expected	3	None	add
112	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    InputStream  in  =  createInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	add
113	[BUG]  [BUGGY]  in.write(signature.length  -  1,  12);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  -  1,  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  12);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
114	[BUG]  [BUGGY]  in.write(signature.length  -  1  +  12);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  -  1  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1  +  12);	  in.write(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
115	[BUG]  [BUGGY]  in.write(signature,  0,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature,  0,  signatureLength);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signatureLength);	  in.close();    	non-compiled	[CE]  cannot  find  symbol  signatureLength	16	None	replace
116	[BUG]  [BUGGY]  in.write(signature,  0,  12);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature,  0,  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  12);	  in.close();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
117	[BUG]  [BUGGY]  in.copy(signature,  0,  signature.length);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.copy(signature,  0,  signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  0,  signature.length);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
118	[BUG]  [BUGGY]  in.write(signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signatureLength);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	17	None	replace
119	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);	  	non-compiled	[CE]  ')'  expected	7	None	add
120	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
121	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
122	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
123	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
124	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  *  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  *  12);	  in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	11	2	replace
125	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  *  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  *  12);	  in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	11	2	replace
126	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2InputStream(signature.length  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
127	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
128	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
129	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
130	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
131	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  in.mark(signature.length  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    byte[]  signature  =  in.mark(signature.length  +  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
132	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in.mark(signature.length  +  12);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in.mark(signature.length  +  12);	  	non-compiled	[CE]  ';'  expected	5	None	add
133	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  in.mark(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  in.mark(signature.length  +  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
134	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in,  signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in,  signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  createInputStream(in,  signature.length  +  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
135	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  createInputStream(in.mark(signature.length  +  12);	  	non-compiled	[CE]  ')'  expected	5	None	add
136	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[12];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    byte[]  signature  =  new  byte[12];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
137	[BUG]  [BUGGY]      byte[]  signature  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      byte[]  signature  =  in.read();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        byte[]  signature  =  in.read();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
138	[BUG]  [BUGGY]      InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      InputStream  in  =  getInputStream();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        InputStream  in  =  getInputStream();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
139	[BUG]  [BUGGY]      byte[]  signature  =  in.readBytes(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      byte[]  signature  =  in.readBytes(signature);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        byte[]  signature  =  in.readBytes(signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
140	[BUG]  [BUGGY]      InputStream  in  =  getInputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      InputStream  in  =  getInputStream(signature);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        InputStream  in  =  getInputStream(signature);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
141	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  new  byte[2];  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[2];	  byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	9	None	replace
142	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  Integer  signature  =  in.setLength(signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(signature.length);	  in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	15	None	replace
143	[BUG]  [BUGGY]  in.setLength(Signature.length);  [CE]  cannot  find  symbol  Signature  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.setLength(Signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(Signature.length);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  Signature	15	None	replace
144	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated);	      	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
145	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ");  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ");  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ");	      	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
146	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  InputStream  in  =  this.in.readIn();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readIn();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
147	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
148	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  13);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  +  13);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
149	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  13);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  13);	  in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	4	2	replace
150	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length);  [CE]  no  suitable  method  found  for  read(int)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  int  signatureLength  =  in.read(signature.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length);	  in.write(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	17	None	replace
151	[BUG]  [BUGGY]  in.write(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.write(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
152	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    InputStream  in  =  new  BZip2InputStream(signature.length  -  2);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
153	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  2);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    2);    byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
154	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  10);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  10);	  in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	11	2	replace
155	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  10);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  10);	  in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	11	2	replace
156	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  if(in.markSupported())  {  in.close();  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }	  in.close();    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	16	None	replace
157	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }	  in.close();    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	16	None	replace
158	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( " ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( " ");  }	  in.close();    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	16	None	replace
159	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }	  in.close();    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])	16	None	replace
160	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }	  in.close();    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	16	None	replace
161	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [CE]  cannot  find  symbol  length  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol  length	16	None	replace
162	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	add
163	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	3	None	add
164	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	3	None	add
165	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	3	None	add
166	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  	non-compiled	[CE]  ')'  expected	3	None	add
167	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  new  BZip2InputStream(signature.length  +  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
168	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
169	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
170	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    12);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	add
171	[BUG]  [BUGGY]      InputStream  in  =  this.in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]      InputStream  in  =  this.in.read();  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	        InputStream  in  =  this.in.read();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	add
172	[BUG]  [BUGGY]  in.setLength(signature,  in.length);  [CE]  cannot  find  symbol  length  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.setLength(signature,  in.length);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  in.length);	  in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	15	None	replace
173	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  createInputStream(signature.length  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
174	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2InputStream(decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
175	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    1);    InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
176	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in  =  new  BZip2InputStream(signature.length  -  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
177	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  in.mark(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  in.mark(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in  =  in.mark(signature.length  -  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
178	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
179	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  12);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    12);    InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
180	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];    [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]    try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  1);	  byte[]    signature    =    in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
