bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  InputStream  in  =  in.markSupported();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.markSupported();	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	156	None	replace
2	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	156	None	replace
3	[BUG]  [BUGGY]  (in.markSupported()))  {  in.close();  }  [CE]  not  a  statement  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  (in.markSupported()))  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	(in.markSupported()))  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  not  a  statement	156	None	replace
4	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.markSupported());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.markSupported());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamInputStream(in.markSupported());	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	156	None	replace
5	[BUG]  [BUGGY]  byte[]  signature  =  in.readFully();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readFully();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readFully();	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
6	[BUG]  [BUGGY]  byte[]  signature  =  in.readInt();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readInt();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readInt();	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
7	[BUG]  [BUGGY]  byte[]  signature  =  in.readUTF();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readUTF();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readUTF();	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
8	[BUG]  [BUGGY]  byte[]  signature  =  in.read(BZIP2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(BZIP2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(BZIP2);	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
9	[BUG]  [BUGGY]  byte[]  signature  =  in.read(BZIP_SIZE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(BZIP_SIZE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(BZIP_SIZE);	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
10	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[16];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[16];	  final    byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
11	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[11];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[11];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[11];	  final    byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
12	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[10];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[10];	  final    byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
13	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[7];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[7];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[7];	  final    byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
14	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[8];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[8];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[8];	  final    byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
15	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	71	2	add
16	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	71	2	add
17	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(Signature.length  -  2);  [CE]  cannot  find  symbol  Signature  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(Signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(Signature.length  -  2);	  	non-compiled	[CE]  cannot  find  symbol  Signature	71	None	add
18	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  InputStream  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  InputStream  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    InputStream  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);	  	non-compiled	[CE]  ';'  expected	71	None	add
19	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(Signature.length  -  2);  in.mark(signature.length  -  2);  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(Signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(Signature.length  -  2);  in.mark(signature.length  -  2);	  	non-compiled	[CE]  cannot  find  symbol  Signature	71	None	add
20	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  3);	  	compilable	  [FE]  CompressorException  	71	2	add
21	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  3);  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  3);	  	compilable	  [FE]  CompressorException  	71	2	add
22	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  2;  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  2;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2;	  	non-compiled	[CE]  ')'  expected	71	None	add
23	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
24	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)	129	None	replace
25	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
26	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
27	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	129	None	replace
28	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signatureLength);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
29	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	95	None	replace
30	[BUG]  [BUGGY]  in.mark(signature.length,  signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length,  signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length,  signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	95	None	replace
31	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
32	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	95	None	replace
33	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZi  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZi  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZi	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
34	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    byte[]    signature    =    in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	107	None	replace
35	[BUG]  [BUGGY]  String  signatureLength  =  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  +  1);  [CE]  incompatible  types  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  String  signatureLength  =  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	String  signatureLength  =  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    byte[]    signature    =    in.mark(signature.length    +    1);    	non-compiled	[CE]  incompatible  types	107	None	replace
36	[BUG]  [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    byte[]    signature    =    in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	107	None	replace
37	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length);	  in.mark(signature.length    +    1);    byte[]    signature    =    in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	107	None	replace
38	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    byte[]    signature    =    in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	107	None	replace
39	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],String,Boolean)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressUntilEOF);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,Boolean)	8	None	replace
40	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	8	None	replace
41	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],String,String)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  BZIP2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  BZIP2);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,String)	8	None	replace
42	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean)	8	None	replace
43	[BUG]  [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	8	None	replace
44	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String,String)  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  DEFLATE);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,String)	8	None	replace
45	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  INVALID);  [CE]  cannot  find  symbol  INVALID  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  INVALID);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  INVALID);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  INVALID	8	None	replace
46	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    /    12);    in.mark(signature.length  /  12);	  	compilable	  [FE]  CompressorException  	69	2	add
47	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    in.mark(signature.length  /  12);	  	compilable	  [FE]  CompressorException  	69	2	add
48	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in.mark(signature.length  /  12);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in.mark(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in.mark(signature.length  /  12);	  	non-compiled	[CE]  ';'  expected	69	None	add
49	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  in.mark(signature.length  /  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  in.mark(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in  =  in.mark(signature.length  /  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
50	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	69	None	add
51	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  byte[]  signature  =  in.mark(signature.length  /  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  byte[]  signature  =  in.mark(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    byte[]  signature  =  in.mark(signature.length  /  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
52	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	69	None	add
53	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(signature.length  /  12);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    in.mark(signature.length  /  12);  this.decompressUntilEOF  =  IOUtils.readFully(signature.length  /  12);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	69	None	add
54	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  no  suitable  method  found  for  readFully(byte[],boolean)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean)	165	None	replace
55	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	165	None	replace
56	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	165	None	replace
57	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
58	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(!in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(!in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(!in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	165	None	replace
59	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(in.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(in.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(in.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	165	None	replace
60	[BUG]  [BUGGY]  in  =  in.mark(signature.length  +  12);  [CE]  incompatible  types  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  incompatible  types	133	None	replace
61	[BUG]  [BUGGY]  InputStream  in  =  in.mark(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	133	None	replace
62	[BUG]  [BUGGY]  InputStream  in  =  in.mark(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.mark(signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	133	None	replace
63	[BUG]  [BUGGY]  in  =  in.mark(signature.length);  [CE]  incompatible  types  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  in.mark(signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  incompatible  types	133	None	replace
64	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	9	2	add
65	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	9	2	add
66	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(Signature.length  -  1);  [CE]  cannot  find  symbol  Signature  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(Signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(Signature.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol  Signature	9	None	add
67	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    InputStream  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);	  	non-compiled	[CE]  ';'  expected	9	None	add
68	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(Signature.length  -  1);  in.mark(signature.length  -  1);  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(Signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(Signature.length  -  1);  in.mark(signature.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol  Signature	9	None	add
69	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1));  in.mark(signature.length  -  1);  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1));  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1));  in.mark(signature.length  -  1);	  	non-compiled	[CE]  ';'  expected	9	None	add
70	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [CE]  <identifier>  expected  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }	  	non-compiled	[CE]  <identifier>  expected	9	None	add
71	[BUG]  [BUGGY]  in.copy(signature,  0,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  0,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  0,  signatureLength);	  in.write(signature,    0,    12);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	116	None	replace
72	[BUG]  [BUGGY]  in.write(signature,  0,  12  -  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  12  -  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  12  -  signatureLength);	  in.write(signature,    0,    12);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	116	None	replace
73	[BUG]  [BUGGY]  in.copy(signature,  0,  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  0,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
74	[BUG]  [BUGGY]  in.write(signature,  0,  12L);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  12L);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  12L);	  in.write(signature,    0,    12);    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
75	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  11);	  in.mark(signature.length    +    11);    	compilable	  [FE]  CompressorException  	30	2	replace
76	[BUG]  [BUGGY]  in.mark(signature.length  /  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  11);	  in.mark(signature.length    +    11);    	compilable	  [FE]  CompressorException  	30	2	replace
77	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2InputStream(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
78	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2InputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
79	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2InputStream(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	167	None	replace
80	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2InputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
81	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(in,  signature);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	49	None	replace
82	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  LZMA);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  LZMA);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  LZMA);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	49	None	replace
83	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(signature,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(signature,  DEFLATE);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
84	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE,  signature);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
85	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
86	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE,  decompressUntilEOF);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
87	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE,  0);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
88	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(deFLATE,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(deFLATE,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(deFLATE,  signature);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
89	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  signature);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
90	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[1];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[1];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
91	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[2];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[2];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
92	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  byte[]  signature  =  new  byte[2];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  byte[]  signature  =  new  byte[2];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
93	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  final  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  final  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  final  byte[]  signature  =  new  byte[12];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
94	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    6);    in.mark(signature.length  -  6);	  	compilable	  [FE]  CompressorException  	88	2	add
95	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    in.mark(signature.length  -  6);	  	compilable	  [FE]  CompressorException  	88	2	add
96	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in.mark(signature.length  -  6);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in.mark(signature.length  -  6);	  	non-compiled	[CE]  ';'  expected	88	None	add
97	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  byte[]  signature  =  in.mark(signature.length  -  6);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  byte[]  signature  =  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    byte[]  signature  =  in.mark(signature.length  -  6);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
98	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    in.mark(signature.length  -  6);  return  new  CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	88	None	add
99	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  in.mark(signature.length  -  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  in.mark(signature.length  -  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
100	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  }  else  {  in.mark(signature.length  -  6);  [CE]  illegal  start  of  type  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  in.mark(signature.length  -  6);  }  else  {  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    in.mark(signature.length  -  6);  }  else  {  in.mark(signature.length  -  6);	  	non-compiled	[CE]  illegal  start  of  type	88	None	add
101	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  6);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  6);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
102	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
103	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
104	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  11);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  11);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
105	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  11);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  11);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  11);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
106	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  6);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  6);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
107	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  6);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  6);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  6);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
108	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(Signature.length  +  12);  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(Signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(Signature.length  +  12);	  	non-compiled	[CE]  cannot  find  symbol  Signature	35	None	add
109	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  13);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  13);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
110	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  13);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  13);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  13);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
111	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  16);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  16);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
112	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  16);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  16);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  16);  in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
113	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(Signature.length  +  12);  in.mark(signature.length  +  12);  [CE]  cannot  find  symbol  Signature  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(Signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(Signature.length  +  12);  in.mark(signature.length  +  12);	  	non-compiled	[CE]  cannot  find  symbol  Signature	35	None	add
114	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
115	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
116	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
117	[BUG]  [BUGGY]  in.mark(signatureLength  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signatureLength  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signatureLength  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	76	None	replace
118	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
119	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	168	None	replace
120	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
121	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
122	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	168	None	replace
123	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signature.length  +  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)	168	None	replace
124	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  +  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	168	None	replace
125	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	168	None	replace
126	[BUG]  [BUGGY]  in.write(signature,  0);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0);	  in.write(signature);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
127	[BUG]  [BUGGY]  in.write(signature,  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  1);	  in.write(signature);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
128	[BUG]  [BUGGY]  in.write(signature,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  DEFLATE);	  in.write(signature);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
129	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])	159	None	replace
130	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	159	None	replace
131	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(!in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(!in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(!in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])	159	None	replace
132	[BUG]  [BUGGY]  InputStream  in.mark(signature.length  +  1);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in.mark(signature.length    +    1);    	non-compiled	[CE]  ';'  expected	108	None	replace
133	[BUG]  [BUGGY]  InputStream  in.mark(signature.length);  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.mark(signature.length);	  in.mark(signature.length    +    1);    InputStream    in.mark(signature.length    +    1);    	non-compiled	[CE]  ';'  expected	108	None	replace
134	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	52	None	replace
135	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	97	None	replace
136	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
137	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	97	None	replace
138	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	97	None	replace
139	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	97	None	replace
140	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	97	None	replace
141	[BUG]  [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  12));  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  12));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in.mark(signature.length  +  12));	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  'void'  type  not  allowed  here	135	None	replace
142	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  12));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  12));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length  +  12));	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
143	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  ')'  expected	135	None	replace
144	[BUG]  [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  12);  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  ')'  expected	135	None	replace
145	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  -  12);  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length  -  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  ')'  expected	135	None	replace
146	[BUG]  [BUGGY]  in  =  createInputStream(in.mark(signature.length  -  12);  [CE]  ')'  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in.mark(signature.length  -  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  ')'  expected	135	None	replace
147	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length));	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
148	[BUG]  [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	3	None	replace
149	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)	3	None	replace
150	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	3	None	replace
151	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	3	None	replace
152	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	3	None	replace
153	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  4);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  4);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	3	None	replace
154	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(in,  signature,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],int)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(in,  signature,  Integer.MAX_VALUE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(in,  signature,  Integer.MAX_VALUE);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],int)	3	None	replace
155	[BUG]  [BUGGY]  in.setLength(signature.length  -  11);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  11);	  in.setLength(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
156	[BUG]  [BUGGY]  in.setLength(signature.length  -  6);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  6);	  in.setLength(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
157	[BUG]  [BUGGY]  in.setLength(Signature.length  -  12);  [CE]  cannot  find  symbol  Signature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(Signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(Signature.length  -  12);	  in.setLength(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  Signature	28	None	replace
158	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	128	None	replace
159	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
160	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  6);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  6);	  byte[]    signature    =    in.mark(signature.length,    4);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	59	None	replace
161	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  8);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  8);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  8);	  byte[]    signature    =    in.mark(signature.length,    4);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	59	None	replace
162	[BUG]  [BUGGY]  in.copy(signature,  0,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  0,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  0,  signature.length  -  1);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
163	[BUG]  [BUGGY]  copy(signature,  0,  signature.length);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  copy(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	copy(signature,  0,  signature.length);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
164	[BUG]  [BUGGY]  in.copy(signature,  0,  signature.length,  IOUtils.markSupported());  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  0,  signature.length,  IOUtils.markSupported());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  0,  signature.length,  IOUtils.markSupported());	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
165	[BUG]  [BUGGY]  scan(signature,  0,  signature.length);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  scan(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	scan(signature,  0,  signature.length);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
166	[BUG]  [BUGGY]  in.copy(signature,  0,  signature.length  -  2);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  0,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  0,  signature.length  -  2);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
167	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  12);	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	98	None	replace
168	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP);	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  cannot  find  symbol  BZIP	98	None	replace
169	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	14	None	replace
170	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  final  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  <identifier>  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  final  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  final  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
171	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  in);	          final    int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream)	2	None	replace
172	[BUG]  [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature);  [CE]  no  suitable  method  found  for  readFully(byte[])  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte  signatureLength  =  IOUtils.readFully(signature);	          final    int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[])	2	None	replace
173	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  in.read());  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  in.read());	          final    int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	2	None	replace
174	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    11);    in.mark(signature.length  +  11);	  	compilable	  [FE]  CompressorException  	29	2	add
175	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    in.mark(signature.length  +  11);	  	compilable	  [FE]  CompressorException  	29	2	add
176	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	29	None	add
177	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	29	None	add
178	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	29	None	add
179	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	29	None	add
180	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)	127	None	replace
181	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
182	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	127	None	replace
183	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
184	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
185	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.markSupported();    in.markSupported();	  	compilable	  [FE]  CompressorException  	79	2	add
186	[BUG]  [BUGGY]  in.markSupported();  in.markSupported();  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    in.markSupported();	  	compilable	  [FE]  CompressorException  	79	2	add
187	[BUG]  [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    byte[]  signature  =  new  byte[12];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
188	[BUG]  [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[12];  in.markSupported();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[12];  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    byte[]  signature  =  new  byte[12];  in.markSupported();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
189	[BUG]  [BUGGY]  in.markSupported();  byte[]  signature  =  in.markSupported();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  byte[]  signature  =  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    byte[]  signature  =  in.markSupported();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
190	[BUG]  [BUGGY]  in.markSupported();  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
191	[BUG]  [BUGGY]  in.markSupported();  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
192	[BUG]  [BUGGY]  in.markSupported();  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    InputStream  in  =  new  InputStreamInputStream(in.getBytes());	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
193	[BUG]  [BUGGY]  in.markSupported();  InputStream  in  =  createInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  InputStream  in  =  createInputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    InputStream  in  =  createInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
194	[BUG]  [BUGGY]  in.copy(signature,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  signature.length  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
195	[BUG]  [BUGGY]  copy(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  copy(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	copy(signature.length  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
196	[BUG]  [BUGGY]  in.copy(signature,  signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  signatureLength  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  signatureLength  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	22	None	replace
197	[BUG]  [BUGGY]  in.copy(signature.length  -  1,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  -  1,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  1,  signatureLength);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	22	None	replace
198	[BUG]  [BUGGY]  in.copy(signature.length,  signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length,  signatureLength  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length,  signatureLength  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	22	None	replace
199	[BUG]  [BUGGY]  in.copy(signature.length  -  1,  signature.length);  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  -  1,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  1,  signature.length);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
200	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
201	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamInputStream(in.read());	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
202	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes());	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
203	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE);	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
204	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion());	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
205	[BUG]  [BUGGY]  InputStream  in.setLength(signature.length);  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.setLength(signature.length);	  in.setLength(Signature.length);    	non-compiled	[CE]  ';'  expected	143	None	replace
206	[BUG]  [BUGGY]  in.setLength(Signature.length  -  1);  [CE]  cannot  find  symbol  Signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(Signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(Signature.length  -  1);	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol  Signature	143	None	replace
207	[BUG]  [BUGGY]  in.setLength(decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(decompressConcatenated);	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
208	[BUG]  [BUGGY]  in.setLength(0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(0);	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
209	[BUG]  [BUGGY]  in  =  this.in.mark(signature.length  +  1);  [CE]  cannot  find  symbol  in  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  this.in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  this.in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    this.in.mark(signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  in	109	None	replace
210	[BUG]  [BUGGY]  InputStream  in  =  this.in.mark(signature.length  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    this.in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	109	None	replace
211	[BUG]  [BUGGY]  InputStream  in  =  this.in.mark(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.mark(signature.length);	  in.mark(signature.length    +    1);    InputStream    in    =    this.in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	109	None	replace
212	[BUG]  [BUGGY]  in  =  this.in.mark(signature.length);  [CE]  cannot  find  symbol  in  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  this.in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  this.in.mark(signature.length);	  in.mark(signature.length    +    1);    InputStream    in    =    this.in.mark(signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol  in	109	None	replace
213	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	15	None	replace
214	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
215	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	15	None	replace
216	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signatureLength  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
217	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
218	[BUG]  [BUGGY]  in.write(signatureLength  -  2);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  2);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
219	[BUG]  [BUGGY]  in.write(signatureLength  +  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  +  1);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
220	[BUG]  [BUGGY]  in.write(signatureLength  -  3);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  3);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
221	[BUG]  [BUGGY]  in.write(signatureLength  -  4);  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  4);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
222	[BUG]  [BUGGY]  in.write(signatureLength  *  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  *  12);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
223	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[11];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[11];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[11];	  byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
224	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	39	None	replace
225	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	39	None	replace
226	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	39	None	replace
227	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZ  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZ  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZ	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	39	None	replace
228	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[7];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[7];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[7];	  byte[]    signature    =    new    byte[4];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
229	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	130	None	replace
230	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	130	None	replace
231	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	130	None	replace
232	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[])  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[])	130	None	replace
233	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	164	None	replace
234	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	164	None	replace
235	[BUG]  [BUGGY]  in.mark(signature.length,  signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length,  signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length,  signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	164	None	replace
236	[BUG]  [BUGGY]  InputStream  in  =  in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.read();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.read();	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
237	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readInt();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readInt();	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
238	[BUG]  [BUGGY]  InputStream  in  =  this.in.read(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.read(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.read(signature);	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
239	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readInputStream();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readInputStream();	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
240	[BUG]  [BUGGY]  InputStream  in  =  in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.readIn();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.readIn();	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
241	[BUG]  [BUGGY]  InputStream  in.mark(signature.length  +  12);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in.mark(signature.length    +    12);    	non-compiled	[CE]  ';'  expected	132	None	replace
242	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
243	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
244	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	37	None	replace
245	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(in.markSupported())  {  in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
246	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  }  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
247	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(in.markSupported())  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
248	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  }  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
249	[BUG]  [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	131	None	replace
250	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	131	None	replace
251	[BUG]  [BUGGY]  in.write(signature.length,  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  12);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
252	[BUG]  [BUGGY]  in.write(signature.length,  4);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  4);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
253	[BUG]  [BUGGY]  in.write(signature,  12);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  12);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
254	[BUG]  [BUGGY]  in.write(signature.length,  16);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  16);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
255	[BUG]  [BUGGY]  in.write(signature.length,  6);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  6);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
256	[BUG]  [BUGGY]  in.write(signature.length,  10);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  10);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
257	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
258	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
259	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
260	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
261	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  10);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  10);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
262	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  10);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  10);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  10);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
263	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
264	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
265	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
266	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
267	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
268	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
269	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
270	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  *  2);	  in.mark(signature.length    *    12);    	compilable	  [FE]  CompressorException  	125	2	replace
271	[BUG]  [BUGGY]  in.mark(signature.length  *  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  *  2);	  in.mark(signature.length    *    12);    	compilable	  [FE]  CompressorException  	125	2	replace
272	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  *  4);	  in.mark(signature.length    *    12);    	compilable	  [FE]  CompressorException  	125	2	replace
273	[BUG]  [BUGGY]  in.mark(signature.length  *  4);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  *  4);	  in.mark(signature.length    *    12);    	compilable	  [FE]  CompressorException  	125	2	replace
274	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  *  10);	  in.mark(signature.length    *    12);    	compilable	  [FE]  CompressorException  	125	2	replace
275	[BUG]  [BUGGY]  in.mark(signature.length  *  10);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  *  10);	  in.mark(signature.length    *    12);    	compilable	  [FE]  CompressorException  	125	2	replace
276	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);	  	compilable	  [FE]  CompressorException  	33	2	add
277	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);	  	compilable	  [FE]  CompressorException  	33	2	add
278	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	33	None	add
279	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	33	None	add
280	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	33	None	add
281	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	33	None	add
282	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    in.mark(signature.length  +  6);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	33	None	add
283	[BUG]  [BUGGY]  in.copy(signature.length  -  1,  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  -  1,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  1,  12);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
284	[BUG]  [BUGGY]  in.write(signature.length  -  1,  10);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  10);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
285	[BUG]  [BUGGY]  in.write(signature.length  -  1,  16);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  16);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
286	[BUG]  [BUGGY]  in.write(signature.length  -  1,  12L);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  12L);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  12L);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
287	[BUG]  [BUGGY]  in.write(signatureLength  -  1,  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  1,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  1,  12);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	113	None	replace
288	[BUG]  [BUGGY]  in  =  createInputStream(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    createInputStream(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	173	None	replace
289	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    createInputStream(signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
290	[BUG]  [BUGGY]  in  =  createInputStream(in,  signature.length  +  12);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
291	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
292	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
293	[BUG]  [BUGGY]  in  =  createInputStream(in,  signature.length);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
294	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature,  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature,  1);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
295	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature,  0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature,  0);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
296	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature,  DEFLATE);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
297	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature,  IOUtils.readFully(signature));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature,  IOUtils.readFully(signature));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature,  IOUtils.readFully(signature));	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
298	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature.length);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
299	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(in,  signature);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
300	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature,  IOUtils.readFully(in));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature,  IOUtils.readFully(in));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature,  IOUtils.readFully(in));	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
301	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	170	None	replace
302	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	170	None	replace
303	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  2);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
304	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  12);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
305	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  3);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  3);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
306	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  4);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
307	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(in.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(in.length  -  1);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
308	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);	  	compilable	  [FE]  CompressorException  	154	2	add
309	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);	  	compilable	  [FE]  CompressorException  	154	2	add
310	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
311	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
312	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
313	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  type  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
314	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  type  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
315	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  illegal  start  of  type  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
316	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  type  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    in.mark(signature.length  -  10);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  illegal  start  of  type	154	None	add
317	[BUG]  [BUGGY]  final  int  signatureLength  =  in.read();  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  in.read();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  in.read();	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
318	[BUG]  [BUGGY]  final  int  signatureLength  =  in.read(signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  in.read(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  in.read(signature);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
319	[BUG]  [BUGGY]  in.setLength(signature.length  -  4);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  4);	  in.setLength(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
320	[BUG]  [BUGGY]  in.setLength(signature.length  -  3);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  3);	  in.setLength(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
321	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)/  1;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)/  1;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)/  1;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
322	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  2;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  2;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)+  2;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
323	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  12;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  12;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)+  12;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
324	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  4;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  4;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)+  4;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
325	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  3;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  3;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)+  3;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
326	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)-  1;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)-  1;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)-  1;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
327	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
328	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	174	None	replace
329	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
330	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
331	[BUG]  [BUGGY]  n.mark(signature.length  -  2);  [CE]  cannot  find  symbol  n  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  n.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	n.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol  n	72	None	replace
332	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  2);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
333	[BUG]  [BUGGY]  in.mark(signature.length  /  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  2);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
334	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  10);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
335	[BUG]  [BUGGY]  in.mark(signature.length  /  10);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  10);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
336	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  4);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
337	[BUG]  [BUGGY]  in.mark(signature.length  /  4);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  4);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
338	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  3);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
339	[BUG]  [BUGGY]  in.mark(signature.length  /  3);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  3);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
340	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
341	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
342	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
343	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)	123	None	replace
344	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
345	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)	123	None	replace
346	[BUG]  [BUGGY]  in.write(signatureLength  +  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  +  12);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	118	None	replace
347	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  16);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  16);	  byte[]    signature    =    in.mark(signature.length,    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
348	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);	  	compilable	  [FE]  CompressorException  	31	2	add
349	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);	  	compilable	  [FE]  CompressorException  	31	2	add
350	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	31	None	add
351	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	31	None	add
352	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	31	None	add
353	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	31	None	add
354	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	31	None	add
355	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	31	None	add
356	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    in.mark(signature.length  +  2);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	31	None	add
357	[BUG]  [BUGGY]  InputStream  in.mark(signature.length  -  12);  [CE]  ';'  expected  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in.mark(signature.length    -    12);    	non-compiled	[CE]  ';'  expected	101	None	replace
358	[BUG]  [BUGGY]  final  InputStream  in.mark(signature.length  -  12);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  InputStream  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  InputStream  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in.mark(signature.length    -    12);    	non-compiled	[CE]  ';'  expected	101	None	replace
359	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  2);	  byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	57	None	replace
360	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  11);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  11);	  byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	57	None	replace
361	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  3);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  3);	  byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	57	None	replace
362	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  4);	  byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	57	None	replace
363	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  *  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  *  12);	  byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	57	None	replace
364	[BUG]  [BUGGY]  in.write(signatureLength  -  1,  signature.length);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  1,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  1,  signature.length);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	21	None	replace
365	[BUG]  [BUGGY]  in.write(signature.length  -  1,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  decompressConcatenated);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
366	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signature.length  +  1);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
367	[BUG]  [BUGGY]  in.write(signature.length  -  1,  sign.length);  [CE]  cannot  find  symbol  sign  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  sign.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  sign.length);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  sign	21	None	replace
368	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signature.length,  1);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  signature.length,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signature.length,  1);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
369	[BUG]  [BUGGY]  InputStream  in.mark(signature.length  -  2);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in.mark(signature.length    -    2);    	non-compiled	[CE]  ';'  expected	73	None	replace
370	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
371	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
372	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(Signature.length  -  12);  [CE]  cannot  find  symbol  Signature  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(Signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(Signature.length  -  12);	  	non-compiled	[CE]  cannot  find  symbol  Signature	46	None	add
373	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    InputStream  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);	  	non-compiled	[CE]  ';'  expected	46	None	add
374	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(Signature.length  -  12);  in.mark(signature.length  -  12);  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(Signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(Signature.length  -  12);  in.mark(signature.length  -  12);	  	non-compiled	[CE]  cannot  find  symbol  Signature	46	None	add
375	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  zwölf);  in.mark(signature.length  -  12);  [CE]  illegal  character:  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  zwölf);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  zwölf);  in.mark(signature.length  -  12);	  	non-compiled	[CE]  illegal  character:  	46	None	add
376	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  6);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  6);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
377	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  6);  in.mark(signature.length  -  12);  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  6);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  6);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
378	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(signature.length  -  12;  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  in.mark(signature.length  -  12;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12;	  	non-compiled	[CE]  ')'  expected	46	None	add
379	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);	  	compilable	  [FE]  CompressorException  	148	2	add
380	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);	  	compilable	  [FE]  CompressorException  	148	2	add
381	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	148	None	add
382	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	148	None	add
383	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	148	None	add
384	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	148	None	add
385	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	148	None	add
386	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(IOUtils.readFully(in,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  incompatible  types  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(IOUtils.readFully(in,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(IOUtils.readFully(in,  signature))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  incompatible  types	148	None	add
387	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    in.mark(signature.length  +  13);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	148	None	add
388	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
389	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  4);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  4);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
390	[BUG]  [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte  signatureLength  =  IOUtils.readFully(signature,  0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte  signatureLength  =  IOUtils.readFully(signature,  0);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
391	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0L);  [CE]  no  suitable  method  found  for  readFully(byte[],long)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0L);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  0L);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],long)	4	None	replace
392	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readIn(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readIn(signature);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
393	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.getInputStream();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.getInputStream();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
394	[BUG]  [BUGGY]  InputStream  in  =  _in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  _in.readIn();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  _in.readIn();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
395	[BUG]  [BUGGY]  InputStream  in  =  this.in.markSupported();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.markSupported();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
396	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn(),  in);  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readIn(),  in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readIn(),  in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  ';'  expected	146	None	replace
397	[BUG]  [BUGGY]  in.write(signature.length  +  11);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  11);	  in.write(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
398	[BUG]  [BUGGY]  in.write(signature.length  /  12);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  /  12);	  in.write(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
399	[BUG]  [BUGGY]  in.copy(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  +  12);	  in.write(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
400	[BUG]  [BUGGY]  in.write(signature,  in.length  +  12);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  in.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  in.length  +  12);	  in.write(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  length	86	None	replace
401	[BUG]  [BUGGY]  in.write(signature,  0,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  decompressConcatenated);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
402	[BUG]  [BUGGY]  in.write(signature,  0,  signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  signatureLength  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signatureLength  -  1);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	115	None	replace
403	[BUG]  [BUGGY]  in.write(signature,  0,  byteLength);  [CE]  cannot  find  symbol  byteLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  byteLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  byteLength);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  byteLength	115	None	replace
404	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  2);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  2);	          final    int    signatureLength    =    IOUtils.readFully(signature,    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	7	None	replace
405	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  0,  1);	          final    int    signatureLength    =    IOUtils.readFully(signature,    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	7	None	replace
406	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
407	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
408	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
409	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
410	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
411	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);	  	compilable	  [FE]  CompressorException  	90	2	add
412	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);	  	compilable	  [FE]  CompressorException  	90	2	add
413	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
414	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
415	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  illegal  start  of  type  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
416	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  type  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
417	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  illegal  start  of  type  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
418	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  type  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
419	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  illegal  start  of  type  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    in.mark(signature.length  -  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
420	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setLength(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  in.setLength(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  in.setLength(signature.length  -  1);	  in.setLength(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
421	[BUG]  [BUGGY]  in.setLength(signature.length  -  1,  in.length);  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  1,  in.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  1,  in.length);	  in.setLength(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	24	None	replace
422	[BUG]  [BUGGY]  in.setLength(signnature.length  -  1);  [CE]  cannot  find  symbol  signnature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signnature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signnature.length  -  1);	  in.setLength(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signnature	24	None	replace
423	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  decompressUntilEOF);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
424	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature,  decompressConcatenated);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
425	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(decompressConcatenated,  signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(decompressConcatenated,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(decompressConcatenated,  signature.length);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
426	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	178	None	replace
427	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	178	None	replace
428	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  12);  [CE]  <identifier>  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    12);    	non-compiled	[CE]  <identifier>  expected	178	None	replace
429	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  final  byte[]  signature  =  new  byte[12];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	178	None	replace
430	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[10];  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[10];  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[10];  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	178	None	replace
431	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	94	None	replace
432	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	94	None	replace
433	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  0))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	94	None	replace
434	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    -    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	121	None	replace
435	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	121	None	replace
436	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.setLength(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(signature.length  -  1);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
437	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(signature.length  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.setLength(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(signature.length  +  12);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
438	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.setLength(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(signature.length  -  12);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
439	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.setLength(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(signature.length  -  2);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
440	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(0);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.setLength(0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(0);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
441	[BUG]  [BUGGY]  Integer  signature  =  in.setLength(signature.length,  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.setLength(signature.length,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.setLength(signature.length,  12);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
442	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    3);    in.mark(signature.length  -  3);	  	compilable	  [FE]  CompressorException  	42	2	add
443	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    in.mark(signature.length  -  3);	  	compilable	  [FE]  CompressorException  	42	2	add
444	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in.mark(signature.length  -  3);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    InputStream  in.mark(signature.length  -  3);	  	non-compiled	[CE]  ';'  expected	42	None	add
445	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	42	None	add
446	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  byte[]  signature  =  in.mark(signature.length  -  3);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  byte[]  signature  =  in.mark(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    byte[]  signature  =  in.mark(signature.length  -  3);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	add
447	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	42	None	add
448	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    in.mark(signature.length  -  3);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	42	None	add
449	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  in.mark(signature.length  -  3);  return  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    in.mark(signature.length  -  3);  return  new  CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	42	None	add
450	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	163	None	replace
451	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	163	None	replace
452	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	163	None	replace
453	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	163	None	replace
454	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	163	None	replace
455	[BUG]  [BUGGY]  in.write(signature.length  +  2);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  2);	  in.write(signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
456	[BUG]  [BUGGY]  in.write(signature.length  +  4);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  +  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  4);	  in.write(signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
457	[BUG]  [BUGGY]  in.write(signature.length  +  3);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  3);	  in.write(signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
458	[BUG]  [BUGGY]  in.write(signature.length  +  6);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  6);	  in.write(signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
459	[BUG]  [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  1));  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  1));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in.mark(signature.length  +  1));	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in.mark(signature.length    +    1);    	non-compiled	[CE]  'void'  type  not  allowed  here	111	None	replace
460	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  1));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  1));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length  +  1));	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	111	None	replace
461	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  1);  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in.mark(signature.length    +    1);    	non-compiled	[CE]  ')'  expected	111	None	replace
462	[BUG]  [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  1);  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in.mark(signature.length    +    1);    	non-compiled	[CE]  ')'  expected	111	None	replace
463	[BUG]  [BUGGY]  in  =  createInputStream(in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in.mark(signature.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in.mark(signature.length));	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in.mark(signature.length    +    1);    	non-compiled	[CE]  'void'  type  not  allowed  here	111	None	replace
464	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
465	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
466	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  throw  new  Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  throw  new  Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  throw  new  Compress	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  '('  or  '['  expected	16	None	replace
467	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  throw  new  Compress  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  throw  new  Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  throw  new  Compress	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  '('  or  '['  expected	16	None	replace
468	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  10);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  10);	  byte[]    signature    =    in.mark(signature.length,    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	58	None	replace
469	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signature.length  +  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signature.length  +  12);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
470	[BUG]  [BUGGY]  in.copy(signature.length  -  1  +  12);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  -  1  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  1  +  12);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
471	[BUG]  [BUGGY]  in.write(signature.length  *  12  +  12);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  *  12  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  *  12  +  12);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
472	[BUG]  [BUGGY]  in.setLength(signature.length  +  11);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  +  11);	  in.setLength(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
473	[BUG]  [BUGGY]  in.setLength(signature.length  /  12);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  /  12);	  in.setLength(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
474	[BUG]  [BUGGY]  in.setLength(Signature.length  +  12);  [CE]  cannot  find  symbol  Signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(Signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(Signature.length  +  12);	  in.setLength(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  Signature	26	None	replace
475	[BUG]  [BUGGY]  in.setLength(signature.length  *  12);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  *  12);	  in.setLength(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
476	[BUG]  [BUGGY]  in.setLength(signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  +  1);	  in.setLength(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
477	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( ".UTF-8 ");  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes( ".UTF-8 ");  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( ".UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
478	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( ",UTF-8 ");  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes( ",UTF-8 ");  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( ",UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
479	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes();	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
480	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ", "UTF-8 ");  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ", "UTF-8 ");  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ", "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
481	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "US-ASCII ");  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes( "US-ASCII ");  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( "US-ASCII ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
482	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes( "UTF-8 ");  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes( "UTF-8 ");  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
483	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[4];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[4];	          final    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
484	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[2];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[2];	          final    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
485	[BUG]  [BUGGY]  InputStream  in  =  new  byte[12];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  byte[12];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
486	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[1];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[1];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  byte[1];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
487	[BUG]  [BUGGY]  in  =  new  byte[12];  [CE]  incompatible  types  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  byte[12];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  incompatible  types	105	None	replace
488	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[2];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[2];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  byte[2];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
489	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[0];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[0];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  byte[0];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
490	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	96	None	replace
491	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
492	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	96	None	replace
493	[BUG]  [BUGGY]  in  =  createInputStream(in,  signature.length  -  12);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
494	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	replace
495	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(in,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(in,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(in,  signature.length  -  1);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	replace
496	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	153	None	replace
497	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	153	None	replace
498	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  2);  [CE]  <identifier>  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    2);    	non-compiled	[CE]  <identifier>  expected	153	None	replace
499	[BUG]  [BUGGY]  in.write(signatureLength  -  1,  signature);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  1,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  1,  signature);	  in.write(signature.length    -    1,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	20	None	replace
500	[BUG]  [BUGGY]  in.write(signature.length  -  1,  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  1);	  in.write(signature.length    -    1,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
501	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	120	None	replace
502	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	120	None	replace
503	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],int)	120	None	replace
504	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	120	None	replace
505	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	120	None	replace
506	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	120	None	replace
507	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    signature.length    +    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	110	None	replace
508	[BUG]  [BUGGY]  in  =  createInputStream(in,  signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in,  signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in,  signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
509	[BUG]  [BUGGY]  in  =  createInputStream(signature,  signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(signature,  signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(signature,  signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    signature.length    +    1);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
510	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2InputStream(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
511	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2InputStream(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	152	None	replace
512	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  final  byte[]  signature  =  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  final  byte[]  signature  =  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  final  byte[]  signature  =  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	75	None	replace
513	[BUG]  [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	75	None	replace
514	[BUG]  [BUGGY]  in.write(signature.length,  2);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  2);	  in.write(signature.length,    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
515	[BUG]  [BUGGY]  in.write(signature.length,  3);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  3);	  in.write(signature.length,    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
516	[BUG]  [BUGGY]  in.write(signature.length,  0);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length,  0);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length,  0);	  in.write(signature.length,    1);    	non-compiled	[CE]  cannot  find  symbol	87	None	replace
517	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	92	2	add
518	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	92	2	add
519	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  in.mark(Signature.length  +  1);  [CE]  cannot  find  symbol  Signature  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  in.mark(Signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(Signature.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Signature	92	None	add
520	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  InputStream  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  InputStream  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    InputStream  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);	  	non-compiled	[CE]  ';'  expected	92	None	add
521	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(Signature.length  +  1);  in.mark(signature.length  +  1);  [CE]  cannot  find  symbol  Signature  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(Signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(Signature.length  +  1);  in.mark(signature.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol  Signature	92	None	add
522	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1));  in.mark(signature.length  +  1);  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1));  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1));  in.mark(signature.length  +  1);	  	non-compiled	[CE]  ';'  expected	92	None	add
523	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	92	2	add
524	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	92	2	add
525	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  in);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(),  in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(),  in);	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  ';'  expected	138	None	replace
526	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.getInputStream();	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
527	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getOutputStream();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getOutputStream();	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
528	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(in.getVersion());	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
529	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(in.getCharset());	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
530	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStream(in,  decompressConcatenated);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	53	None	replace
531	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(in.markSupported());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(in.markSupported());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(in.markSupported());	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
532	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signature,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(signature,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(signature,  1);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
533	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signature,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(signature,  decompressConcatenated);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
534	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signature,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(signature,  DEFLATE);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
535	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(false);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(false);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(false);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
536	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);	  	compilable	  [FE]  CompressorException  	44	2	add
537	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);	  	compilable	  [FE]  CompressorException  	44	2	add
538	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in.mark(signature.length  -  4);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in.mark(signature.length  -  4);	  	non-compiled	[CE]  ';'  expected	44	None	add
539	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  byte[]  signature  =  in.mark(signature.length  -  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  byte[]  signature  =  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    byte[]  signature  =  in.mark(signature.length  -  4);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
540	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	44	None	add
541	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	44	None	add
542	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	44	None	add
543	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	44	None	add
544	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[16];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[16];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
545	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  byte[]  signature  =  new  byte[1];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  byte[]  signature  =  new  byte[1];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  byte[]  signature  =  new  byte[1];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
546	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  final  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  final  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  final  byte[]  signature  =  new  byte[12];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
547	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[10];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[10];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[10];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
548	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( " ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	158	None	replace
549	[BUG]  [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "   ");  }  [CE]  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	while(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "   ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  	158	None	replace
550	[BUG]  [BUGGY]  final  byte[]  signature  =  in.markSupported();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.markSupported();	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	158	None	replace
551	[BUG]  [BUGGY]  in.write(signature.length  -  4);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  4);	  in.write(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
552	[BUG]  [BUGGY]  in.write(signature.length  -  3);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  3);	  in.write(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
553	[BUG]  [BUGGY]  in.write(signature.length  -  6);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  6);	  in.write(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
554	[BUG]  [BUGGY]  in.write(signature.length  -  2,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  2,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  2,  signatureLength);	  in.write(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	18	None	replace
555	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);	  	compilable	  [FE]  CompressorException  	67	2	add
556	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);	  	compilable	  [FE]  CompressorException  	67	2	add
557	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	67	None	add
558	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	67	None	add
559	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	67	None	add
560	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	67	None	add
561	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	67	None	add
562	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	67	None	add
563	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    in.mark(signature.length  +  3);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	67	None	add
564	[BUG]  [BUGGY]  in.setLength(signature,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  in.length  -  1);	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	172	None	replace
565	[BUG]  [BUGGY]  in.setLength(signature,  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  Integer.MAX_VALUE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  Integer.MAX_VALUE);	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
566	[BUG]  [BUGGY]  in.setLength(signature,  Integer.toHexString(in.length));  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  Integer.toHexString(in.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  Integer.toHexString(in.length));	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	172	None	replace
567	[BUG]  [BUGGY]  in.setLength(signature,  in.length  +  12);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  in.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  in.length  +  12);	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	172	None	replace
568	[BUG]  [BUGGY]  in.setLength(signature,  in.length  -  2);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  in.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  in.length  -  2);	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	172	None	replace
569	[BUG]  [BUGGY]  in.setLength(signature,  Integer.toString(in.length));  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  Integer.toString(in.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  Integer.toString(in.length));	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	172	None	replace
570	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  final  parameter  in  may  not  be  assigned  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	169	None	replace
571	[BUG]  [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	102	None	replace
572	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  final  byte[]  signature  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  final  byte[]  signature  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  final  byte[]  signature  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	102	None	replace
573	[BUG]  [BUGGY]  in.mark(signature.length,  signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length,  signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length,  signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	38	None	replace
574	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	38	None	replace
575	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  11);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	38	None	replace
576	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
577	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
578	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
579	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
580	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
581	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
582	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
583	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  1);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
584	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	161	None	replace
585	[BUG]  [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	161	None	replace
586	[BUG]  [BUGGY]  System.arraycopy(signature,  0,  signature,  0,  in.length);  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  System.arraycopy(signature,  0,  signature,  0,  in.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	System.arraycopy(signature,  0,  signature,  0,  in.length);	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	161	None	replace
587	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  Signature,  0,  in.length);  }  [CE]  cannot  find  symbol  Signature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  Signature,  0,  in.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  Signature,  0,  in.length);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  cannot  find  symbol  Signature	161	None	replace
588	[BUG]  [BUGGY]  final  byte[]  signature  =  in.readFully();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.readFully();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.readFully();	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
589	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(12);	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
590	[BUG]  [BUGGY]  final  byte[]  signature  =  in.readInt();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.readInt();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.readInt();	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
591	[BUG]  [BUGGY]  final  byte[]  signature  =  in.readUTF();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.readUTF();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.readUTF();	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
592	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(in.getCharacterEncoding());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(in.getCharacterEncoding());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(in.getCharacterEncoding());	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
593	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(BZIP2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(BZIP2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(BZIP2);	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
594	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);	  	compilable	  [FE]  CompressorException  	124	2	add
595	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);	  	compilable	  [FE]  CompressorException  	124	2	add
596	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  signatureLength  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	124	None	add
597	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature.length  *  12))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature.length  *  12))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature.length  *  12))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	124	None	add
598	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(IOUtils.readFully(signature.length  *  12))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  method  found  for  readFully(int)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(IOUtils.readFully(signature.length  *  12))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);  if(IOUtils.readFully(signature.length  *  12))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  method  found  for  readFully(int)	124	None	add
599	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  signatureLength	124	None	add
600	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    in.mark(signature.length  *  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	124	None	add
601	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature,  in.length);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature,  in.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature,  in.length);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	150	None	replace
602	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length,  12);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature.length,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length,  12);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	150	None	replace
603	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.read(signature,  in.length);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  IOUtils.read(signature,  in.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  IOUtils.read(signature,  in.length);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	150	None	replace
604	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature,  0,  signature.length);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature,  0,  signature.length);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	150	None	replace
605	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length,  4);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature.length,  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length,  4);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	150	None	replace
606	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length,  1);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature.length,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length,  1);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	150	None	replace
607	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	150	None	replace
608	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	17	None	replace
609	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	17	None	replace
610	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  1);  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[12];  final  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
611	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[16];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[16];  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[16];  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	17	None	replace
612	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
613	[BUG]  [BUGGY]  final  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	126	None	replace
614	[BUG]  [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  illegal  start  of  type  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
615	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	157	None	replace
616	[BUG]  [BUGGY]  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  illegal  start  of  type  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
617	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ".);  }  [CE]  <identifier>  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ".);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ".);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	157	None	replace
618	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  13);	  in.mark(signature.length    +    13);    	compilable	  [FE]  CompressorException  	149	2	replace
619	[BUG]  [BUGGY]  in.mark(signature.length  -  13);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  13);	  in.mark(signature.length    +    13);    	compilable	  [FE]  CompressorException  	149	2	replace
620	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
621	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signatureLength  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	13	None	replace
622	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  throw  new  Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  throw  new  Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  throw  new  Compress	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  '('  or  '['  expected	13	None	replace
623	[BUG]  [BUGGY]  InputStream  in.mark(signature.length  -  1);  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in.mark(signature.length    -    1);    	non-compiled	[CE]  ';'  expected	11	None	replace
624	[BUG]  [BUGGY]  byte[]  signature  =  in.flush();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.flush();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.flush();	  in.flush();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
625	[BUG]  [BUGGY]  InputStream  in.flush();  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in.flush();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in.flush();	  in.flush();    	non-compiled	[CE]  ';'  expected	81	None	replace
626	[BUG]  [BUGGY]  in.write(signature.length  -  11);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  11);	  in.write(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
627	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  decompressConcatenated);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	112	None	replace
628	[BUG]  [BUGGY]  in  =  createInputStream(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  createInputStream(in,  decompressConcatenated);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
629	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  signatureLength);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	112	None	replace
630	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(signature,  decompressConcatenated);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	112	None	replace
631	[BUG]  [BUGGY]  in  =  in.mark(signature.length  -  12);  [CE]  incompatible  types  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  incompatible  types	177	None	replace
632	[BUG]  [BUGGY]  InputStream  in  =  in.mark(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	177	None	replace
633	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
634	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
635	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  11);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length  -  11);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
636	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	106	None	replace
637	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  InputStream  in  =  createInputStream(in,  decompressConcatenated);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	106	None	replace
638	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  signatureLength);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	106	None	replace
639	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length,  signature.length  -  12);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
640	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	179	None	replace
641	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(in,  signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(in,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
642	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature,  signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
643	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	179	None	replace
644	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	replace
645	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	40	None	replace
646	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	40	None	replace
647	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  DEFLATE))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	replace
648	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  signatureLength	40	None	replace
649	[BUG]  [BUGGY]  in.write(signature,  0,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signature.length  -  1);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
650	[BUG]  [BUGGY]  in.write(signature,  0,  signature.length  -  2);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signature.length  -  2);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
651	[BUG]  [BUGGY]  in.write(signature,  0,  signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signature.length  +  1);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
652	[BUG]  [BUGGY]  in.write(signature,  0,  signature.length  -  4);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signature.length  -  4);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
653	[BUG]  [BUGGY]  Integer  signatureLength  =  signature.setLength(in.setLength);  [CE]  cannot  find  symbol  setLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  signature.setLength(in.setLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  signature.setLength(in.setLength);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  setLength	25	None	replace
654	[BUG]  [BUGGY]  Integer  signatureLength  =  sign.setLength(in.setLength);  [CE]  cannot  find  symbol  setLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  sign.setLength(in.setLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  sign.setLength(in.setLength);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  setLength	25	None	replace
655	[BUG]  [BUGGY]  Integer  signatureLength  =  this.in.setLength(signature.length);  [CE]  cannot  find  symbol  in  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  this.in.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  this.in.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  in	25	None	replace
656	[BUG]  [BUGGY]  Integer  signatureLength  =  SignatureUtils.setLength(signature.length);  [CE]  cannot  find  symbol  SignatureUtils  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  SignatureUtils.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  SignatureUtils.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  SignatureUtils	25	None	replace
657	[BUG]  [BUGGY]  Integer  signatureLength  =  file.setLength(signature.length);  [CE]  cannot  find  symbol  file  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  file.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  file.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  file	25	None	replace
658	[BUG]  [BUGGY]  Integer  signatureLength  =  in.read().setLength(signature.length);  [CE]  int  cannot  be  dereferenced  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  in.read().setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  in.read().setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  int  cannot  be  dereferenced	25	None	replace
659	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature.length,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature.length,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature.length,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
660	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
661	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
662	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
663	[BUG]  [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  type  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
664	[BUG]  [BUGGY]  in.close();  }  else  if(!in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  type  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.close();  }  else  if(!in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.close();  }  else  if(!in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
665	[BUG]  [BUGGY]  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  type  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
666	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.. ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.. ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.. ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	160	None	replace
667	[BUG]  [BUGGY]  in.reset();  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.reset();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.reset();	  in.markSupported();    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	80	None	replace
668	[BUG]  [BUGGY]  in.mark(signature);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature);	  in.markSupported();    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	80	None	replace
669	[BUG]  [BUGGY]  in.setSupported(signature.length);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setSupported(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setSupported(signature.length);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
670	[BUG]  [BUGGY]  in.setSupported(false);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setSupported(false);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setSupported(false);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
671	[BUG]  [BUGGY]  in.setSupported(true);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setSupported(true);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setSupported(true);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
672	[BUG]  [BUGGY]  String  signatureLength  =  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  incompatible  types  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  String  signatureLength  =  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	String  signatureLength  =  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  incompatible  types	12	None	replace
673	[BUG]  [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	replace
674	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  final  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  final  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  final  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	replace
675	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	replace
676	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressUntilEOF);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
677	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  1);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
678	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  4);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
679	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(this.compressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(this.compressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(this.compressConcatenated);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
680	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [CE]  'void'  type  not  allowed  here  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  'void'  type  not  allowed  here	119	None	replace
681	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
682	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  [CE]  ')'  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  ')'  expected	119	None	replace
683	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  ')'  expected	119	None	replace
684	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  1));  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  1));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  1));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  'void'  type  not  allowed  here	119	None	replace
685	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  1));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  1));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  1));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
686	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [CE]  ')'  expected  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressCon	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	162	None	replace
687	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [CE]  ')'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	162	None	replace
688	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE).copy(signature,  0,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE).copy(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE).copy(signature,  0,  signature.length);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	117	None	replace
689	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE.copy(signature,  0,  signature.length);  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE.copy(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE.copy(signature,  0,  signature.length);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  ')'  expected	117	None	replace
690	[BUG]  [BUGGY]  in  =  in.copy(signature,  0,  signature.length);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  in.copy(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  in.copy(signature,  0,  signature.length);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	117	None	replace
691	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature,  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature,  1);	  byte[]    signature    =    in.mark(signature.length,    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	55	None	replace
692	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(!in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(!in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  cannot  find  symbol  length	161	None	replace
693	[BUG]  [BUGGY]  if(in.markSupported())  {  out.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [CE]  cannot  find  symbol  out  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  out.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  out.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  cannot  find  symbol  out	161	None	replace
694	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  createInputStream(in,  signature.length  /  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  createInputStream(in,  signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in  =  createInputStream(in,  signature.length  /  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
695	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    byte[]  signature  =  new  byte[12];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
696	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in  =  createInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
697	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signatureLength  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	76	None	replace
698	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signatureLength  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	76	None	replace
699	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
700	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signatureLength,  signatureLength);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signatureLength,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signatureLength,  signatureLength);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
701	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
702	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
703	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
704	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
705	[BUG]  [BUGGY]  in.write(signatureLength  -  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  12);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
706	[BUG]  [BUGGY]  in.write(signatureLength  *  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  *  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  *  1);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	19	None	replace
707	[BUG]  [BUGGY]  in.write(signature.length  -  1,  file.length);  [CE]  cannot  find  symbol  file  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  file.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  file.length);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  file	21	None	replace
708	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  *  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  *  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  *  1);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
709	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
710	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
711	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
712	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
713	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
714	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
715	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
716	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  throw  new  CompressorException( " ");  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    	compilable	  [FE]  CompressorException  	47	2	replace
717	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  4);  InputStream  in  =  createInputStream(in,  decompressConcatenated);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	106	None	replace
718	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signature,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(signature,  decompressUntilEOF);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
719	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
720	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(markSupported());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(markSupported());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(markSupported());	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
721	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
722	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
723	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  out.mark(signature.length  -  12);  [CE]  cannot  find  symbol  out  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  out.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  out.mark(signature.length  -  12);	  	non-compiled	[CE]  cannot  find  symbol  out	46	None	add
724	[BUG]  [BUGGY]  in.write(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  decompressConcatenated);	  in.write(signature.length,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
725	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[6];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[6];  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[6];  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	17	None	replace
726	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[4];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[4];  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[4];  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	17	None	replace
727	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
728	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  [CE]  <identifier>  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
729	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
730	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
731	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
732	[BUG]  [BUGGY]  in.write(signatureLength  -  1  +  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  1  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  1  +  12);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	114	None	replace
733	[BUG]  [BUGGY]  in.write(Signature.length  -  1  +  12);  [CE]  cannot  find  symbol  Signature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(Signature.length  -  1  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(Signature.length  -  1  +  12);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol  Signature	114	None	replace
734	[BUG]  [BUGGY]  in.write(signature.length  -  1  +  11);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1  +  11);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
735	[BUG]  [BUGGY]  byte[]  signature  =  this.in.mark(signature.length  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  this.in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  this.in.mark(signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    this.in.mark(signature.length    +    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	109	None	replace
736	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
737	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
738	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
739	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  System.arraycopy(signature,  0,  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  System.arraycopy(signature,  0,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  System.arraycopy(signature,  0,	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
740	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
741	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
742	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(!in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
743	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
744	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
745	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
746	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip  [CE]  '('  or  '['  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(!in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
747	[BUG]  [BUGGY]  if(signature!=  null)  {  if(in.markSupported())  {  in.close();  }  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  if(in.markSupported())  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  if(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  illegal  start  of  expression	159	None	replace
748	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  signature);	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	159	None	replace
749	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	159	None	replace
750	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  6;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length)+  6;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length)+  6;	  byte[]    signature    =    in.mark(signature.length)+    1;    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
751	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(signature);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
752	[BUG]  [BUGGY]  final  byte[]  signature  =(byte[])in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =(byte[])in.read();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =(byte[])in.read();	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
753	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[8];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[8];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[8];	  byte[]    signature    =    new    byte[16];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	62	None	replace
754	[BUG]  [BUGGY]  in.write(signature.length  -  1,  4);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  4);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
755	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signature);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
756	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
757	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
758	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
759	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  throw  new  CompressorException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
760	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  in.reset();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  in.reset();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  in.reset();  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	93	None	replace
761	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  in.close();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  else  {  in.close();  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	93	None	replace
762	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	96	None	replace
763	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  [CE]  <identifier>  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  <identifier>  expected	96	None	replace
764	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
765	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZ  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZ  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZ	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	96	None	replace
766	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  +  16);	  in.mark(signature.length    +    13);    	compilable	  [FE]  CompressorException  	149	2	replace
767	[BUG]  [BUGGY]  in.mark(signature.length  +  16);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  16);	  in.mark(signature.length    +    13);    	compilable	  [FE]  CompressorException  	149	2	replace
768	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	163	None	replace
769	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(in);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
770	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(decompressConcatenated);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
771	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	97	None	replace
772	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	97	None	replace
773	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	97	None	replace
774	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  IOUtils.readIn(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  IOUtils.readIn(signature);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
775	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(signature,  this.in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  IOUtils.readIn(signature,  this.in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  IOUtils.readIn(signature,  this.in);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
776	[BUG]  [BUGGY]  InputStream  in  =  this.in.readFully();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readFully();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readFully();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
777	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readIn(this.in,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  IOUtils.readIn(this.in,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  IOUtils.readIn(this.in,  signature);	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
778	[BUG]  [BUGGY]  byte[]  signature  =  createInputStream(in,  signature.length  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  createInputStream(in,  signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  createInputStream(in,  signature.length  +  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    signature.length    +    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	110	None	replace
779	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  byte[]  signature  =  in.mark(signature.length  -  10);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  byte[]  signature  =  in.mark(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    byte[]  signature  =  in.mark(signature.length  -  10);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
780	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in.mark(signature.length  -  10);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in.mark(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in.mark(signature.length  -  10);	  	non-compiled	[CE]  ';'  expected	154	None	add
781	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  10);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  10);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
782	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2InputStream(signature.length  -  10);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2InputStream(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in  =  new  BZip2InputStream(signature.length  -  10);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
783	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  10);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  10);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
784	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
785	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
786	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[12];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  byte[12];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
787	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	9	2	add
788	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	9	2	add
789	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.set(signature.length  -  1);  in.mark(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.set(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.set(signature.length  -  1);  in.mark(signature.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
790	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  out.mark(signature.length  -  1);  [CE]  cannot  find  symbol  out  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  out.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  out.mark(signature.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol  out	9	None	add
791	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").replace('n',  'r');  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").replace('n',  'r');  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ").replace('n',  'r');	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
792	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").replace('0',  '0');  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").replace('0',  '0');  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ").replace('0',  '0');	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	145	None	replace
793	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  read(byte[],int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature,  Integer.MAX_VALUE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature,  Integer.MAX_VALUE);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],int)	150	None	replace
794	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  read(byte[],boolean)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature,  decompressConcatenated);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(byte[],boolean)	150	None	replace
795	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length,  16);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature.length,  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length,  16);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	150	None	replace
796	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length  -  1);  [CE]  no  suitable  method  found  for  read(int)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length  -  1);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int)	150	None	replace
797	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  8);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  /  8);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
798	[BUG]  [BUGGY]  in.mark(signature.length  /  8);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  8);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  /  8);	  in.mark(signature.length    /    12);    	compilable	  [FE]  CompressorException  	70	2	replace
799	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  byte[]  signature  =  in.mark(signature.length  +  11);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  byte[]  signature  =  in.mark(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    byte[]  signature  =  in.mark(signature.length  +  11);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
800	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
801	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in.mark(signature.length  +  11);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in.mark(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in.mark(signature.length  +  11);	  	non-compiled	[CE]  ';'  expected	29	None	add
802	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
803	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
804	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
805	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
806	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
807	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
808	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
809	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
810	[BUG]  [BUGGY]  Integer  signature  =  new  Integer(Integer.MAX_VALUE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  new  Integer(Integer.MAX_VALUE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  new  Integer(Integer.MAX_VALUE);	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	178	None	replace
811	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE).write(signature,  0,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE).write(signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE).write(signature,  0,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
812	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(InputStream.DEFLATE,  signature,  0,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamReader(InputStream.DEFLATE,  signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamReader(InputStream.DEFLATE,  signature,  0,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
813	[BUG]  [BUGGY]  in.copy(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  2);	  in.write(signature.length    -    2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
814	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
815	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  6);  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  6);	  	non-compiled	[CE]  ')'  expected	88	None	add
816	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
817	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
818	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
819	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature!=  null)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
820	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  }  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
821	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature  ==  null)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
822	[BUG]  [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length);  }  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
823	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
824	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length);  }  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
825	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
826	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length);  }  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	compilable	  [FE]  CompressorException  	41	2	replace
827	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  }  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  ')'  expected	135	None	replace
828	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  }  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in.mark(signature.length    +    12);    	non-compiled	[CE]  ')'  expected	135	None	replace
829	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  new  byte[12];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
830	[BUG]  [BUGGY]  (in.markSupported())  {  in.close();  }  [CE]  not  a  statement  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  (in.markSupported())  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  not  a  statement	156	None	replace
831	[BUG]  [BUGGY]  if(in.markSupported())  {  final  in.close();  }  [CE]  <identifier>  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  final  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  final  in.close();  }	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  <identifier>  expected	156	None	replace
832	[BUG]  [BUGGY]  if(in.markSupported())  {  out.close();  }  [CE]  cannot  find  symbol  out  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  out.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  out.close();  }	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  cannot  find  symbol  out	156	None	replace
833	[BUG]  [BUGGY]  in.setLength(signature.length  -  16);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  16);	  in.setLength(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
834	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
835	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
836	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
837	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  else  {	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
838	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  32);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  32);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
839	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  0,  12);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
840	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	replace
841	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	169	None	replace
842	[BUG]  [BUGGY]  in.write(signature,  0,  sign.length);  [CE]  cannot  find  symbol  sign  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  sign.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  sign.length);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  sign	84	None	replace
843	[BUG]  [BUGGY]  in.write(signatureLength,  0,  signature.length);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength,  0,  signature.length);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	84	None	replace
844	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  GZIP);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  GZIP);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  GZIP);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	8	None	replace
845	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(byte[],String,String)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  SNAPPY_RAW);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,String)	8	None	replace
846	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  GZIP2);  [CE]  cannot  find  symbol  GZIP2  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  GZIP2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  GZIP2);	          final    int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  GZIP2	8	None	replace
847	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.set(signature.length  +  1);  in.mark(signature.length  +  1);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.set(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.set(signature.length  +  1);  in.mark(signature.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol	92	None	add
848	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  byte.mark(signature.length  +  1);  [CE]  class  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  byte.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  byte.mark(signature.length  +  1);	  	non-compiled	[CE]  class  expected	92	None	add
849	[BUG]  [BUGGY]  InputStream  in  =  getInputStream().getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream().getInputStream();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream().getInputStream();	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
850	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	37	None	replace
851	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  byte[]  signature  =  in.mark(signature.length  +  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  byte[]  signature  =  in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    byte[]  signature  =  in.mark(signature.length  +  2);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
852	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in.mark(signature.length  +  2);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in.mark(signature.length  +  2);	  	non-compiled	[CE]  ';'  expected	31	None	add
853	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  +  2);  [CE]  ')'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  +  2);	  	non-compiled	[CE]  ')'  expected	31	None	add
854	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
855	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  2);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
856	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
857	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
858	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  byte[]  signature  =  in.mark(signature.length  +  6);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  byte[]  signature  =  in.mark(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    byte[]  signature  =  in.mark(signature.length  +  6);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
859	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
860	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
861	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
862	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in.mark(signature.length  +  6);  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in.mark(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in.mark(signature.length  +  6);	  	non-compiled	[CE]  ';'  expected	33	None	add
863	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
864	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2InputStream(signature.length  +  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2InputStream(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in  =  new  BZip2InputStream(signature.length  +  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
865	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(signature);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
866	[BUG]  [BUGGY]  Integer  signature  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	102	None	replace
867	[BUG]  [BUGGY]  in  =  in.copy(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  in.copy(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  in.copy(signature.length  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
868	[BUG]  [BUGGY]  in.copy(signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signatureLength  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signatureLength  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	22	None	replace
869	[BUG]  [BUGGY]  in.copy(signature,  12);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature,  12);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
870	[BUG]  [BUGGY]  scan(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  scan(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	scan(signature.length  -  1);	  in.copy(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
871	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  12);  InputStream  in  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  12);  InputStream  in  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  12);  InputStream  in  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	177	None	replace
872	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(deFLATE,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(deFLATE,  in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(deFLATE,  in);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
873	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(DEFLATE,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(DEFLATE,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(DEFLATE,  signature);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
874	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  BZIP2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in,  BZIP2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in,  BZIP2);	  InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	147	None	replace
875	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	71	2	add
876	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	71	2	add
877	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  out.mark(signature.length  -  2);  [CE]  cannot  find  symbol  out  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  out.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  out.mark(signature.length  -  2);	  	non-compiled	[CE]  cannot  find  symbol  out	71	None	add
878	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	71	2	add
879	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	71	2	add
880	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature,  in.length  -  12);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature,  in.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature,  in.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
881	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(in,  signature.length);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(in,  signature.length);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
882	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signatureLength  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signatureLength);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
883	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signatureLength  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signatureLength  -  1);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
884	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signatureLength  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
885	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signatureLength  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	15	None	replace
886	[BUG]  [BUGGY]  Integer  signatureLength  =  INVALID_SIZE.setLength(signature.length);  [CE]  cannot  find  symbol  INVALID_SIZE  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  INVALID_SIZE.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  INVALID_SIZE.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  INVALID_SIZE	25	None	replace
887	[BUG]  [BUGGY]  Integer  signatureLength  =  SIZE_LENGTH.setLength(signature.length);  [CE]  cannot  find  symbol  SIZE_LENGTH  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  SIZE_LENGTH.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  SIZE_LENGTH.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  SIZE_LENGTH	25	None	replace
888	[BUG]  [BUGGY]  Integer  signatureLength  =  signature.setLength(in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  signature.setLength(in.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  signature.setLength(in.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	25	None	replace
889	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  final  parameter  in  may  not  be  assigned  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	123	None	replace
890	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
891	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
892	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  12);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
893	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
894	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
895	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
896	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
897	[BUG]  [BUGGY]  in.write(signatureLength  -  1,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength  -  1,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength  -  1,  signatureLength);	  in.write(signature.length    -    1,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	20	None	replace
898	[BUG]  [BUGGY]  in.write(signature.length  -  1,  6);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  6);	  in.write(signature.length    -    1,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
899	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	95	None	replace
900	[BUG]  [BUGGY]  in.mark(signature,  0,  signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature,  0,  signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature,  0,  signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	95	None	replace
901	[BUG]  [BUGGY]  in.markSupported();  byte[]  in.markSupported();  [CE]  ';'  expected  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  byte[]  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    byte[]  in.markSupported();	  	non-compiled	[CE]  ';'  expected	79	None	add
902	[BUG]  [BUGGY]  in.markSupported();  InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  InputStream  in  =  getInputStream();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
903	[BUG]  [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[6];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    byte[]  signature  =  new  byte[6];	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
904	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	54	None	replace
905	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	54	None	replace
906	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature!=  null)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
907	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  12);  }  [FE]  CompressorException  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
908	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
909	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
910	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
911	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
912	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
913	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  [FE]  CompressorException  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  12);  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
914	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2InputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
915	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  byte[]  signature  =  in.mark(signature.length  +  13);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  byte[]  signature  =  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    byte[]  signature  =  in.mark(signature.length  +  13);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
916	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in.mark(signature.length  +  13);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in.mark(signature.length  +  13);	  	non-compiled	[CE]  ';'  expected	148	None	add
917	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  13);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  13);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
918	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
919	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
920	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
921	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  13);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  13);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
922	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	162	None	replace
923	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	162	None	replace
924	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip  [CE]  '('  or  '['  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	162	None	replace
925	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	162	None	replace
926	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	170	None	replace
927	[BUG]  [BUGGY]  Integer  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	replace
928	[BUG]  [BUGGY]  in.mark(0);  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(0);  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(0);  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	replace
929	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	53	None	replace
930	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	53	2	replace
931	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	53	2	replace
932	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.reset();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.reset();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.reset();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	53	None	replace
933	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[4];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[4];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
934	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  byte[]  signature  =  new  byte[12];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
935	[BUG]  [BUGGY]  in.write(signature.length  +  16);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  +  16);	  in.write(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
936	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
937	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
938	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
939	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
940	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
941	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
942	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  4);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  4);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
943	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  4);  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  4);	  	non-compiled	[CE]  ')'  expected	44	None	add
944	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  4);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  4);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
945	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
946	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
947	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	3	None	replace
948	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  16);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  16);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	3	None	replace
949	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  12);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	3	None	replace
950	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	add
951	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2InputStream(signature.length  -  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2InputStream(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    InputStream  in  =  new  BZip2InputStream(signature.length  -  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	add
952	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	add
953	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	add
954	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
955	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(in,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(in,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(in,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
956	[BUG]  [BUGGY]  in  =  new  BZip2InputStream(signature,  in.length  -  1);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2InputStream(signature,  in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2InputStream(signature,  in.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
957	[BUG]  [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
958	[BUG]  [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
959	[BUG]  [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  while(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  while(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  while(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
960	[BUG]  [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  expression  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  illegal  start  of  expression	160	None	replace
961	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  byte[]  signature  =  in.mark(signature.length  -  11);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  byte[]  signature  =  in.mark(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    byte[]  signature  =  in.mark(signature.length  -  11);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
962	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in.mark(signature.length  -  11);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in.mark(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in.mark(signature.length  -  11);	  	non-compiled	[CE]  ';'  expected	90	None	add
963	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2InputStream(signature.length  -  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2InputStream(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in  =  new  BZip2InputStream(signature.length  -  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
964	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
965	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
966	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
967	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
968	[BUG]  [BUGGY]  in.write(signature,  0,  6);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  6);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
969	[BUG]  [BUGGY]  in.write(signature,  0,  16);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  16);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
970	[BUG]  [BUGGY]  in.write(signature,  0,  32);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  32);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  32);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
971	[BUG]  [BUGGY]  Integer  signature  =  in.read(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.read(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.read(signature.length);	  Integer    signature    =    in.setLength(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	142	None	replace
972	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
973	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  12);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  signature.length  -  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	168	None	replace
974	[BUG]  [BUGGY]  in.copy(signature);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature);	  in.write(signature);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
975	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStreamReader(in.read());	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
976	[BUG]  [BUGGY]  in.setLength(SignatureUtils.length);  [CE]  cannot  find  symbol  SignatureUtils  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(SignatureUtils.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(SignatureUtils.length);	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol  SignatureUtils	143	None	replace
977	[BUG]  [BUGGY]  in.setLength(decompressUntilEOF.length);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(decompressUntilEOF.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(decompressUntilEOF.length);	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	143	None	replace
978	[BUG]  [BUGGY]  in.setLength(signal.length);  [CE]  cannot  find  symbol  signal  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signal.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signal.length);	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol  signal	143	None	replace
979	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  }  [CE]  ')'  expected  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  ')'  expected	119	None	replace
980	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  }	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
981	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
982	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
983	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
984	[BUG]  [BUGGY]  in.copy(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copy(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copy(signature.length  -  12);	  in.write(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
985	[BUG]  [BUGGY]  in.write(signature.length  -  16);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  16);	  in.write(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
986	[BUG]  [BUGGY]  if(in.markSupported())  {  final  in.close();  }  else  {  throw  new  CompressorException( " ");  }  [CE]  <identifier>  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  final  in.close();  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  final  in.close();  }  else  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	158	None	replace
987	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( ". ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( ". ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( ". ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	158	None	replace
988	[BUG]  [BUGGY]  byte[]  signature  =  createInputStream(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  createInputStream(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  createInputStream(signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    createInputStream(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
989	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE);	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
990	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(in,  signature.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	127	None	replace
991	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in  =  new  BZip2CompressorInputStream(signature,  in.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	127	None	replace
992	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  in.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  in.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
993	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  IOUtils.readFully(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  IOUtils.readFully(signature);	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
994	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(signature,  this.in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  IOUtils.readFully(signature,  this.in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  IOUtils.readFully(signature,  this.in.read());	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
995	[BUG]  [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
996	[BUG]  [BUGGY]  if(signature!=  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
997	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(compressConcatenated,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(compressConcatenated,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(compressConcatenated,  decompressUntilEOF);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
998	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  DEFLATE);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
999	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(false);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(false);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(false);	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
1000	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(64);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(64);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(64);	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
1001	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  byte[]  signature  =  in.mark(signature.length  *  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  byte[]  signature  =  in.mark(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    byte[]  signature  =  in.mark(signature.length  *  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1002	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in.mark(signature.length  *  12);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in.mark(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in.mark(signature.length  *  12);	  	non-compiled	[CE]  ';'  expected	124	None	add
1003	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  *  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  *  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1004	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1005	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  *  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  *  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1006	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2InputStream(signature.length  *  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2InputStream(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in  =  new  BZip2InputStream(signature.length  *  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1007	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1008	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[5];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[5];	  byte[]    signature    =    new    byte[4];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
1009	[BUG]  [BUGGY]  byte[]  signature  =  in.read(false);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(false);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(false);	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
1010	[BUG]  [BUGGY]  byte[]  signature  =  in.read(DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(DEFLATE);	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
1011	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  ')'  expected	166	None	replace
1012	[BUG]  [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1013	[BUG]  [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature  ==  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature  ==  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  ')'  expected	166	None	replace
1014	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenation))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenation))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenation))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1015	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	130	None	replace
1016	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	130	None	replace
1017	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	39	None	replace
1018	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	39	None	replace
1019	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
1020	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);	  	compilable	  [FE]  CompressorException  	35	2	add
1021	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.set(signature.length  +  12);  in.mark(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.set(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.set(signature.length  +  12);  in.mark(signature.length  +  12);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
1022	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  12;  [CE]  ')'  expected  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  12;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12;	  	non-compiled	[CE]  ')'  expected	35	None	add
1023	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  13);	  	compilable	  [FE]  CompressorException  	35	2	add
1024	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  13);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  13);	  	compilable	  [FE]  CompressorException  	35	2	add
1025	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  16);	  	compilable	  [FE]  CompressorException  	35	2	add
1026	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  16);  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  in.mark(signature.length  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  16);	  	compilable	  [FE]  CompressorException  	35	2	add
1027	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
1028	[BUG]  [BUGGY]  in.decompress(signature);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.decompress(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.decompress(signature);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
1029	[BUG]  [BUGGY]  in.markSupported(signature);  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported(signature);	  in.markSupported();    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	80	None	replace
1030	[BUG]  [BUGGY]  Integer  signature  =  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	75	None	replace
1031	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  2);	  in.mark(signature.length    -    2);    byte[]    signature    =    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	75	None	replace
1032	[BUG]  [BUGGY]  byte[]  signature  =  createInputStream(in,  signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  createInputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  createInputStream(in,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	replace
1033	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1034	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	165	None	replace
1035	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCon	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1036	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1037	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  decompressConcatenated))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	165	None	replace
1038	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1039	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1040	[BUG]  [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  decompressConcatenated.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1041	[BUG]  [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  decompressConcatenated.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1042	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.read());	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1043	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	14	None	replace
1044	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	14	None	replace
1045	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.reset();  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.reset();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.reset();  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	14	None	replace
1046	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  else  {  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  else  {  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  else  {	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
1047	[BUG]  [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  DECOMPRESSION);  }  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  DECOMPRESSION);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature!=  null)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  return  new  CompressorInputStream(in,  DECOMPRESSION);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	14	None	replace
1048	[BUG]  [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	164	None	replace
1049	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	164	None	replace
1050	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length  -  16);	  in.mark(signature.length    -    11);    	compilable	  [FE]  CompressorException  	91	2	replace
1051	[BUG]  [BUGGY]  in.mark(signature.length  -  16);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  16);	  in.mark(signature.length    -    11);    	compilable	  [FE]  CompressorException  	91	2	replace
1052	[BUG]  [BUGGY]  in.setLength(signatureLength  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signatureLength  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signatureLength  -  1);	  in.setLength(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	24	None	replace
1053	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  byte[]  signature  =  in.mark(signature.length  +  3);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  byte[]  signature  =  in.mark(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    byte[]  signature  =  in.mark(signature.length  +  3);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1054	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in.mark(signature.length  +  3);  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in.mark(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in.mark(signature.length  +  3);	  	non-compiled	[CE]  ';'  expected	67	None	add
1055	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1056	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1057	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1058	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2InputStream(signature.length  +  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2InputStream(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in  =  new  BZip2InputStream(signature.length  +  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1059	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1060	[BUG]  [BUGGY]  in.setLength(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  decompressConcatenated);	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1061	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(decompressConcatenated,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(decompressConcatenated,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(decompressConcatenated,  decompressConcatenated);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
1062	[BUG]  [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(in,  in.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(in,  in.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  decompressConcatenated.mark(in,  in.length);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
1063	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  DEFLATE);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
1064	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	96	None	replace
1065	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	96	None	replace
1066	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	126	None	replace
1067	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	15	None	replace
1068	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.write(signature.length  -  12);  in.mark(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.write(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.write(signature.length  -  12);  in.mark(signature.length  -  12);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
1069	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.set(signature.length  -  12);  in.mark(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.set(signature.length  -  12);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.set(signature.length  -  12);  in.mark(signature.length  -  12);	  	non-compiled	[CE]  cannot  find  symbol	46	None	add
1070	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  11);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  11);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
1071	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  11);  in.mark(signature.length  -  12);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  11);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  11);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
1072	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  16);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  16);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
1073	[BUG]  [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  16);  in.mark(signature.length  -  12);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    12);    in.mark(signature.length  -  12);  in.mark(signature.length  -  16);  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        12);        in.mark(signature.length    -    12);    in.mark(signature.length  -  16);  in.mark(signature.length  -  12);	  	compilable	  [FE]  CompressorException  	46	2	add
1074	[BUG]  [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2Compressor(signature.length  -  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  11);  InputStream  in  =  new  BZip2Compressor(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    11);    InputStream  in  =  new  BZip2Compressor(signature.length  -  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	90	None	add
1075	[BUG]  [BUGGY]  InputStream  in  =  this.in.readLine();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readLine();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readLine();	          InputStream    in    =    this.in.read();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
1076	[BUG]  [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  *  12);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    *    12);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	add
1077	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1078	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	163	None	replace
1079	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	163	None	replace
1080	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
1081	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
1082	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  in.reset();  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  in.reset();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  else  {  in.reset();  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	16	None	replace
1083	[BUG]  [BUGGY]  int  signatureLength  =  in.read(signature.length,  2);  [CE]  no  suitable  method  found  for  read(int,int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  in.read(signature.length,  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  in.read(signature.length,  2);	  int    signatureLength    =    in.read(signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  read(int,int)	150	None	replace
1084	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	130	None	replace
1085	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
1086	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
1087	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
1088	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
1089	[BUG]  [BUGGY]  in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
1090	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signatureLength);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	76	None	replace
1091	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setLength(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  in.setLength(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  in.setLength(signature.length  +  12);	  in.setLength(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
1092	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature,  0,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZIPInputStream(signature,  0,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
1093	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(decompressConcatenated,  signature,  0,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  FileInputStream(decompressConcatenated,  signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  FileInputStream(decompressConcatenated,  signature,  0,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
1094	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(signature,  0,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  FileInputStream(signature,  0,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  FileInputStream(signature,  0,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
1095	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  FileInputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  FileInputStream(decompressConcatenated);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
1096	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature.length,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature.length,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZIPInputStream(signature.length,  12);	  in.write(signature,    0,    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	116	None	replace
1097	[BUG]  [BUGGY]  byte[]  signature  =  in.read(PACK200);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(PACK200);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(PACK200);	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
1098	[BUG]  [BUGGY]  byte[]  signature  =  in.read(BZIP);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.read(BZIP);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.read(BZIP);	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
1099	[BUG]  [BUGGY]  byte[]  signature  =  in.readLine();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readLine();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readLine();	          byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	137	None	replace
1100	[BUG]  [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2Compressor(signature.length  -  3);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  3);  InputStream  in  =  new  BZip2Compressor(signature.length  -  3);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    3);    InputStream  in  =  new  BZip2Compressor(signature.length  -  3);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	42	None	add
1101	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  -  1);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	53	None	replace
1102	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	53	2	replace
1103	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  -  12);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	53	2	replace
1104	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	          final    int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean)	2	None	replace
1105	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
1106	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
1107	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.getBytes());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.getBytes());	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
1108	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[0];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[0];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[0];	          final    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
1109	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
1110	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	168	None	replace
1111	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	121	None	replace
1112	[BUG]  [BUGGY]  Integer  signatureLength  =  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  incompatible  types  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  in.mark(signature.length  -  1);  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  incompatible  types	12	None	replace
1113	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	12	None	replace
1114	[BUG]  [BUGGY]  in.setLength(signature.length  -  1,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature.length  -  1,  in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature.length  -  1,  in.length  -  1);	  in.setLength(signature.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	24	None	replace
1115	[BUG]  [BUGGY]  int  signatureLength  =  signature.length  -  1;  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  int  signatureLength  =  signature.length  -  1;  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	int  signatureLength  =  signature.length  -  1;	  in.setLength(signature.length    -    1);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	24	None	replace
1116	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	48	None	replace
1117	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length);	          final    int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
1118	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }	  if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	156	2	replace
1119	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }	  if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	156	2	replace
1120	[BUG]  [BUGGY]  while(in.markSupported())  {  in.close();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  while(in.markSupported())  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	while(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	156	None	replace
1121	[BUG]  [BUGGY]  Integer  signature  =  in.read(signature,  0,  signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.read(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.read(signature,  0,  signature.length);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	84	None	replace
1122	[BUG]  [BUGGY]  in.write(signature,  0,  signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature,  0,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature,  0,  signature.length  -  12);	  in.write(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
1123	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
1124	[BUG]  [BUGGY]  in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
1125	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  DEFLATE);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	77	None	replace
1126	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
1127	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(strategy);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(strategy);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(strategy);	          byte[]    signature    =    in.readBytes(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	139	None	replace
1128	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  -  1);  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  createInputStream(in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  createInputStream(in.mark(signature.length  -  1);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in.mark(signature.length    +    1);    	non-compiled	[CE]  ')'  expected	111	None	replace
1129	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
1130	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZ  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZ  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZ	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	95	None	replace
1131	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2InputStream(signature.length  -  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  6);  InputStream  in  =  new  BZip2InputStream(signature.length  -  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    6);    InputStream  in  =  new  BZip2InputStream(signature.length  -  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	add
1132	[BUG]  [BUGGY]  InputStream  in  =  this.in.readOut();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  this.in.readOut();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  this.in.readOut();	  InputStream    in    =    this.in.readIn();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	146	None	replace
1133	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported()  ||  in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	160	None	replace
1134	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(!in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(!in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  if(!in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "Mark    is    not    supported.   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	160	None	replace
1135	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length,  decompressConcatenated,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length,  decompressConcatenated,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length,  decompressConcatenated,  decompressConcatenated);	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
1136	[BUG]  [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length,  in.mark(signature.length));  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length,  in.mark(signature.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  decompressConcatenated.mark(signature.length,  in.mark(signature.length));	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
1137	[BUG]  [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length,  in.markSupported());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  decompressConcatenated.mark(signature.length,  in.markSupported());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  decompressConcatenated.mark(signature.length,  in.markSupported());	  byte[]    signature    =    in.mark(signature.length,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	replace
1138	[BUG]  [BUGGY]  Integer  signature  =  in.copy(signature,  0,  signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signature  =  in.copy(signature,  0,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signature  =  in.copy(signature,  0,  signature.length);	  in.copy(signature,    0,    signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	117	None	replace
1139	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  in.read());	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
1140	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated,  signature.length);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
1141	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2InputStream(signature.length  +  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  InputStream  in  =  new  BZip2InputStream(signature.length  +  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    11);    InputStream  in  =  new  BZip2InputStream(signature.length  +  11);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	29	None	add
1142	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
1143	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    DEFLATE))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	54	2	replace
1144	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated);	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	112	None	replace
1145	[BUG]  [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  1);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  in.read());	  in.mark(signature.length    +    1);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	112	None	replace
1146	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])	159	None	replace
1147	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signature);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    return    new    BZip2CompressorInputStream(in,    signature);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,byte[])	159	None	replace
1148	[BUG]  [BUGGY]  final  byte[]  signature  =  new  byte[5];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  new  byte[5];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  new  byte[5];	  final    byte[]    signature    =    new    byte[1];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
1149	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.write(signature.length  +  1);  in.mark(signature.length  +  1);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.write(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.write(signature.length  +  1);  in.mark(signature.length  +  1);	  	non-compiled	[CE]  cannot  find  symbol	92	None	add
1150	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.skip(signature.length  +  1);  in.mark(signature.length  +  1);  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.skip(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.skip(signature.length  +  1);  in.mark(signature.length  +  1);	  	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	92	None	add
1151	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  2);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  2);  in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	92	2	add
1152	[BUG]  [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  2);  in.mark(signature.length  +  1);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    1);    in.mark(signature.length  +  1);  in.mark(signature.length  +  2);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        1);        in.mark(signature.length    +    1);    in.mark(signature.length  +  2);  in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	92	2	add
1153	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported.   ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	158	None	replace
1154	[BUG]  [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2Compressor(signature.length  -  10);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  10);  InputStream  in  =  new  BZip2Compressor(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    10);    InputStream  in  =  new  BZip2Compressor(signature.length  -  10);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	154	None	add
1155	[BUG]  [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  3);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    3);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	67	None	add
1156	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
1157	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
1158	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length  -  2));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
1159	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.mark(signature.length));	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
1160	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2InputStream(signature.length  +  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2InputStream(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2InputStream(signature.length  +  2);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
1161	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  2);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
1162	[BUG]  [BUGGY]  in.mark(signature.length  +  2);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  +  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  2);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  +  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    2);    byte[]  signature  =  new  byte[12];  in.mark(signature.length  +  2);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	add
1163	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(DEFLATE);	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1164	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(in,  DEFLATE);	          InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	replace
1165	[BUG]  [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[6];  in.markSupported();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  byte[]  signature  =  new  byte[6];  in.markSupported();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    byte[]  signature  =  new  byte[6];  in.markSupported();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
1166	[BUG]  [BUGGY]  in.markSupported();  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.markSupported();  InputStream  in  =  createInputStream(in,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.markSupported();    InputStream  in  =  createInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	79	None	add
1167	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2InputStream(signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	152	None	replace
1168	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  16);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.mark(signature.length  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.mark(signature.length  +  16);	  byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	57	None	replace
1169	[BUG]  [BUGGY]  Integer  signatureLength  =  signnature.setLength(in.setLength);  [CE]  cannot  find  symbol  setLength  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  signnature.setLength(in.setLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  signnature.setLength(in.setLength);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  setLength	25	None	replace
1170	[BUG]  [BUGGY]  Integer  signatureLength  =  SignatureFactory.setLength(signature.length);  [CE]  cannot  find  symbol  SignatureFactory  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  SignatureFactory.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  SignatureFactory.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  SignatureFactory	25	None	replace
1171	[BUG]  [BUGGY]  Integer  signatureLength  =  this.signature.setLength(signature.length);  [CE]  cannot  find  symbol  signature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  this.signature.setLength(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  this.signature.setLength(signature.length);	  Integer    signatureLength    =    in.setLength(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signature	25	None	replace
1172	[BUG]  [BUGGY]  in.write(signature.length  -  1  +  16);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1  +  16);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1  +  16);	  in.write(signature.length    -    1    +    12);    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
1173	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
1174	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
1175	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
1176	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  1);  }  else  {  in.mark(signature.length  +  2);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    	compilable	  [FE]  CompressorException  	93	2	replace
1177	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signage.length);  [CE]  cannot  find  symbol  signage  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  signage.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signage.length);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  signage	21	None	replace
1178	[BUG]  [BUGGY]  in.write(signature.length  -  1,  signnature.length);  [CE]  cannot  find  symbol  signnature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  signnature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  signnature.length);	  in.write(signature.length    -    1,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  signnature	21	None	replace
1179	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcaten	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  ')'  expected	166	None	replace
1180	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1181	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1182	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZ  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZ  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZ	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1183	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZi  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZi  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZi	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1184	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    decompressConcatenated))    {    return    new    BZip2CompressorInputStream(in,    decompressConcaten    	non-compiled	[CE]  '('  or  '['  expected	166	None	replace
1185	[BUG]  [BUGGY]  InputStream  in  =  in.mark(signature.length  -  11);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  in.mark(signature.length  -  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  in.mark(signature.length  -  11);	  in.mark(signature.length    -    12);    InputStream    in    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	177	None	replace
1186	[BUG]  [BUGGY]  in.write(signatureLength,  0,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signatureLength,  0,  signatureLength);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signatureLength,  0,  signatureLength);	  in.write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	115	None	replace
1187	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1188	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1189	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1190	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1191	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1192	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1193	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1194	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  throw  new  CompressorException( " ");  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  in.mark(signature.length  -  2);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	72	2	replace
1195	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  in.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  in.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature,  in.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	179	None	replace
1196	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length,  12);	  in.mark(signature.length    -    12);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	179	None	replace
1197	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[16];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[16];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  byte[]  signature  =  new  byte[16];	  in.mark(signature.length    -    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	104	None	replace
1198	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP1);  [CE]  cannot  find  symbol  BZIP1  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  BZIP1);	          final    int    signatureLength    =    IOUtils.readFully(signature,    1);    	non-compiled	[CE]  cannot  find  symbol  BZIP1	7	None	replace
1199	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
1200	[BUG]  [BUGGY]  in.mark(signature.length,  in.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length,  in.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length,  in.length);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  length	38	None	replace
1201	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
1202	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    decompressUntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	38	None	replace
1203	[BUG]  [BUGGY]  in.setLength(signature,  Integer.parseInt(in.getLength()));  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  Integer.parseInt(in.getLength()));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  Integer.parseInt(in.getLength()));	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1204	[BUG]  [BUGGY]  in.setLength(signature,  Integer.parseInt(in.getBytes()));  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.setLength(signature,  Integer.parseInt(in.getBytes()));  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.setLength(signature,  Integer.parseInt(in.getBytes()));	  in.setLength(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
1205	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
1206	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
1207	[BUG]  [BUGGY]  in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
1208	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	74	None	replace
1209	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  byte[]  signature  =  in.mark(signature.length  -  12);	  in.mark(signature.length    -    12);    byte[]    signature    =    in.mark(signature.length    -    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	102	None	replace
1210	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  }  [CE]  ';'  expected  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  }	  in.mark(signature.length    -    12);    InputStream    in.mark(signature.length    -    12);    	non-compiled	[CE]  ';'  expected	101	None	replace
1211	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  }  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  InputStream  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    12);    InputStream    in.mark(signature.length    -    12);    	non-compiled	[CE]  ';'  expected	101	None	replace
1212	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }  [CE]  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  12);  InputStream  in.mark(signature.length  -  12);  }  else  {  throw  new  CompressorException( " ");  }	  in.mark(signature.length    -    12);    InputStream    in.mark(signature.length    -    12);    	non-compiled	[CE]  	101	None	replace
1213	[BUG]  [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [CE]  'else'  without  'if'  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	while(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  in.length);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    in.length);    }    	non-compiled	[CE]  'else'  without  'if'	161	None	replace
1214	[BUG]  [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);	          final    int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	3	None	replace
1215	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1216	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1217	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1218	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1219	[BUG]  [BUGGY]  if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1220	[BUG]  [BUGGY]  if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1221	[BUG]  [BUGGY]  if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  12)  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
1222	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZIPInputStream(decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZIPInputStream(decompressConcatenated);	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
1223	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZIPInputStream(in,  DEFLATE);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZIPInputStream(in,  DEFLATE);	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
1224	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(in.getPath());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  FileInputStream(in.getPath());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  FileInputStream(in.getPath());	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
1225	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZIPInputStream(in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZIPInputStream(in.read());	  in.release();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	83	None	replace
1226	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[16];  in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[16];  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[16];  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	17	None	replace
1227	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    createInputStream(in,    signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
1228	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  byte[2];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  InputStream  in  =  new  byte[2];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  InputStream  in  =  new  byte[2];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
1229	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[16];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  byte[16];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  byte[16];	  in.mark(signature.length    -    12);    InputStream    in    =    new    byte[12];    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	replace
1230	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  -  2);	  in.mark(signature.length    -    2);    InputStream    in    =    new    BZip2CompressorInputStream(in,    signature.length    -    2);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	120	None	replace
1231	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  getInputStream(signature,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  getInputStream(signature,  decompressConcatenated);	          InputStream    in    =    getInputStream(signature);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	140	None	replace
1232	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  12);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    UntilEOF))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	39	None	replace
1233	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.write(signature.length  -  1);  in.mark(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.write(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.write(signature.length  -  1);  in.mark(signature.length  -  1);	  	non-compiled	[CE]  cannot  find  symbol	9	None	add
1234	[BUG]  [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.skip(signature.length  -  1);  in.mark(signature.length  -  1);  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    1);    in.mark(signature.length  -  1);  in.skip(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        1);        in.mark(signature.length    -    1);    in.skip(signature.length  -  1);  in.mark(signature.length  -  1);	  	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	9	None	add
1235	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2InputStream(signature.length  +  13);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  new  BZip2InputStream(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  new  BZip2InputStream(signature.length  +  13);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
1236	[BUG]  [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  in.mark(signature.length  +  13);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  13);  InputStream  in  =  in.mark(signature.length  +  13);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    13);    InputStream  in  =  in.mark(signature.length  +  13);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	148	None	add
1237	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signature.length);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1238	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.getCharacterIndex());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.getCharacterIndex());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.getCharacterIndex());	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1239	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.available());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.available());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  in.available());	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1240	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  6);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  6);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
1241	[BUG]  [BUGGY]  in.mark(signature.length  +  6);  byte[]  signature  =  new  byte[6];  in.mark(signature.length  +  6);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  6);  byte[]  signature  =  new  byte[6];  in.mark(signature.length  +  6);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    +    6);    byte[]  signature  =  new  byte[6];  in.mark(signature.length  +  6);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	add
1242	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	157	None	replace
1243	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  if(in.markSupported())  {  throw  new  CompressorException( " ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  if(in.markSupported())  {  throw  new  CompressorException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1244	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  if(in.markSupported())  {  in.close();  }  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  if(in.markSupported())  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  if(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1245	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.close();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	157	None	replace
1246	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  if(in.markSupported())  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    CompressorException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	157	None	replace
1247	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
1248	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
1249	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
1250	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
1251	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.getBytes(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.getBytes(signature.length);	  in.mark(signature.length    +    12);    InputStream    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	132	None	replace
1252	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.write(signature.length  -  2);  in.mark(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.write(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.write(signature.length  -  2);  in.mark(signature.length  -  2);	  	non-compiled	[CE]  cannot  find  symbol	71	None	add
1253	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.set(signature.length  -  2);  in.mark(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.set(signature.length  -  2);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.set(signature.length  -  2);  in.mark(signature.length  -  2);	  	non-compiled	[CE]  cannot  find  symbol	71	None	add
1254	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	71	2	add
1255	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  1);  in.mark(signature.length  -  1);	  	compilable	  [FE]  CompressorException  	71	2	add
1256	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  1);  in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	71	2	add
1257	[BUG]  [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  in.mark(signature.length  -  2);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    -    2);    in.mark(signature.length  -  2);  in.mark(signature.length  -  1);  in.mark(signature.length  -  2);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        -        2);        in.mark(signature.length    -    2);    in.mark(signature.length  -  1);  in.mark(signature.length  -  2);	  	compilable	  [FE]  CompressorException  	71	2	add
1258	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
1259	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(in,  signature);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
1260	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  decompressUntilEOF);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
1261	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  }  [CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  this.decompressUntilEOF  =  IOUtils.readFully(signature,  signature);  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    this.decompressUntilEOF    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  decompressUntilEOF	13	None	replace
1262	[BUG]  [BUGGY]  in.write(signature.length  -  10);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  10);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  10);	  in.write(signature.length    -    12);    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
1263	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
1264	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  11);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
1265	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  13);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  13);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
1266	[BUG]  [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  13);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  13);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length!=  0)  {  in.mark(signature.length  +  12);  }  else  {  in.mark(signature.length  +  13);  }	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    	compilable	  [FE]  CompressorException  	36	2	replace
1267	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZIPInputStream(signature.length);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	81	None	replace
1268	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  in.read());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  InputStream  in  =  createInputStream(in,  decompressConcatenated,  in.read());	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	106	None	replace
1269	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length);  in.mark(signature.length  +  12);  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2Compress	  in.mark(signature.length    +    12);    in.mark(signature.length    +    12);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	37	None	replace
1270	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
1271	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [FE]  CompressorException  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  2);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
1272	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
1273	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  1);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
1274	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
1275	[BUG]  [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [FE]  CompressorException  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  12)  {  in.mark(signature.length  -  2);  }  else  {  in.mark(signature.length  -  1);  }	  in.mark(signature.length    -    2);    in.mark(signature.length    -    2);    }    else    {    in.mark(signature.length    -    2);    	compilable	  [FE]  CompressorException  	78	2	replace
1276	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  new  BZip2InputStream(signature.length  /  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  new  BZip2InputStream(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in  =  new  BZip2InputStream(signature.length  /  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
1277	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  /  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signature.length  /  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
1278	[BUG]  [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  /  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  /  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  /  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    /    12);    InputStream  in  =  new  BZip2CompressorInputStream(signature.length  /  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	add
1279	[BUG]  [BUGGY]  in.mark(signature.length  +  11);  byte[]  signature  =  in.mark(signature.length  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  11);  byte[]  signature  =  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  11);  byte[]  signature  =  in.mark(signature.length  +  12);	  in.mark(signature.length    +    12);    byte[]    signature    =    in.mark(signature.length    +    12);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	131	None	replace
1280	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.reset();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.reset();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.reset();  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	10	None	replace
1281	[BUG]  [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.close();  }  [CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.close();  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  >  0)  {  in.mark(signature.length  -  1);  in.mark(signature.length  -  1);  }  else  {  in.close();  }	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    	non-compiled	[CE]  unreported  exception  IOException;  must  be  caught  or  declared  to  be  thrown	10	None	replace
1282	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readUTF());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readUTF());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readUTF());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
1283	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressConcatenated);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressConcatenated);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
1284	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readCharacters());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readCharacters());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readCharacters());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
1285	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacters());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacters());  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacters());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	144	None	replace
1286	[BUG]  [BUGGY]  in.write(signature.length  *  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  *  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  *  12);	  in.write(signature.length    +    12);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
1287	[BUG]  [BUGGY]  InputStream  in  =  new  CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
1288	[BUG]  [BUGGY]  InputStream  in  =  new  CompressorInputStream(signature,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  CompressorInputStream(signature,  decompressUntilEOF);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
1289	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  final  in.mark(signature.length  -  1);  [CE]  <identifier>  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  1);  final  in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  1);  final  in.mark(signature.length  -  1);	  in.mark(signature.length    -    1);    in.mark(signature.length    -    1);    return    new    CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
1290	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2InputStream(signature.length  -  4);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2InputStream(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2InputStream(signature.length  -  4);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
1291	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    byte[]  signature  =  new  byte[12];  in.mark(signature.length  -  4);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
1292	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  }  else  {  in.mark(signature.length  -  4);  [CE]  illegal  start  of  type  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  in.mark(signature.length  -  4);  }  else  {  in.mark(signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    in.mark(signature.length  -  4);  }  else  {  in.mark(signature.length  -  4);	  	non-compiled	[CE]  illegal  start  of  type	44	None	add
1293	[BUG]  [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  4);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  4);  InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  4);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length    -    4);    InputStream  in  =  new  BZip2InputStream(in,  signature.length  -  4);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	44	None	add
1294	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	170	None	replace
1295	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  12);  InputStream  in  =  new  BZip2CompressorInputStream(signature.length  -  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2CompressorInputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	170	None	replace
1296	[BUG]  [BUGGY]  in.copyOf(signature);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.copyOf(signature);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.copyOf(signature);	  in.write(signature);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
1297	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length  -  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  createInputStream(in,  signature.length  -  12);	  in.mark(signature.length    -    12);    InputStream    in    =    createInputStream(in,    signature.length    -    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	replace
1298	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1299	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1300	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1301	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  de  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  de  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  de	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1302	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(in.markSupported())  {  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	165	None	replace
1303	[BUG]  [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  illegal  start  of  expression  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	if(signature.length  ==  0)  {  in.mark(signature.length  +  1);  if(IOUtils.readFully(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signature.length    +    1);    in.mark(signature.length    +    1);    if(IOUtils.readFully(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
1304	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length);  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);	  in.mark(signature.length    +    12);    InputStream    in    =    new    BZip2InputStream(signature.length    +    12);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	167	None	replace
1305	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(PACK200);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(PACK200);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(PACK200);	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
1306	[BUG]  [BUGGY]  final  byte[]  signature  =  in.readLine();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.readLine();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.readLine();	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
1307	[BUG]  [BUGGY]  final  byte[]  signature  =  in.read(BZIP);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  final  byte[]  signature  =  in.read(BZIP);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	final  byte[]  signature  =  in.read(BZIP);	          final    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	5	None	replace
1308	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressUntilEOF);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(in,  decompressUntilEOF);	  in.mark(signature.length    -    12);    in.mark(signature.length    -    12);    }    else    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	52	None	replace
1309	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  new  byte[12];  in.mark(signature.length);	  in.mark(signature.length    -    2);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	153	None	replace
1310	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  final  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  -  2);  final  byte[]  signature  =  new  byte[12];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  -  2);  final  byte[]  signature  =  new  byte[12];	  in.mark(signature.length    -    2);    byte[]    signature    =    new    byte[12];    in.mark(signature.length    -    2);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	153	None	replace
1311	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	add	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	35	2	add
1312	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.mark(signature.length  +  1);  in.mark(signature.length  +  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.mark(signature.length  +  1);  in.mark(signature.length  +  1);	  	compilable	  [FE]  CompressorException  	35	2	add
1313	[BUG]  [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.write(signature.length  +  12);  in.mark(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length    +    12);    in.mark(signature.length  +  12);  in.write(signature.length  +  12);  in.mark(signature.length  +  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length        +        12);        in.mark(signature.length    +    12);    in.write(signature.length  +  12);  in.mark(signature.length  +  12);	  	non-compiled	[CE]  cannot  find  symbol	35	None	add
1314	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  in.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  in.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	InputStream  in  =  new  BZip2InputStream(signature,  in.length  -  1);	  in.mark(signature.length    -    1);    InputStream    in    =    new    BZip2InputStream(in,    signature.length    -    1);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
1315	[BUG]  [BUGGY]  byte[]  signature  =  this.in.mark(signature.length  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  byte[]  signature  =  this.in.mark(signature.length  -  1);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	byte[]  signature  =  this.in.mark(signature.length  -  1);	  byte[]    signature    =    in.mark(signature.length    -    1);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
1316	[BUG]  [BUGGY]  Integer  signatureLength  =  in.length();  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  Integer  signatureLength  =  in.length();  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	Integer  signatureLength  =  in.length();	  in.setLength(Signature.length);    	non-compiled	[CE]  cannot  find  symbol	143	None	replace
1317	[BUG]  [BUGGY]  in.write(signature.length  -  2,  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  2,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  2,  12);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1318	[BUG]  [BUGGY]  in.write(signature.length  -  4,  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  4,  12);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  4,  12);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1319	[BUG]  [BUGGY]  in.write(signature.length  -  1,  11);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.write(signature.length  -  1,  11);  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.write(signature.length  -  1,  11);	  in.write(signature.length    -    1,    12);    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
1320	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[6];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[6];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[6];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1321	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[4];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[4];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[4];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1322	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[2];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];      [BUGGY]  in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[2];  [BUGGY]      try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	215	215	2	replace	in.mark(signature.length  +  12);  byte[]  signature  =  new  byte[2];	  in.mark(signature.length    +    12);    byte[]    signature    =    new    byte[12];    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
