bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.decompressUntilEOF)  {  [CE]  cannot  find  symbol  decompressUntilEOF  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&!in.decompressUntilEOF)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.decompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressUntilEOF	11	None	replace
2	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||!in.decompressConcatenated)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||!in.decompressConcatenated)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	11	None	replace
3	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.decompressAfterEOF)  {  [CE]  cannot  find  symbol  decompressAfterEOF  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&!in.decompressAfterEOF)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.decompressAfterEOF)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressAfterEOF	11	None	replace
4	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  <identifier>  expected  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream();	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
5	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream();  [CE]  <identifier>  expected  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  this.in.getInputStream();  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.getInputStream();	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
6	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes());  [CE]  <identifier>  expected  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes());  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes());	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
7	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion());  [CE]  <identifier>  expected  [FE]                          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion());  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion());	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [CE]  <identifier>  expected  [FE]                            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes());	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding());  [CE]  <identifier>  expected  [FE]                              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding());  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding());	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes());  [CE]  <identifier>  expected  [FE]                                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes());  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readBytes());	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (!in.markSupported()  &&!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  CompressorException  	4	2	replace
12	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  CompressorException  	4	2	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
14	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	4	2	replace
15	[BUG]  [BUGGY]  if  (!in.mark()  ||!in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.mark()  ||!in.mark())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||!in.mark())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	4	None	replace
16	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  (in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  (in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  (in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
17	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  (!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  (!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  (!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
18	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  (in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  (in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  (in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
19	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  (Integer.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  (Integer.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  (Integer.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
20	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
21	[BUG]  [BUGGY]  if  (in.markSupported())  {  If  (in.markSupported())  {  [CE]  ';'  expected  [FE]              IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  If  (in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    If  (in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	1	None	add
22	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  ((  in.markSupported())!=  null  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
23	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  if  (!in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  if  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||    in.markSupported())    {    if  (!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
24	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||    in.markSupported())    {    If  (!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	8	None	add
25	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  not  a  statement	8	None	add
26	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||!in.markSupported())    {    if  (!in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
27	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||!in.markSupported())    {    If  (!in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	3	None	add
28	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  if  (!in.markSupported()  ||! "in.markSupported())  {  [CE]  unclosed  string  literal  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  if  (!in.markSupported()  ||! "in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||!in.markSupported())    {    if  (!in.markSupported()  ||! "in.markSupported())  {	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
29	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  not  a  statement	3	None	add
30	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)||!in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(signature.length)||!in.markSupported(signature.length))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)||!in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	5	None	replace
31	[BUG]  [BUGGY]  if  (!in.markSupported(signatureLength))  {  [CE]  cannot  find  symbol  signatureLength  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(signatureLength))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signatureLength))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	replace
32	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(decompressConcatenated))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	5	None	replace
33	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)||  in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(signature.length)||  in.markSupported(signature.length))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)||  in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	5	None	replace
34	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(decompressConcatenated,  signature.length))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  signature.length))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	5	None	replace
35	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	6	None	replace
36	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	6	None	replace
37	[BUG]  [BUGGY]  if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	6	None	replace
38	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	6	None	replace
39	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
40	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
41	[BUG]  [BUGGY]  if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
42	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in.markSupported()  ||  in.markSupported())  {	  if    (in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
43	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported())  {	  if    (in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	2	2	replace
44	[BUG]  [BUGGY]  if  (in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]      IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported(signature.length))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported(signature.length))  {	  if    (in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  signature	2	None	replace
45	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (!in.markSupported()  &&  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  CompressorException  	9	2	replace
46	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  CompressorException  	9	2	replace
47	[BUG]  [BUGGY]  if  (!in.mark()  ||  in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.mark()  ||  in.mark())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||  in.mark())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	9	None	replace
48	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	6	None	replace
49	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
50	[BUG]  [BUGGY]  if  (in.markSupported()  &&!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported()  &&!in.decompressConcatenated)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&!in.decompressConcatenated)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	11	None	replace
51	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.enabled)  {  [CE]  cannot  find  symbol  enabled  [FE]          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&!in.enabled)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.enabled)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  enabled	11	None	replace
52	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.compressUntilEOF)  {  [CE]  cannot  find  symbol  compressUntilEOF  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  &&!in.compressUntilEOF)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.compressUntilEOF)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  compressUntilEOF	11	None	replace
53	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||!in.markSupported())    {    if  (in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
54	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  (!in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  (!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
55	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  <identifier>  expected  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in);	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
56	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ");  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ");	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
57	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in);  [CE]  <identifier>  expected  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  createCompressorInputStream(in);  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in);	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
58	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  <identifier>  expected  [FE]                          CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
59	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream();  [CE]  <identifier>  expected  [FE]                            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream();  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream();	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
60	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion());  [CE]  <identifier>  expected  [FE]                              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion());  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion());	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
61	[BUG]  [BUGGY]  if  (!in.markSupported(signatures.length))  {  [CE]  cannot  find  symbol  signatures  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(signatures.length))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signatures.length))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signatures	5	None	replace
62	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
63	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
64	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.isEnabled())  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  in.isEnabled())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  in.isEnabled())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
65	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||    in.markSupported())    {    in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  not  a  statement	8	None	add
66	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    ||    in.markSupported())    {    if  (!in.markSupported()  ||  im.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
67	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
68	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	9	2	replace
69	[BUG]  [BUGGY]  if  (in.markSupported())  {  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
70	[BUG]  [BUGGY]  if  (in.markSupported())  {  if  (in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (in.markSupported())  {  if  (in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported())    {    if  (in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
71	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]            CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	5	None	replace
72	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length  +  12))  {  [CE]  cannot  find  symbol  signature  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported(signature.length  +  12))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length  +  12))  {	  if    (!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	5	None	replace
73	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
74	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	7	None	replace
75	[BUG]  [BUGGY]  if(in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if(in.markMarkSupported())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported())  {	  if    (in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
76	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markBytes())  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if(in.markSupported()  ||  in.markBytes())  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markBytes())  {	  if    (in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
77	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [CE]  <identifier>  expected  [FE]                    CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated);	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
78	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  <identifier>  expected  [FE]                      CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated);	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
79	[BUG]  [BUGGY]  in.defaultRead();  [CE]  <identifier>  expected  [FE]                        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  in.defaultRead();  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in.defaultRead();	      	non-compiled	[CE]  <identifier>  expected	10	None	replace
80	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]              CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	6	None	replace
81	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]        CompressorException    [CONTEXT]    throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }    [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenated)  {  [BUGGY]    throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenated)  {	  if    (!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	11	None	replace
