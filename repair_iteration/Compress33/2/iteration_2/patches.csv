bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (in.mark(signature.length)||!in.markSupported())  {  [CE]  cannot  find  symbol  signature  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.mark(signature.length)||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.mark(signature.length)||!in.markSupported())  {	  if    (in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  signature	14	None	replace
2	[BUG]  [BUGGY]  if(in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark())  {	  if    (in.markSupported())    {    if    (in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	16	None	replace
3	[BUG]  [BUGGY]  if  (!in.mark()  &&!in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  &&!in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  &&!in.mark())  {	  if    (!in.mark()    ||!in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	15	None	replace
4	[BUG]  [BUGGY]  if  (!in.mark()  ||!in.mark()  ||!in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  ||!in.mark()  ||!in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||!in.mark()  ||!in.mark())  {	  if    (!in.mark()    ||!in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	15	None	replace
5	[BUG]  [BUGGY]  if  (!in.mark(signature.length)||!in.mark())  {  [CE]  cannot  find  symbol  signature  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark(signature.length)||!in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark(signature.length)||!in.mark())  {	  if    (!in.mark()    ||!in.mark())    {    	non-compiled	[CE]  cannot  find  symbol  signature	15	None	replace
6	[BUG]  [BUGGY]  if  (in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	37	None	replace
7	[BUG]  [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAME)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAME)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (isEnabled(Feature.QUOTE_FIELD_NAME)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	37	None	replace
8	[BUG]  [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	37	None	replace
9	[BUG]  [BUGGY]  if  (decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	37	None	replace
10	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.compressUntilEOF)  {  [CE]  cannot  find  symbol  compressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||!in.compressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||!in.compressUntilEOF)  {	  if    (!in.markSupported()    &&!in.compressUntilEOF)    {    	non-compiled	[CE]  cannot  find  symbol  compressUntilEOF	52	None	replace
11	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (!in.markSupported()  &&!decompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.compressUntilEOF)    {    	compilable	  [FE]  CompressorException  	52	2	replace
12	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!decompressUntilEOF)  {  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!decompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.compressUntilEOF)    {    	compilable	  [FE]  CompressorException  	52	2	replace
13	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)&&!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	40	None	replace
14	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	40	None	replace
15	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAMES)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAMES)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	40	None	replace
16	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.isEnabled())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.isEnabled())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  in.isEnabled())  {	  if    (!in.markSupported()    ||    in.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
17	[BUG]  [BUGGY]  if  (in.markSupported()  ||  in.isEnabled())  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||  in.isEnabled())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  ||  in.isEnabled())  {	  if    (!in.markSupported()    ||    in.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
18	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(System.identityHashCode(in)))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  isEnabled(System.identityHashCode(in)))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(System.identityHashCode(in)))  {	  if    (!in.markSupported()    ||    in.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
19	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "UTF-8 "));  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "UTF-8 "));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "UTF-8 "));	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  1);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  1);	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
21	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.readBytes());  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.readBytes());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.readBytes());	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  12);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  12);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  12);	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
23	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.read());  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.read());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.read());	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  4);  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  4);	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	If  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
26	[BUG]  [BUGGY]  if(in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
27	[BUG]  [BUGGY]  if(!in.mark()  ||  in.mark())  {  If  (!in.mark()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||  in.mark())  {  If  (!in.mark()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||  in.mark())  {  If  (!in.mark()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
28	[BUG]  [BUGGY]  if  (!markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
29	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
30	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
31	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	63	None	replace
32	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  signatureLength))  {  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  signatureLength))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
33	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in.length))  {  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in.length))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
34	[BUG]  [BUGGY]  if  (!decompressConcatenated,  in.markSupported(signature.length))  {  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated,  in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated,  in.markSupported(signature.length))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
35	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in.name()))  {  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in.name()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in.name()))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
36	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in.signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in.signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in.signature.length))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	71	None	replace
37	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in.size()))  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in.size()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in.size()))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
38	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in.name))  {  [CE]  cannot  find  symbol  name  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in.name))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in.name))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  name	71	None	replace
39	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
40	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  0);  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  0);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
41	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(this.decompressConcatenated);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(this.decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(this.decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
42	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
43	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  decompressUntilEOF);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
44	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readUTF());  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readUTF());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readUTF());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
45	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes( "UTF-8 "));  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes( "UTF-8 "));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readBytes( "UTF-8 "));	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readInt());  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readInt());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readInt());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
47	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readLine());  [CE]  <identifier>  expected  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readLine());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readLine());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
48	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readFully());  [CE]  <identifier>  expected  [FE]                                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readFully());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readFully());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
49	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [CE]  <identifier>  expected  [FE]                                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.read());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
50	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readEndBytes());  [CE]  <identifier>  expected  [FE]                                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readEndBytes());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readEndBytes());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
51	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
52	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
53	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported(0))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported(0))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported(0))  {	  if(in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	43	None	replace
54	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported(1))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported(1))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported(1))  {	  if(in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	43	None	replace
55	[BUG]  [BUGGY]  if(in.mark()  ||  in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark()  ||  in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark()  ||  in.mark())  {	  if(in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	43	None	replace
56	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported()  ||  decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in.markSupported()  ||  in.markSupported()  ||  decompressConcatenated)  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
57	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported()  ||  decompressConcatenated)  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported()  ||  decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported()  ||  decompressConcatenated)  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
58	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.decompressAfterEOF)  {  [CE]  cannot  find  symbol  decompressAfterEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||!in.decompressAfterEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||!in.decompressAfterEOF)  {	  if    (!in.markSupported()    &&!in.decompressAfterEOF)    {    	non-compiled	[CE]  cannot  find  symbol  decompressAfterEOF	3	None	replace
59	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion()  +  1);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion()  +  1);	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  1);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  1);	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
61	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  DEFLATE);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  DEFLATE);	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
62	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  this);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  this);	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
63	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getRawClass());  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getRawClass());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getRawClass());	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
64	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  4);  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  4);	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
65	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()    ||    in.markSupported())    {    if(in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
66	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  If(in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  If(in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()    ||    in.markSupported())    {    If(in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	42	None	add
67	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(Integer.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(Integer.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()    ||    in.markSupported())    {    if(Integer.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
68	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
69	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(in.MarkSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(in.MarkSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()    ||    in.markSupported())    {    if(in.MarkSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
70	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  &&  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
71	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  If  (!in.markSupported()  &&  in.markSupported())  {  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  If  (!in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    If  (!in.markSupported()  &&  in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	45	None	add
72	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
73	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  expression  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  &&  in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
74	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
75	[BUG]  [BUGGY]  if(!in.markSupported())  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())    ==    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
76	[BUG]  [BUGGY]  if(in.mark())  {  if  ((  in.mark())  ==  null  ||  in.mark())  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark())  {  if  ((  in.mark())  ==  null  ||  in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark())  {  if  ((  in.mark())  ==  null  ||  in.mark())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())    ==    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
77	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  BZIP2);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  BZIP2);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  BZIP2);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
78	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  GZIP);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
79	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
80	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(this,  DEFLATE);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(this,  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(this,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
81	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  BZIP2);  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  BZIP2);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  BZIP2);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
82	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  DEFLATE);  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE,  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
83	[BUG]  [BUGGY]  InputStream  in  =  getInputStream( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getInputStream( "UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream( "UTF-8 ");	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
84	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
85	[BUG]  [BUGGY]  InputStream  in  =  getInputStream( "US-ASCII ");  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getInputStream( "US-ASCII ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream( "US-ASCII ");	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
86	[BUG]  [BUGGY]  InputStream  in  =  getOutputStream();  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getOutputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
87	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream(in.getVersion());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
88	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream(in.getCharset());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
89	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (!in.markSupported()  &&!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    &&!in.markSupported())    {    	compilable	  [FE]  CompressorException  	12	2	replace
90	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported()  ||!in.markSupported())  {  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    &&!in.markSupported())    {    	compilable	  [FE]  CompressorException  	12	2	replace
91	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	68	2	replace
92	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported()  ||  in.markSupported())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	68	2	replace
93	[BUG]  [BUGGY]  if(!in.decompressConcatenated  ||  in.markSupported()  ||  in.markSupported())  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.decompressConcatenated  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.decompressConcatenated  ||  in.markSupported()  ||  in.markSupported())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	68	None	replace
94	[BUG]  [BUGGY]  if(!in.mark()  ||  in.mark()  ||  in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||  in.mark()  ||  in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||  in.mark()  ||  in.mark())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	68	None	replace
95	[BUG]  [BUGGY]  if(!in.markInt()  ||  in.markInt()  ||  in.markInt())  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markInt()  ||  in.markInt()  ||  in.markInt())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markInt()  ||  in.markInt()  ||  in.markInt())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
96	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(!in.markSupported()  &&  in.markSupported()  &&  in.markSupported())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  CompressorException  	68	2	replace
97	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported()  &&  in.markSupported())  {  [FE]  CompressorException  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported()  &&  in.markSupported())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  CompressorException  	68	2	replace
98	[BUG]  [BUGGY]  if(in.markMarkSupported()  ||  in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markMarkSupported()  ||  in.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported()  ||  in.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
99	[BUG]  [BUGGY]  if(in.markMarkSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markMarkSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
100	[BUG]  [BUGGY]  if(in.markMarkSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markMarkSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
101	[BUG]  [BUGGY]  if(in.markMarkSupported()  ||  in.markMarkBytes())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markMarkSupported()  ||  in.markMarkBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported()  ||  in.markMarkBytes())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
102	[BUG]  [BUGGY]  if(!in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
103	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.decompressUntilEOF)  {  [CE]  cannot  find  symbol  decompressUntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||!in.decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||!in.decompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.decompressUntilEOF)    {    	non-compiled	[CE]  cannot  find  symbol  decompressUntilEOF	1	None	replace
104	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressUntilEOF)  {  [CE]  cannot  find  symbol  decompressUntilEOF  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.decompressUntilEOF)    {    	non-compiled	[CE]  cannot  find  symbol  decompressUntilEOF	1	None	replace
105	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.decompressUntilEOF  ||  in.decompressUntilEOF)  {  [CE]  cannot  find  symbol  decompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.decompressUntilEOF  ||  in.decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.decompressUntilEOF  ||  in.decompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.decompressUntilEOF)    {    	non-compiled	[CE]  cannot  find  symbol  decompressUntilEOF	1	None	replace
106	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length  +  1))  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length  +  1))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length  +  1))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  cannot  find  symbol  signature	72	None	replace
107	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length  +  11))  {  [CE]  cannot  find  symbol  signature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length  +  11))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length  +  11))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  cannot  find  symbol  signature	72	None	replace
108	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length  +  16))  {  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length  +  16))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length  +  16))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  cannot  find  symbol  signature	72	None	replace
109	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated  +  12))  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated  +  12))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated  +  12))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
110	[BUG]  [BUGGY]  if  (in.markSupported(signature.length  +  12))  {  [CE]  cannot  find  symbol  signature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported(signature.length  +  12))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported(signature.length  +  12))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  cannot  find  symbol  signature	72	None	replace
111	[BUG]  [BUGGY]  if(in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
112	[BUG]  [BUGGY]  if(!in.mark()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
113	[BUG]  [BUGGY]  if(!in.mark()  ||!in.mark())  {  (!in.mark()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.mark())  {  (!in.mark()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.mark())  {  (!in.mark()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
114	[BUG]  [BUGGY]  if(!in.mark()  ||!in.mark())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.mark())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.mark())  {  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
115	[BUG]  [BUGGY]  InputStream  in  =  this.in.openStream();  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.openStream();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.openStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
116	[BUG]  [BUGGY]  InputStream  in  =  this.in.readIn();  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.readIn();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.readIn();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
117	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream( "UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.getInputStream( "UTF-8 ");	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
118	[BUG]  [BUGGY]  InputStream  in  =  this.in.getOutputStream();  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.getOutputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.getOutputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
119	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(true);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream(true);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.getInputStream(true);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
120	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(-1);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.getInputStream(-1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.getInputStream(-1);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
121	[BUG]  [BUGGY]  if  (!in.mark()  &&  in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  &&  in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  &&  in.mark())  {	  if    (!in.mark()    ||    in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	47	None	replace
122	[BUG]  [BUGGY]  if  (!in.mark()  ||  in.mark(signature.length))  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  ||  in.mark(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||  in.mark(signature.length))  {	  if    (!in.mark()    ||    in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	47	None	replace
123	[BUG]  [BUGGY]  if  (!in.mark()  ||  in.mark()  ||  in.mark(signature.length))  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  ||  in.mark()  ||  in.mark(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||  in.mark()  ||  in.mark(signature.length))  {	  if    (!in.mark()    ||    in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	47	None	replace
124	[BUG]  [BUGGY]  if  (!in.mark(signature.length)||  in.mark())  {  [CE]  cannot  find  symbol  signature  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark(signature.length)||  in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark(signature.length)||  in.mark())  {	  if    (!in.mark()    ||    in.mark())    {    	non-compiled	[CE]  cannot  find  symbol  signature	47	None	replace
125	[BUG]  [BUGGY]  if  (!in.mark()  ||  in.mark(signatureLength))  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  ||  in.mark(signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||  in.mark(signatureLength))  {	  if    (!in.mark()    ||    in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	47	None	replace
126	[BUG]  [BUGGY]  if(!in.markSupported())  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())!=    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
127	[BUG]  [BUGGY]  if(in.markSupported())  {  if  ((  in.markSupported())!=  null  &&  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  ((  in.markSupported())!=  null  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  if  ((  in.markSupported())!=  null  &&  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())!=    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
128	[BUG]  [BUGGY]  if(in.mark())  {  if  ((  in.mark())!=  null  ||  in.mark())  {  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark())  {  if  ((  in.mark())!=  null  ||  in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark())  {  if  ((  in.mark())!=  null  ||  in.mark())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())!=    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
129	[BUG]  [BUGGY]  if(in.mark())  {  if((  in.mark())!=  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark())  {  if((  in.mark())!=  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark())  {  if((  in.mark())!=  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())!=    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
130	[BUG]  [BUGGY]  if  (in.markSupported()  &&!in.decompressUntilEOF)  {  [CE]  cannot  find  symbol  decompressUntilEOF  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&!in.decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&!in.decompressUntilEOF)  {	  if    (in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressUntilEOF	50	None	replace
131	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&!decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (in.markSupported()  &&!decompressUntilEOF)  {	  if    (in.markSupported()    &&!in.decompressConcatenated)    {    	compilable	  [FE]  NullPointerException  	50	2	replace
132	[BUG]  [BUGGY]  if  (in.markSupported()  &&!decompressUntilEOF)  {  [FE]  NullPointerException  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&!decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&!decompressUntilEOF)  {	  if    (in.markSupported()    &&!in.decompressConcatenated)    {    	compilable	  [FE]  NullPointerException  	50	2	replace
133	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  ||!in.decompressConcatenated)  {	  if    (in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	50	None	replace
134	[BUG]  [BUGGY]  if  (in.markSupported()  &&!in.decompressAfterEOF)  {  [CE]  cannot  find  symbol  decompressAfterEOF  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&!in.decompressAfterEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&!in.decompressAfterEOF)  {	  if    (in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressAfterEOF	50	None	replace
135	[BUG]  [BUGGY]  if  (in.markSupported()  &&!in.compressUntilEOF)  {  [CE]  cannot  find  symbol  compressUntilEOF  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&!in.compressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&!in.compressUntilEOF)  {	  if    (in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  compressUntilEOF	50	None	replace
136	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported()    ||!in.markSupported())    {    if  (in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
137	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  If  (in.markSupported()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  If  (in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported()    ||!in.markSupported())    {    If  (in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	13	None	add
138	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported()    ||!in.markSupported())    {    if  (!in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
139	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (Integer.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (Integer.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported()    ||!in.markSupported())    {    if  (Integer.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
140	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  ((  in.markSupported()  ||!in.markSupported()))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  ((  in.markSupported()  ||!in.markSupported()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported()    ||!in.markSupported())    {    if  ((  in.markSupported()  ||!in.markSupported()))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
141	[BUG]  [BUGGY]  if  (in.markSupported(signature.length)||  in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported(signature.length)||  in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported(signature.length)||  in.markSupported(signature.length))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	44	None	replace
142	[BUG]  [BUGGY]  if  (in.markSupported(signatureLength))  {  [CE]  cannot  find  symbol  signatureLength  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported(signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported(signatureLength))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signatureLength	44	None	replace
143	[BUG]  [BUGGY]  if  (Integer.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (Integer.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (Integer.markSupported(signature.length))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	44	None	replace
144	[BUG]  [BUGGY]  if  (signature.markSupported(in.length))  {  [CE]  cannot  find  symbol  length  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (signature.markSupported(in.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (signature.markSupported(in.length))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  length	44	None	replace
145	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes( "UTF-8 "));  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes( "UTF-8 "));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes( "UTF-8 "));	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
146	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  DEFLATE);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  DEFLATE);	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
147	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  BZIP2);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  BZIP2);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  BZIP2);	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
148	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  1);  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  1);	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
149	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  4);  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  4);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes(),  4);	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
150	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes()  +  1);  [CE]  <identifier>  expected  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes()  +  1);	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
151	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	38	None	replace
152	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	38	None	replace
153	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	38	None	replace
154	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  BZIP2))  {  [CE]  cannot  find  symbol  Feature  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  BZIP2))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  BZIP2))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	38	None	replace
155	[BUG]  [BUGGY]  if  (!in.markSupported(signature))  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature))  {	  if    (!in.markSupported(signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  signature	31	None	replace
156	[BUG]  [BUGGY]  if  (!in.markSupported(signature,  signatureLength))  {  [CE]  cannot  find  symbol  signature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature,  signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature,  signatureLength))  {	  if    (!in.markSupported(signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  signature	31	None	replace
157	[BUG]  [BUGGY]  if  (!in.markSupported(Signature.length))  {  [CE]  cannot  find  symbol  Signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(Signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(Signature.length))  {	  if    (!in.markSupported(signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  Signature	31	None	replace
158	[BUG]  [BUGGY]  if(in.markSupported()  ||  out.markBytes())  {  [CE]  cannot  find  symbol  out  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  out.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  out.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol  out	76	None	replace
159	[BUG]  [BUGGY]  if(in.markSupported()  ||  decompressConcatenated.markBytes())  {  [CE]  boolean  cannot  be  dereferenced  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  decompressConcatenated.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  decompressConcatenated.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  boolean  cannot  be  dereferenced	76	None	replace
160	[BUG]  [BUGGY]  if(in.markSupported()  ||  Integer.markBytes())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  Integer.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  Integer.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
161	[BUG]  [BUGGY]  if(in.markSupported()  ||  is.markBytes())  {  [CE]  cannot  find  symbol  is  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  is.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  is.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol  is	76	None	replace
162	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markBytes())  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  ||  in.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
163	[BUG]  [BUGGY]  if(in.markSupported()  ||  this.markBytes())  {  [CE]  cannot  find  symbol  [FE]                    IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  this.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  this.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
164	[BUG]  [BUGGY]  if  (!in.markSupported(signature,  decompressConcatenated))  {  [CE]  cannot  find  symbol  signature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature,  decompressConcatenated))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature,  decompressConcatenated))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  signature	32	None	replace
165	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  in))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  in))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  in))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	32	None	replace
166	[BUG]  [BUGGY]  if  (!in.markSupported(in,  decompressConcatenated))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(in,  decompressConcatenated))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(in,  decompressConcatenated))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	32	None	replace
167	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  in.length))  {  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  in.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  in.length))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  length	32	None	replace
168	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  signatureLength))  {  [CE]  cannot  find  symbol  signatureLength  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  signatureLength))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  signatureLength	32	None	replace
169	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length,  decompressConcatenated))  {  [CE]  cannot  find  symbol  signature  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length,  decompressConcatenated))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length,  decompressConcatenated))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol  signature	32	None	replace
170	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  in.getCharacterEncoding()))  {  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  in.getCharacterEncoding()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  in.getCharacterEncoding()))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
171	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.readInt());  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.readInt());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamReader(in.readInt());	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
172	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamReader(in.read());	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
173	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	48	None	replace
174	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	48	None	replace
175	[BUG]  [BUGGY]  if  (!decompressConcatenated(in,  in.markSupported())||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated(in,  in.markSupported())||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated(in,  in.markSupported())||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
176	[BUG]  [BUGGY]  If  (in.markSupported())  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  If  (in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	If  (in.markSupported())  {	  if    (in.markSupported())    {    If    (in.markSupported())    {    	non-compiled	[CE]  ';'  expected	21	None	replace
177	[BUG]  [BUGGY]  If  (in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  If  (in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	If  (in.markSupported()  ||  in.markSupported())  {	  if    (in.markSupported())    {    If    (in.markSupported())    {    	non-compiled	[CE]  ';'  expected	21	None	replace
178	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
179	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
180	[BUG]  [BUGGY]  in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
181	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(this.decompressConcatenated);  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(this.decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(this.decompressConcatenated);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
182	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(decompressUntilEOF);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressUntilEOF);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
183	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(this.compressConcatenated);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(this.compressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(this.compressConcatenated);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
184	[BUG]  [BUGGY]  byte[]  signature  =  in.readUTF();  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readUTF();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readUTF();	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
185	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(signatureLength);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
186	[BUG]  [BUGGY]  byte[]  signature  =  in.readInt();  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readInt();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readInt();	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
187	[BUG]  [BUGGY]  if  (in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	39	None	replace
188	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	39	None	replace
189	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	39	None	replace
190	[BUG]  [BUGGY]  if  (!in.markSupported()  ||!in.enabled)  {  [CE]  cannot  find  symbol  enabled  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||!in.enabled)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||!in.enabled)  {	  if    (!in.markSupported()    &&!in.enabled)    {    	non-compiled	[CE]  cannot  find  symbol  enabled	51	None	replace
191	[BUG]  [BUGGY]  if  (in.markSupported()  &&!in.enabled)  {  [CE]  cannot  find  symbol  enabled  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&!in.enabled)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&!in.enabled)  {	  if    (!in.markSupported()    &&!in.enabled)    {    	non-compiled	[CE]  cannot  find  symbol  enabled	51	None	replace
192	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!enabled)  {  [CE]  cannot  find  symbol  enabled  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!enabled)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!enabled)  {	  if    (!in.markSupported()    &&!in.enabled)    {    	non-compiled	[CE]  cannot  find  symbol  enabled	51	None	replace
193	[BUG]  [BUGGY]  if(in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
194	[BUG]  [BUGGY]  if(!in.mark())  {  if(!in.mark()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark())  {  if(!in.mark()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark())  {  if(!in.mark()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
195	[BUG]  [BUGGY]  if(!in.mark())  {  if(!in.mark()  ||!in.mark())  {  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark())  {  if(!in.mark()  ||!in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark())  {  if(!in.mark()  ||!in.mark())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
196	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)&&!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)&&!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAME)&&!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	36	None	replace
197	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	36	None	replace
198	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAME)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	36	None	replace
199	[BUG]  [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)&&!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!isEnabled(Feature.QUOTE_FIELD_NAME)&&!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!isEnabled(Feature.QUOTE_FIELD_NAME)&&!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!isEnabled(Feature.QUOTE_FIELD_NAME)||!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	36	None	replace
200	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)&&!in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length)&&!in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)&&!in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	30	None	replace
201	[BUG]  [BUGGY]  if  (in.markSupported(signature.length)||!in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported(signature.length)||!in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported(signature.length)||!in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||!in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	30	None	replace
202	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	35	None	replace
203	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)&&  in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length)&&  in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)&&  in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||    in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	33	None	replace
204	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)||  in.markSupported(signatureLength))  {  [CE]  cannot  find  symbol  signature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length)||  in.markSupported(signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)||  in.markSupported(signatureLength))  {	  if    (!in.markSupported(signature.length)||    in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	33	None	replace
205	[BUG]  [BUGGY]  if  (!in.markSupported(signatureLength)||  in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signatureLength)||  in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signatureLength)||  in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||    in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signatureLength	33	None	replace
206	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    InputStream    in    =    in.getInputStream();    if(in!=    null)    {    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
207	[BUG]  [BUGGY]  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    InputStream    in    =    in.getInputStream();    if(in!=    null)    {    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
208	[BUG]  [BUGGY]  final  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  <identifier>  expected  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  final  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	final  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    InputStream    in    =    in.getInputStream();    if(in!=    null)    {    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
209	[BUG]  [BUGGY]  if(!in.mark()  ||!in.mark())  {  if(in.mark()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.mark())  {  if(in.mark()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.mark())  {  if(in.mark()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
210	[BUG]  [BUGGY]  if(!in.mark()  ||!in.mark())  {  if(in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.mark())  {  if(in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.mark())  {  if(in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
211	[BUG]  [BUGGY]  if(!in.mark()  ||!in.mark())  {  if(!in.mark()  ||!in.mark())  {  [CE]  illegal  start  of  expression  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.mark())  {  if(!in.mark()  ||!in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.mark())  {  if(!in.mark()  ||!in.mark())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!   "in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
212	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	74	None	replace
213	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAME))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	74	None	replace
214	[BUG]  [BUGGY]  if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	74	None	replace
215	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_KEY))  {  [CE]  cannot  find  symbol  Feature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_KEY))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_KEY))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	74	None	replace
216	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	73	None	replace
217	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	73	None	replace
218	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( ".UTF-8 ");  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( ".UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( ".UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
219	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes();  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes();	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
220	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "US-ASCII ");  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( "US-ASCII ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( "US-ASCII ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
221	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( ",UTF-8 ");  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( ",UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( ",UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
222	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes( "UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
223	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
224	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
225	[BUG]  [BUGGY]  if  (!decompressConcatenated(in,  in.markSupported())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated(in,  in.markSupported())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated(in,  in.markSupported())||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
226	[BUG]  [BUGGY]  if  (!markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
227	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
228	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
229	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
230	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  signatureLength))  {  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  signatureLength))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  signatureLength))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
231	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createInputStream(in);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createInputStream(in);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
232	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  0);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  0);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
233	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  DEFLATE);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
234	[BUG]  [BUGGY]  InputStream  in  =  this.createCompressorInputStream(in);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.createCompressorInputStream(in);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.createCompressorInputStream(in);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
235	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  true);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  true);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
236	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  false);  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  false);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  false);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
237	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (!in.markSupported()  &&!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
238	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  &&!in.markSupported())  {  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  &&!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    If  (!in.markSupported()  &&!in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	11	None	add
239	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (!in.markSupported()  &&!in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
240	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (in.markSupported()  &&!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (in.markSupported()  &&!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (in.markSupported()  &&!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
241	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (!in.markSupported()  ||!in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
242	[BUG]  [BUGGY]  if(in.mark()  ||  in.markSupported())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark()  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    (in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	18	None	replace
243	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenation)  {  [CE]  cannot  find  symbol  decompressConcatenation  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenation)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenation)  {	  if    (!decompressConcatenated    &&!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenation	81	None	replace
244	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenate)  {  [CE]  cannot  find  symbol  decompressConcatenate  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenate)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&!in.markSupported()  &&!in.decompressConcatenate)  {	  if    (!decompressConcatenated    &&!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenate	81	None	replace
245	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  &&!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  &&!in.decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  in.markSupported()  &&!in.decompressConcatenated)  {	  if    (!decompressConcatenated    &&!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	81	None	replace
246	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  ||!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&!in.markSupported()  ||!in.decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&!in.markSupported()  ||!in.decompressConcatenated)  {	  if    (!decompressConcatenated    &&!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	81	None	replace
247	[BUG]  [BUGGY]  if(in.markSupported()  ||  Integer.markSupported())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  Integer.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  Integer.markSupported())  {	  if    (in.markSupported())    {    if    (Integer.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
248	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in,  signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in,  signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in,  signature.length))  {	  if    (!in.markSupported(decompressConcatenated,    signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	34	None	replace
249	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  decompressUntilEOF))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  decompressUntilEOF))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  decompressUntilEOF))  {	  if    (!in.markSupported(decompressConcatenated,    signature.length))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	34	None	replace
250	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
251	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  If(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  If(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    If(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  ';'  expected	67	None	add
252	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
253	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  Integer.toHexString(in.markSupported()))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  Integer.toHexString(in.markSupported()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  in.markSupported()  ||  Integer.toHexString(in.markSupported()))  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
254	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  out.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  out.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  in.markSupported()  ||  out.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
255	[BUG]  [BUGGY]  if(!in.mark()  ||  in.mark())  {  if(!in.mark()  ||  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||  in.mark())  {  if(!in.mark()  ||  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||  in.mark())  {  if(!in.mark()  ||  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
256	[BUG]  [BUGGY]  if(in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
257	[BUG]  [BUGGY]  if(!in.mark())  {  if  (!in.mark()  ||  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark())  {  if  (!in.mark()  ||  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark())  {  if  (!in.mark()  ||  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
258	[BUG]  [BUGGY]  if(in.mark()  ==  0)  {  if  (!in.markSupported()  ||  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.mark()  ==  0)  {  if  (!in.markSupported()  ||  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.mark()  ==  0)  {  if  (!in.markSupported()  ||  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
259	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(false);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(false);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(false);	  InputStream    in    =    new    BZip2CompressorInputStream();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
260	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
261	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(BZIP2);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(BZIP2);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(BZIP2);	  InputStream    in    =    new    BZip2CompressorInputStream();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
262	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
263	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  0);  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  0);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  0);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
264	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  this.decompressConcatenated);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  this.decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  this.decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
265	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  IOUtils.readFully(in));  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  IOUtils.readFully(in));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  IOUtils.readFully(in));	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
266	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  DEFLATE);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  DEFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
267	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion()  +  1);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion()  +  1);	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
268	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  this);  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  this);	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
269	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getRawClass());  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getRawClass());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getRawClass());	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
270	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  1);  [CE]  <identifier>  expected  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  1);	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
271	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  null);  [CE]  <identifier>  expected  [FE]                                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  null);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  null);	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
272	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding()  +  1);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding()  +  1);	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
273	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  DEFLATE);  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  DEFLATE);	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
274	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  this);  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  this);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  this);	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
275	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  BZIP2);  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  BZIP2);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  BZIP2);	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
276	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getEncoding());  [CE]  <identifier>  expected  [FE]                                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getEncoding());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getEncoding());	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
277	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  1);  [CE]  <identifier>  expected  [FE]                                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  1);	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
278	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
279	[BUG]  [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&!in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
280	[BUG]  [BUGGY]  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	(!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
281	[BUG]  [BUGGY]  if(!in.mark()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
282	[BUG]  [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAMES)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAMES)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (isEnabled(Feature.QUOTE_FIELD_NAMES)||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	41	None	replace
283	[BUG]  [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	41	None	replace
284	[BUG]  [BUGGY]  if  (decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	41	None	replace
285	[BUG]  [BUGGY]  if  (!in.markSupported(str.length))  {  [CE]  cannot  find  symbol  str  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(str.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(str.length))  {	  if    (!in.markSupported(signatures.length))    {    	non-compiled	[CE]  cannot  find  symbol  str	61	None	replace
286	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (in.markSupported()  &&  in.markSupported())  {	  if    (!in.markSupported()    &&    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	46	2	replace
287	[BUG]  [BUGGY]  if  (in.markSupported()  &&  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported()  &&  in.markSupported())  {	  if    (!in.markSupported()    &&    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	46	2	replace
288	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  (in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in.markSupported())  {  if  (in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    if    (in.markSupported())    <    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    	compilable	  [FE]  IllegalArgumentException  	70	2	replace
289	[BUG]  [BUGGY]  if(in.markSupported())  {  if  (in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  (in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  if  (in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    if    (in.markSupported())    <    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    	compilable	  [FE]  IllegalArgumentException  	70	2	replace
290	[BUG]  [BUGGY]  if(in.markSupported())  {  if  (in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  (in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  if  (in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    if    (in.markSupported())    <    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
291	[BUG]  [BUGGY]  if(in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  if    (in.markSupported())    {    if    (in.markSupported())    <    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
292	[BUG]  [BUGGY]  if(in.markSupported())  {  if  (in.markSupported()  <  =  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  if  (in.markSupported()  <  =  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  if  (in.markSupported()  <  =  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    if    (in.markSupported())    <    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
293	[BUG]  [BUGGY]  If  (!in.markSupported()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  If  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	If  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    If    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
294	[BUG]  [BUGGY]  if(!in.mark()  ||!in.mark())  {  If  (!in.mark()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||!in.mark())  {  If  (!in.mark()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||!in.mark())  {  If  (!in.mark()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    If    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
295	[BUG]  [BUGGY]  if(!in.markInt()  ||!in.markInt())  {  If  (!in.markInt()  ||!in.markInt())  {  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markInt()  ||!in.markInt())  {  If  (!in.markInt()  ||!in.markInt())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markInt()  ||!in.markInt())  {  If  (!in.markInt()  ||!in.markInt())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    If    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
296	[BUG]  [BUGGY]  if(!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    If    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
297	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	80	None	replace
298	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	80	None	replace
299	[BUG]  [BUGGY]  if(!in.markSupported())  {  if(in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  if(in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  if(in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
300	[BUG]  [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&!in.markSupported())  {  if  (in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
301	[BUG]  [BUGGY]  if  (!decompressConcatenation  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  decompressConcatenation  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenation  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenation  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenation	80	None	replace
302	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  MarkerFactory.class))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  MarkerFactory.class))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  MarkerFactory.class))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	80	None	replace
303	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	38	None	replace
304	[BUG]  [BUGGY]  if  (!decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
305	[BUG]  [BUGGY]  if  (markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (markSupported(signature.length))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	44	None	replace
306	[BUG]  [BUGGY]  if  (decompressConcatenated  &  in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (decompressConcatenated  &  in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (decompressConcatenated  &  in.markSupported(signature.length))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	44	None	replace
307	[BUG]  [BUGGY]  if  (in.markSupported(signature.length)||  out.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported(signature.length)||  out.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in.markSupported(signature.length)||  out.markSupported(signature.length))  {	  if    (in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	44	None	replace
308	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  true);  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  true);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  true);	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
309	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(true));  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(true));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readBytes(true));	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
310	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELDS_NAMES))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
311	[BUG]  [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    If    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
312	[BUG]  [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  if  (!in.markSupported()  ||!   "in.markSupported())  {  [CE]  unclosed  string  literal  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  if  (!in.markSupported()  ||!   "in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||!in.markSupported())  {  if  (!in.markSupported()  ||!   "in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!   "in.markSupported())    {    	non-compiled	[CE]  unclosed  string  literal	28	None	replace
313	[BUG]  [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||!in.markSupported())  {  if  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!   "in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
314	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  Integer.MAX_VALUE))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  Integer.MAX_VALUE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  Integer.MAX_VALUE))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	32	None	replace
315	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  null))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  null))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  null))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	32	None	replace
316	[BUG]  [BUGGY]  if  (!in.markSupported(decompressConcatenated,  false))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressConcatenated,  false))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressConcatenated,  false))  {	  if    (!in.markSupported(decompressConcatenated))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	32	None	replace
317	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  markSupported()))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  markSupported()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  markSupported()))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
318	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  decompressConcatenated)  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  decompressConcatenated)  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
319	[BUG]  [BUGGY]  if  (!in.markSupported(signatures.length  +  12))  {  [CE]  cannot  find  symbol  signatures  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signatures.length  +  12))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signatures.length  +  12))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  cannot  find  symbol  signatures	72	None	replace
320	[BUG]  [BUGGY]  InputStream  in  =  this.in.read();  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.read();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.read();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
321	[BUG]  [BUGGY]  InputStream  in  =  this.in.readLine();  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  this.in.readLine();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  this.in.readLine();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
322	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.computeCompressUntilEOF)  {  [CE]  cannot  find  symbol  computeCompressUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.computeCompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.computeCompressUntilEOF)  {	  if    (!in.markSupported()    &&!in.compressUntilEOF)    {    	non-compiled	[CE]  cannot  find  symbol  computeCompressUntilEOF	52	None	replace
323	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.reset())  {  [CE]  'void'  type  not  allowed  here  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.reset())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.reset())  {	  if    (!in.markSupported()    &&!in.compressUntilEOF)    {    	non-compiled	[CE]  'void'  type  not  allowed  here	52	None	replace
324	[BUG]  [BUGGY]  if(in!=  null  ||  in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null  ||  in.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null  ||  in.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
325	[BUG]  [BUGGY]  if(in  ==  null  ||  in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||  in.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||  in.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
326	[BUG]  [BUGGY]  if(decompressConcatenated  &  in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(decompressConcatenated  &  in.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(decompressConcatenated  &  in.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
327	[BUG]  [BUGGY]  if(in.markMarkSupported()  ||  decompressConcatenated)  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markMarkSupported()  ||  decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported()  ||  decompressConcatenated)  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
328	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  decompressConcatenated)  {  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  decompressConcatenated)  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
329	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	65	None	replace
330	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(DEFLATE);  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream(DEFLATE);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
331	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in);  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getInputStream(in);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getInputStream(in);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
332	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||!in.markSupported()  ||!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||!in.markSupported()  ||!in.decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||!in.markSupported()  ||!in.decompressConcatenated)  {	  if    (!in.markSupported()    ||!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	2	None	replace
333	[BUG]  [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  (!in.markSupported()  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
334	[BUG]  [BUGGY]  if(in!=  null  ||  in.markSupported()  ||  in.markBytes())  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null  ||  in.markSupported()  ||  in.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null  ||  in.markSupported()  ||  in.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
335	[BUG]  [BUGGY]  if(in  ==  null  ||  in.markSupported()  ||  in.markBytes())  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||  in.markSupported()  ||  in.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||  in.markSupported()  ||  in.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
336	[BUG]  [BUGGY]  if(in.markSupported()  ||  decompressUntilEOF.markBytes())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  decompressUntilEOF.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  decompressUntilEOF.markBytes())  {	  if(in.markSupported()    ||    in.markBytes())    {    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
337	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  decompressUntilEOF  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  decompressUntilEOF  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  decompressUntilEOF  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
338	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes( "US-ASCII "));  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes( "US-ASCII "));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes( "US-ASCII "));	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
339	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
340	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  ||  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
341	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  im.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
342	[BUG]  [BUGGY]  if(in!=  null)  {  if  (Integer.markSupported())  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  if  (Integer.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  if  (Integer.markSupported())  {	  if    (in.markSupported())    {    if    (Integer.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
343	[BUG]  [BUGGY]  if(in  ==  null)  {  if  (in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  (in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  (in.markSupported())  {	  if    (in.markSupported())    {    if    (Integer.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
344	[BUG]  [BUGGY]  if(in!=  null)  {  if  (in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  if  (in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  if  (in.markSupported())  {	  if    (in.markSupported())    {    if    (Integer.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
345	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in  ==  null)  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  CompressorException  	26	2	replace
346	[BUG]  [BUGGY]  if(in  ==  null)  {  [FE]  CompressorException  [FE]        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  CompressorException  	26	2	replace
347	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in!=  null)  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	26	2	replace
348	[BUG]  [BUGGY]  if(in!=  null)  {  [FE]  IllegalArgumentException  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	26	2	replace
349	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.enabled())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  in.enabled())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  in.enabled())  {	  if    (!in.markSupported()    ||    in.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
350	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  out.isEnabled())  {  [CE]  cannot  find  symbol  out  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  out.isEnabled())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  out.isEnabled())  {	  if    (!in.markSupported()    ||    in.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol  out	64	None	replace
351	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  in.equals(this.markSupported()))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  in.equals(this.markSupported()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  in.equals(this.markSupported()))  {	  if    (!in.markSupported()    ||    in.isEnabled())    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
352	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  out.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  out.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  out.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
353	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in  ==  null  ||  in.markSupported()  ||  in.markSupported())  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
354	[BUG]  [BUGGY]  if(in  ==  null  ||  in.markSupported()  ||  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||  in.markSupported()  ||  in.markSupported())  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
355	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in!=  null  ||  in.markSupported()  ||  in.markSupported())  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
356	[BUG]  [BUGGY]  if(in!=  null  ||  in.markSupported()  ||  in.markSupported())  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null  ||  in.markSupported()  ||  in.markSupported())  {	  if(in.markSupported()    ||    in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
357	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)||  decompressUntilEOF.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length)||  decompressUntilEOF.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)||  decompressUntilEOF.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||    in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	33	None	replace
358	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)||  out.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length)||  out.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)||  out.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||    in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	33	None	replace
359	[BUG]  [BUGGY]  if(in!=  null)  {  if  (!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  if  (!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  if  (!in.markSupported())  {	  if    (in.markSupported())    {    if    (!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
360	[BUG]  [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  (!in.markSupported())  {	  if    (in.markSupported())    {    if    (!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
361	[BUG]  [BUGGY]  if(in.markInt())  {  if  (!in.markInt())  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markInt())  {  if  (!in.markInt())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markInt())  {  if  (!in.markInt())  {	  if    (in.markSupported())    {    if    (!in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
362	[BUG]  [BUGGY]  if  (!ins.markSupported()  &&!in.enabled)  {  [CE]  cannot  find  symbol  ins  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!ins.markSupported()  &&!in.enabled)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!ins.markSupported()  &&!in.enabled)  {	  if    (!in.markSupported()    &&!in.enabled)    {    	non-compiled	[CE]  cannot  find  symbol  ins	51	None	replace
363	[BUG]  [BUGGY]  if  (!in.markSupported(signature,  null))  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature,  null))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature,  null))  {	  if    (!in.markSupported(signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  signature	31	None	replace
364	[BUG]  [BUGGY]  if  (!in.markSupported(signatureString))  {  [CE]  cannot  find  symbol  signatureString  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signatureString))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signatureString))  {	  if    (!in.markSupported(signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  signatureString	31	None	replace
365	[BUG]  [BUGGY]  if(in.markFinal())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markFinal())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markFinal())  {	  if    (in.markSupported())    {    if    (in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
366	[BUG]  [BUGGY]  if  (!in.mark()  ||!in.mark(signature.length))  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.mark()  ||!in.mark(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.mark()  ||!in.mark(signature.length))  {	  if    (!in.mark()    ||!in.mark())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	15	None	replace
367	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  decompressConcatenated);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
368	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  this.decompressConcatenated);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  this.decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  this.decompressConcatenated);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
369	[BUG]  [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  BZip2CompressorInputStream);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createCompressorInputStream(in,  BZip2CompressorInputStream);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createCompressorInputStream(in,  BZip2CompressorInputStream);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
370	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  decompressConcatenated);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  decompressConcatenated);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  decompressConcatenated);	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
371	[BUG]  [BUGGY]  if  (!decompressConcatenation  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  decompressConcatenation  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenation  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenation  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenation	73	None	replace
372	[BUG]  [BUGGY]  in.close();  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  in.close();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in.close();	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
373	[BUG]  [BUGGY]  in.defaultInput();  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  in.defaultInput();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in.defaultInput();	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
374	[BUG]  [BUGGY]  in.decompressConcatenated();  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  in.decompressConcatenated();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in.decompressConcatenated();	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
375	[BUG]  [BUGGY]  in.defaultWrite();  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  in.defaultWrite();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	in.defaultWrite();	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
376	[BUG]  [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
377	[BUG]  [BUGGY]  if(in!=  null)  {  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  if  (!in.markSupported()  ||!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
378	[BUG]  [BUGGY]  if(!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [CE]  not  a  statement  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
379	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").toByteArray();  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").toByteArray();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ").toByteArray();	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
380	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").replace('n',  'r');  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-8 ").replace('n',  'r');  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( "UTF-8 ").replace('n',  'r');	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
381	[BUG]  [BUGGY]  byte[]  signature  =  this.in.getBytes( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  this.in.getBytes( "UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  this.in.getBytes( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
382	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE);	  InputStream    in    =    new    BZip2CompressorInputStream();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
383	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(true);  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(true);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(true);	  InputStream    in    =    new    BZip2CompressorInputStream();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
384	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
385	[BUG]  [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  (!in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  (!in.markSupported()  ||  in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
386	[BUG]  [BUGGY]  if(in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
387	[BUG]  [BUGGY]  if  (!in.markSupported(decompressUntilEOF))  {  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(decompressUntilEOF))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(decompressUntilEOF))  {	  if    (!in.markSupported(signatures.length))    {    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	61	None	replace
388	[BUG]  [BUGGY]  if  (markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
389	[BUG]  [BUGGY]  if  (markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
390	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_RANGE))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_RANGE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_RANGE))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	39	None	replace
391	[BUG]  [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (in.markSupported()  ||! "in.markSupported())  {  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in.markSupported()  ||!in.markSupported())  {  if  (in.markSupported()  ||! "in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (in.markSupported()    ||!in.markSupported())    {    if  (in.markSupported()  ||! "in.markSupported())  {	  	non-compiled	[CE]  unclosed  string  literal	13	None	add
392	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  BZIP2);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  BZIP2);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  BZIP2);	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
393	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "US-ASCII "));  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "US-ASCII "));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "US-ASCII "));	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
394	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes()  +  1);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes()  +  1);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes()  +  1);	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
395	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  DEFLATE);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  DEFLATE);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes(),  DEFLATE);	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
396	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  out.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  out.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  &&  out.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
397	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  (!in.markSupported()  &&  in.markSupported())  {  [CE]  not  a  statement  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  (!in.markSupported()  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    (!in.markSupported()  &&  in.markSupported())  {	  	non-compiled	[CE]  not  a  statement	45	None	add
398	[BUG]  [BUGGY]  if(in  ==  null)  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())    ==    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
399	[BUG]  [BUGGY]  if(in!=  null)  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())    ==    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
400	[BUG]  [BUGGY]  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  ((  in.markSupported())  ==  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())    ==    null    ||    in.markSupported())    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	20	None	replace
401	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  decompressUntilEOF  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  decompressUntilEOF  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  decompressUntilEOF  &&  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	48	None	replace
402	[BUG]  [BUGGY]  if(in  ==  null)  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null)  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null)  {  if  ((  in.markSupported())!=  null  ||  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())!=    null    ||    in.markSupported())    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
403	[BUG]  [BUGGY]  if  (!decompressUntilEOF  &&!in.markSupported()  &&!in.decompressConcatenated)  {  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressUntilEOF  &&!in.markSupported()  &&!in.decompressConcatenated)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressUntilEOF  &&!in.markSupported()  &&!in.decompressConcatenated)  {	  if    (!decompressConcatenated    &&!in.markSupported()    &&!in.decompressConcatenated)    {    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	81	None	replace
404	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getMethod());  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getMethod());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getMethod());	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
405	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharset());  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharset());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharset());	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
406	[BUG]  [BUGGY]  if(!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
407	[BUG]  [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&  in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&  in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
408	[BUG]  [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  &&!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
409	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported()  ||(in.markSupported()))  {  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported()  ||(in.markSupported()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (!in.markSupported()  &&!in.markSupported()  ||(in.markSupported()))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
410	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(in.markSupported()  ||  out.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  if(in.markSupported()  ||  out.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()    ||    in.markSupported())    {    if(in.markSupported()  ||  out.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
411	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length  +  12))  {  [CE]  cannot  find  symbol  signature  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length  +  12))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature.length  +  12))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	71	None	replace
412	[BUG]  [BUGGY]  if  (markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
413	[BUG]  [BUGGY]  if  (markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
414	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  length))  {  [CE]  cannot  find  symbol  signature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature,  length))  {	  if    (!in.markSupported(decompressConcatenated,    signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	34	None	replace
415	[BUG]  [BUGGY]  if(!in.markSupported())  {  If  (in.markSupported())  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  If  (in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  If  (in.markSupported())  {	  if    (in.markSupported())    {    If    (in.markSupported())    {    	non-compiled	[CE]  ';'  expected	21	None	replace
416	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	35	None	replace
417	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(compressUntilEOF);  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(compressUntilEOF);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(compressUntilEOF);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
418	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressUntilEOF);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  decompressUntilEOF);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
419	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(compressConcatenated,  decompressUntilEOF);  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(compressConcatenated,  decompressUntilEOF);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(compressConcatenated,  decompressUntilEOF);	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
420	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in!=  null  ||  in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if  (in!=  null  ||  in.markSupported()  ||!in.markSupported())  {	  if    (in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
421	[BUG]  [BUGGY]  if  (in!=  null  ||  in.markSupported()  ||!in.markSupported())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (in!=  null  ||  in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (in!=  null  ||  in.markSupported()  ||!in.markSupported())  {	  if    (in.markSupported()    ||!in.markSupported())    {    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
422	[BUG]  [BUGGY]  if((  in.markSupported())!=  null  &&  in.markSupported())  {  [CE]  incomparable  types:  boolean  and  <null>  [FE]                    IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if((  in.markSupported())!=  null  &&  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if((  in.markSupported())!=  null  &&  in.markSupported())  {	  if    (in.markSupported())    {    if    ((    in.markSupported())!=    null    ||    in.markSupported())    {    	non-compiled	[CE]  incomparable  types:  boolean  and  <null>	22	None	replace
423	[BUG]  [BUGGY]  if  ((  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  ((  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  ((  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
424	[BUG]  [BUGGY]  if(in.markBytes())  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markBytes())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markBytes())  {	  if    (in.markSupported())    {    if    (in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
425	[BUG]  [BUGGY]  if(in.markInt()  ||  in.markInt())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markInt()  ||  in.markInt())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markInt()  ||  in.markInt())  {	  if    (in.markSupported())    {    if    (in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
426	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	add	if(in  ==  null  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!   "in.markSupported())    {    	compilable	  [FE]  CompressorException  	28	2	replace
427	[BUG]  [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    if    (!in.markSupported()    ||!   "in.markSupported())    {    	compilable	  [FE]  CompressorException  	28	2	replace
428	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");	  if    (in.markSupported())    {    if    (in.markSupported())    <    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
429	[BUG]  [BUGGY]  if  (!in.markSupported(signatureNumber))  {  [CE]  cannot  find  symbol  signatureNumber  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signatureNumber))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signatureNumber))  {	  if    (!in.markSupported(signatureLength))    {    	non-compiled	[CE]  cannot  find  symbol  signatureNumber	31	None	replace
430	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	73	None	replace
431	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  areEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  areEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  areEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	73	None	replace
432	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.WRITE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.WRITE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.WRITE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	73	None	replace
433	[BUG]  [BUGGY]  if  (!enabled.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [CE]  cannot  find  symbol  enabled  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!enabled.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!enabled.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  DEFLATE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    DEFLATE))    {    	non-compiled	[CE]  cannot  find  symbol  enabled	38	None	replace
434	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_RANGE))  {  [CE]  cannot  find  symbol  Feature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_RANGE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS_RANGE))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	74	None	replace
435	[BUG]  [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELDS))  {	  if    (!in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELDS_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	74	None	replace
436	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  decompressUntilEOF  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
437	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
438	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [CE]  cannot  find  symbol  Feature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  DEFLATE))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	62	None	replace
439	[BUG]  [BUGGY]  if(in!=  null  &&  in.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null  &&  in.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null  &&  in.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
440	[BUG]  [BUGGY]  if(Integer.parseInt(in.markMarkSupported()))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(Integer.parseInt(in.markMarkSupported()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(Integer.parseInt(in.markMarkSupported()))  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
441	[BUG]  [BUGGY]  if(in.markMarkSupported()  ||  out.markMarkSupported())  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markMarkSupported()  ||  out.markMarkSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markMarkSupported()  ||  out.markMarkSupported())  {	  if(in.markMarkSupported())    {    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
442	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  in.getCharacterEncoding());  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  in.getCharacterEncoding());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharacterEncoding(),  in.getCharacterEncoding());	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
443	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getMarkerEncoding());  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getMarkerEncoding());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getMarkerEncoding());	  InputStream    in    =    new    InputStreamInputStream(in.getCharacterEncoding());    	non-compiled	[CE]  <identifier>  expected	9	None	replace
444	[BUG]  [BUGGY]  if(in!=  null)  {  in.defaultRead();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  in.defaultRead();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  in.defaultRead();  }  else  {  throw  new  CompressorException( "Mark  is  not  supported. ");  }	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
445	[BUG]  [BUGGY]  if(in!=  null)  {  in.defaultRead();  }  else  {  in.close();  }  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  in.defaultRead();  }  else  {  in.close();  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  in.defaultRead();  }  else  {  in.close();  }	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
446	[BUG]  [BUGGY]  if(in!=  null)  {  in.defaultRead();  }  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in!=  null)  {  in.defaultRead();  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in!=  null)  {  in.defaultRead();  }	  in.defaultRead();    	non-compiled	[CE]  <identifier>  expected	79	None	replace
447	[BUG]  [BUGGY]  if(!in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported())  {  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  not  a  statement	25	None	replace
448	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readUTF());  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readUTF());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readUTF());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
449	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacterIndex());  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacterIndex());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacterIndex());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
450	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacters());  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacters());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.getCharacters());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
451	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readCharacters());  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readCharacters());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.readBytes(decompressConcatenated,  in.readCharacters());	  byte[]    signature    =    in.readBytes(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	78	None	replace
452	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  Integer.markSupported())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSupported()  ||  in.markSupported()  ||  Integer.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSupported()  ||  in.markSupported()  ||  Integer.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
453	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSUPported()  ||  in.markSupported()  ||  in.markSupported())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.markSupported())  {  if(!in.markSUPported()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    if(!in.markSUPported()  ||  in.markSupported()  ||  in.markSupported())  {	  	non-compiled	[CE]  illegal  start  of  expression	67	None	add
454	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported()  >  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported()  >  0)  {	  if(in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	43	None	replace
455	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported()  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported()  <  0)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported()  <  0)  {	  if(in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	43	None	replace
456	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  Feature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  decompressUntilEOF  ||  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	48	None	replace
457	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  decompressUntilEOF.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!decompressConcatenated    ||    in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
458	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-16 ");  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.getBytes( "UTF-16 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.getBytes( "UTF-16 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
459	[BUG]  [BUGGY]  byte[]  signature  =  in.read( "UTF-8 ");  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  byte[]  signature  =  in.read( "UTF-8 ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	byte[]  signature  =  in.read( "UTF-8 ");	  byte[]    signature    =    in.getBytes(   "UTF-8   ");    	non-compiled	[CE]  <identifier>  expected	56	None	replace
460	[BUG]  [BUGGY]  InputStream  in  =  createInputStream();  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  createInputStream();  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  createInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
461	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature,  signature.length))  {	  if    (!in.markSupported(decompressConcatenated,    signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	34	None	replace
462	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  in.length))  {  [CE]  cannot  find  symbol  signature  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  in.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature,  in.length))  {	  if    (!in.markSupported(decompressConcatenated,    signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	34	None	replace
463	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  null))  {  [CE]  cannot  find  symbol  signature  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature,  null))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature,  null))  {	  if    (!in.markSupported(decompressConcatenated,    signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	34	None	replace
464	[BUG]  [BUGGY]  if(Integer.markSupported(signature))  {  [CE]  cannot  find  symbol  signature  [FE]              IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(Integer.markSupported(signature))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(Integer.markSupported(signature))  {	  if    (in.markSupported())    {    if    (Integer.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  signature	19	None	replace
465	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "ISO-8859-1 "));  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "ISO-8859-1 "));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes( "ISO-8859-1 "));	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
466	[BUG]  [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(decompressConcatenated));  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  ByteArrayInputStream(in.getBytes(decompressConcatenated));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  ByteArrayInputStream(in.getBytes(decompressConcatenated));	  InputStream    in    =    new    ByteArrayInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	6	None	replace
467	[BUG]  [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME),  decompressUntilEOF)  {  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME),  decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  ||  isEnabled(Feature.QUOTE_FIELD_NAME),  decompressUntilEOF)  {	  if    (!decompressConcatenated    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  ')'  expected	80	None	replace
468	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  in.readUTF());  [CE]  <identifier>  expected  [FE]                              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  in.readUTF());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getVersion(),  in.readUTF());	  InputStream    in    =    new    InputStreamInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	7	None	replace
469	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!inEnabled)  {  [CE]  cannot  find  symbol  inEnabled  [FE]              CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!inEnabled)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!inEnabled)  {	  if    (!in.markSupported()    &&!in.enabled)    {    	non-compiled	[CE]  cannot  find  symbol  inEnabled	51	None	replace
470	[BUG]  [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [CE]  ';'  expected  [FE]          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||!in.markSupported())  {  If  (!in.markSupported()  ||!in.markSupported())  {	  if    (!in.markSupported()    ||!in.markSupported())    {    If    (!in.markSupported()    ||!in.markSupported())    {    	non-compiled	[CE]  ';'  expected	27	None	replace
471	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(decompressConcatenated));  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(decompressConcatenated));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readBytes(decompressConcatenated));	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
472	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(),  in.readBytes());  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(),  in.readBytes());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readBytes(),  in.readBytes());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
473	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(),  in.readUTF());  [CE]  <identifier>  expected  [FE]                                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.readBytes(),  in.readUTF());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.readBytes(),  in.readUTF());	  InputStream    in    =    new    InputStreamInputStream(in.readBytes());    	non-compiled	[CE]  <identifier>  expected	10	None	replace
474	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.decompressMethod)  {  [CE]  cannot  find  symbol  decompressMethod  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.decompressMethod)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.decompressMethod)  {	  if    (!in.markSupported()    &&!in.decompressAfterEOF)    {    	non-compiled	[CE]  cannot  find  symbol  decompressMethod	3	None	replace
475	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported()  ||  in.markSupported())  {  InputStream  in  =  in.getInputStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    InputStream    in    =    in.getInputStream();    if(in!=    null)    {    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	replace
476	[BUG]  [BUGGY]  if(in.markSupported())  {  InputStream  in  =  in.readStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.markSupported())  {  InputStream  in  =  in.readStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.markSupported())  {  InputStream  in  =  in.readStream();  if(in!=  null)  {  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  if    (in.markSupported())    {    InputStream    in    =    in.getInputStream();    if(in!=    null)    {    throw    new    IllegalArgumentException(   "Mark    is    not    supported.       ");    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	69	None	replace
477	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  type  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  &&  in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  	non-compiled	[CE]  illegal  start  of  type	45	None	add
478	[BUG]  [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  ==  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&  in.markSupported())  {  if  (!in.markSupported()  &&  in.markSupported())  ==  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&    in.markSupported())    {    if  (!in.markSupported()  &&  in.markSupported())  ==  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  }	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
479	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length)-  in.markSupported(signature.length))  {  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length)-  in.markSupported(signature.length))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length)-  in.markSupported(signature.length))  {	  if    (!in.markSupported(signature.length)||    in.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	33	None	replace
480	[BUG]  [BUGGY]  if(!in.mark())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	66	None	replace
481	[BUG]  [BUGGY]  if(!in.markSupported()  ||  im.markSupported())  {  [CE]  cannot  find  symbol  im  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  im.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  ||  im.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    im.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  im	66	None	replace
482	[BUG]  [BUGGY]  if(!in.mark()  ||  in.markSupported()  ||  in.markSupported())  {  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.mark()  ||  in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.mark()  ||  in.markSupported()  ||  in.markSupported())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	68	None	replace
483	[BUG]  [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.reset())  {  [CE]  'void'  type  not  allowed  here  [FE]      IllegalArgumentException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(!in.markSupported()  ||  in.markSupported()  ||  in.reset())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(!in.markSupported()  ||  in.markSupported()  ||  in.reset())  {	  if(!in.markSupported()    ||    in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  'void'  type  not  allowed  here	68	None	replace
484	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  type  [FE]    CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (!in.markSupported()  &&!in.markSupported())  <  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
485	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.markSupported())  {  if  (!in.markSupported()  &&!in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if    (!in.markSupported()    &&!in.markSupported())    {    if  (!in.markSupported()  &&!in.markSupported())  throw  new  IllegalArgumentException( "Mark  is  not  supported.   ");	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
486	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.readLine());  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.readLine());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.readLine());	  InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	55	None	replace
487	[BUG]  [BUGGY]  InputStream  in  =  getCompressorInputStream(in);  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  getCompressorInputStream(in);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  getCompressorInputStream(in);	  InputStream    in    =    createCompressorInputStream(in);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
488	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(this);  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(this);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(this);	  InputStream    in    =    new    BZip2CompressorInputStream();    	non-compiled	[CE]  <identifier>  expected	59	None	replace
489	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(decompressConcatenated));  [CE]  <identifier>  expected  [FE]                                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(decompressConcatenated));  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes(decompressConcatenated));	  InputStream    in    =    new    InputStreamInputStream(in.getBytes());    	non-compiled	[CE]  <identifier>  expected	8	None	replace
490	[BUG]  [BUGGY]  if  ((  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  ((  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  ((  in.markSupported()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (in.markSupported()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  ')'  expected	41	None	replace
491	[BUG]  [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if    (!markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
492	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length),  decompressUntilEOF)  {  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length),  decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature.length),  decompressUntilEOF)  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  ')'  expected	71	None	replace
493	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length)||  decompressUntilEOF)  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length)||  decompressUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature.length)||  decompressUntilEOF)  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	71	None	replace
494	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(in.mark(signature.length)))  {  [CE]  cannot  find  symbol  signature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(in.mark(signature.length)))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(in.mark(signature.length)))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	71	None	replace
495	[BUG]  [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length,  12))  {  [CE]  cannot  find  symbol  signature  [FE]                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated.markSupported(signature.length,  12))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated.markSupported(signature.length,  12))  {	  if    (!decompressConcatenated.markSupported(signature.length))    {    	non-compiled	[CE]  cannot  find  symbol  signature	71	None	replace
496	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [CE]  <identifier>  expected  [FE]                        CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in);	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
497	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in.readLine());  [CE]  <identifier>  expected  [FE]                          CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in.readLine());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  in.readLine());	  InputStream    in    =    new    BZip2CompressorInputStream(decompressConcatenated);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
498	[BUG]  [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in  ==  null  ||!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in  ==  null  ||!in.markSupported())  {  If  (!in.markSupported()  ||  in.markSupported())  {	  if    (!in.markSupported()    ||    in.markSupported())    {    If    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  ';'  expected	24	None	replace
499	[BUG]  [BUGGY]  if  (!in.markSupported()  &&!in.compressedUntilEOF)  {  [CE]  cannot  find  symbol  compressedUntilEOF  [FE]                CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported()  &&!in.compressedUntilEOF)  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported()  &&!in.compressedUntilEOF)  {	  if    (!in.markSupported()    &&!in.compressUntilEOF)    {    	non-compiled	[CE]  cannot  find  symbol  compressedUntilEOF	52	None	replace
500	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  in.getCharset());  [CE]  <identifier>  expected  [FE]                                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  in.getCharset());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  in.getCharset());	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
501	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  in.readUTF());  [CE]  <identifier>  expected  [FE]                                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  in.readUTF());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getVersion(),  in.readUTF());	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
502	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.read());  [CE]  <identifier>  expected  [FE]                                      CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.read());  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.read());	  InputStream    in    =    new    BZip2CompressorInputStream(in.getVersion());    	non-compiled	[CE]  <identifier>  expected	60	None	replace
503	[BUG]  [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]                    CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!decompressConcatenated  &&  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!decompressConcatenated  &&  in.markSupported()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  cannot  find  symbol  Feature	39	None	replace
504	[BUG]  [BUGGY]  if  (!in.markSupported(signature.length  +  13))  {  [CE]  cannot  find  symbol  signature  [FE]                  CompressorException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if  (!in.markSupported(signature.length  +  13))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if  (!in.markSupported(signature.length  +  13))  {	  if    (!in.markSupported(signature.length    +    12))    {    	non-compiled	[CE]  cannot  find  symbol  signature	72	None	replace
505	[BUG]  [BUGGY]  if(in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]        IllegalArgumentException      [CONTEXT]      throws  CompressorException  {  if  (in  ==  null)  {  throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }      [BUGGY]  if(in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	210	210	2	replace	if(in.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if    (!in.markSupported()    ||    in.markSupported())    {    if    (!in.markSupported()    ||    in.markSupported())    {    	non-compiled	[CE]  cannot  find  symbol  Feature	23	None	replace
