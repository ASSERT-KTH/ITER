projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.reset();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DECOMPRESSION);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSupported(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skipChildren();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readInt();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.flush();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.flush();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,BZIP.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Float.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=createInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.setSuppressed(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature.length,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-3);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSupported();in.decompressConcatenated();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSupported();in.decompressConcatenated();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSupported();in.decompressConcatenated();}else{System.arraycopy(signature,0,signatureLength,in.markSupported());}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.markSupported();in.decompressConcatenated();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,DEFLATE);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=getInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.close();InputStreamin=getInputStream(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,Boolean.TRUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,0,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,Boolean.TRUE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,Boolean.TRUE,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218intsignatureLength=in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.markSupported();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.setSupported();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.markSupported();in.mark(SignatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.mark();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompress();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.reset();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressUntilEOF,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressUntilEOF,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressUntilEOF,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressUntilEOF,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();}elseif(in.markLength<2){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();}elseif(in.markLength>12){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength!=2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength>=2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength>>2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength==2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength[Delete]2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength[BUGGY]2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);in.mark(signatureLength+1);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);in.mark(signatureLength+1);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);in.mark(signatureLength+1);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);in.mark(signatureLength+1);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,signature.length-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,signature.length+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength!=0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(SignatureLength==0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength>=0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){InputStreamin=newInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){InputStreamin=newInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}If(signatureLength==0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Long.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(float.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in==null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,32-signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,32).getBytes();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,31);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,32).returnNull();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MIN_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.set(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.add(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signature.length,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.add(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signatureLength,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signatureLength,Boolean.TRUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Integer.parseInt(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Integer.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signatureLength),Integer.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toString(signature.length),Integer.toString(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signatureLength+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue(),Boolean.FALSE));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue(),Boolean.TRUE),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}in.mark(signatureLength);if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218while(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readFully();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,in.read());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readFully(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readInt();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("",signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DEFLATE?DEFLATE:DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:DFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:INVALID);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(decompressConcatenated,signatureLength?DEFLATE:DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),true);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),false,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),false,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),false,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue(),Boolean.TRUE));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Integer.parseInt(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.length),Integer.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length+2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,BZIP2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,3);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>12){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("...");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}else{System.arraycopy(signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){system.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){in.close();}else{System.arraycopy(Signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}else{System.arraycopy(signature,0,signature
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=this.in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in.mark(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(in!=null){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(Integer.markSupported()){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}If(in.markSupported()){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){in.close();}else{InputStreamin=newInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,signatureLength);}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Boolean.parseBoolean(in.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in,signature.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signature.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read(signature.length);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read(signature.length);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();byte[]signature=in.read(signature.length);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();byte[]signature=in.read(signature.length);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseBoolean(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.parseBoolean(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=IOUtils.readFully(in,signature);in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=IOUtils.readFully(in,signatureLength);in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=in.readBytes(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=in.read(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=IOUtils.readFully(in,signature).toByteArray();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.defaultReader().write(signature,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.mark(signatureLength);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.mark(SignatureLength);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.reset(signatureLength);in.reset(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.mark(signatureLength);in.mark(SignatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.set(signatureLength);in.set(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);byte[]signature=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||signatureLength<2){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.add(signatureLength,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,in.mark(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,in.mark(signature.length),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length-1),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,decompressUntilEOF)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength,decompressUntilEOF);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);in.skip(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);in.skip(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);in.skip(signatureLength);}elseif(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);in.skip(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);in.skip(signatureLength);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);in.skip(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in!=null){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in!=null){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}If(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}while(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}if(in.markSupported()){out.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2Compressor.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.markSupported();in.mark(signatureLength);if(GzipCompressorInputStream.matches(signature,signatureLength)){returnnewGzipCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,in.length,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signatureLength),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,Boolean.valueOf(signatureLength),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length-1),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength-2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(Integer.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.mark(signatureLength);}else{in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);}else{in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readFully(signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DEFLATE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,BZIP2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DEFLATE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);in.mark(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);in.mark(signatureLength+11);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);in.mark(signatureLength+11);}elseif(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);in.mark(signatureLength+11);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);in.mark(signatureLength+11);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);in.mark(signatureLength+11);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSuppressed();in.setSuppressed(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.setSuppressed(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.setSuppressed(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSuppressed();in.setSuppressed(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.setSuppressed(signatureLength);}else{in.markSuppressed();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength>=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength>=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength>=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.flush();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength/12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+16);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218System.arraycopy(signature,0,signature,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}else{System.arraycopy(signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){for(inti=0;i<signatureLength;i++){System.arraycopy(signature,0,signature,i);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}in.read();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}in.read();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength,2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in==null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);in.mark(signatureLength-1);returnnewBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);InputStreamin.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signature=IOUtils.readFully(in,signature);in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signature=IOUtils.readFully(in,signatureLength-1);in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signature=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);in.mark(signatureLength-1);}else{in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature.length,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signature.length,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.markSupported();in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcaten
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,PACK200);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.read(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength,12);byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.read();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length)/2,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.close();in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.mark(signatureLength);in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.flush();in.flush();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.flush();in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.read();in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.mark(signature.length);in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();InputStreamin=getInputStream();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toString(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in==null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,6);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,3);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,0,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signatureLength),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signatureLength),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=this.in.readInt();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readUTF();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readInt(),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readInt()-1;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readInt(),signatureLength;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readInt()&0xff;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressCon
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+3);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+6);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Boolean.valueOf(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Boolean.valueOf(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature.length,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signature.length,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length+2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length*1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature);byte[]signatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-3);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,Integer.MAX_VALUE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,DECOMPRESSION);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in.read());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamReader(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultInput();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){in.skipChildren();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){in.skipChildren();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){thrownewIllegalArgumentException("");}else{in.skipChildren();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){in.skipChildren();}else{System.arraycopy(signature,0,signatureLength,in.length);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.getInputStream();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),DEFLATE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),DEFLATE,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.getBytes(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength,12);byte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218finalbyte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218StringsignatureLength=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Integer.MAX_VALUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length,12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length-12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength/12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength,12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength-12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(Integer.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(0));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.DEFAULT);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218StringsignatureLength=IOUtils.readFully(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in==null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length-2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length-1),Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>=0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+6);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompress(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompress(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=in.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompress(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.set(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,decompressConcatenated,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218finalbyte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,0,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,String.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,100,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,in.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218finalbyte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218finalbyte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}in.close();if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}in.mark(signatureLength);if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}in.read();if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){in.close();if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}in.flush();if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{returnnewCompressorInputStream(signature,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,SignatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{returnnewComppressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);in.mark(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);in.mark(signatureLength+12);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);in.mark(signatureLength+12);}elseif(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);in.mark(signatureLength+12);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);in.mark(signatureLength+12);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);in.mark(signatureLength+12);}elseif(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=newbyte[12];
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),true);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,BZIP.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,BZIP.valueOf(in.getBooleanValue()),BZIP);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressCon
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcaten
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.toHexString(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Integer.toHexString(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=Integer.MIN_VALUE){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=Integer.MAX_VALUE){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressConcatenated,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressConcatenated,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureL
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signature
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();byte[]signature=in.read(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();byte[]signature=in.read(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.close();byte[]signature=in.read(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.set(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,UntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=createInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=createInputStream(in,DEFLATE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=createInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=createInputStream(in,DEFLATE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=createInputStream(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toString(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Long.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressUntilEOF,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressUntilEOF,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=Boolean.valueOf(signatureLength)<0;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue(),decompressConcatenated));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature.length,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature.length-1,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.flush();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature.length,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(deFLATE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSupported(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSupported(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSupported(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSupported(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.setSupported(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream(signatureLength);if(in==null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signatureLength),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,in.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(in,0,signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength/11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,DEFLATE-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length-2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature.length,Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}elseif(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();}elseif(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read();}else{returnnewbyte[12];}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read();}else{System.arraycopy(signature,0,signature,1,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcaten
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressCon
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();in.read();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer[]signatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=IOUtils.readFully(in,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218StringsignatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,in.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(signatureLength,in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integersignature=in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),DEFLATE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),DEFLATE,e);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length-1),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skipBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),true);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue(),false));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength,Integer.MIN_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength,Integer.MAX_VALUE+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength,Integer.MAX_VALUE-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength,Integer.MAX_VALUE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){in.mark(signatureLength);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,in.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,in.length,Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signatureLength,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE+1,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218while(in.markSupported()){if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218while(in.markSupported()){if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.FALSE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.FALSE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.FALSE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue(),false),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218finalbyte[]signatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218StringsignatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength,DEFLATE);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength,BZIP2);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(decompressConcatenated,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){in.close();}else{returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(!in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in,signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in.getCharset());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamReader(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signatureLength),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,16);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length)-0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();byte[]signature=in.read();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();byte[]signature=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();byte[]signature=in.read();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();InputStreamin=getInputStream(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in==null){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();InputStreamin=getInputStream();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in==null){in.close();InputStreamin=getInputStream();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(in.markSupported(),signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(in.markSupported());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,decompressConcatenated,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();byte[]signature=in.read(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();byte[]signature=in.read(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();byte[]signature=in.read(signatureLength);}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){in.close();in.close();in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){in.close();in.close();in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){in.close();in.close();in.close();}else{returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){in.close();in.close();in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){in.close();in.close();in.close();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();if(in.markSupported()){in.close();in.close();in.close();}else{returnnewBZipCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integersignature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.getBytes(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length-1),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==2){returnnewBZip2CompressorInputStream(in);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcaten
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcaten
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,BZIP2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,0,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.parseInt(signature.length),Integer.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>=0){in.close();if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,decompressConcatenated?DEFLATE:DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewGzipCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewGZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip1CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip3CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(SignatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength*1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.release();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);byte[]signature=in.read(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);InputStreamin=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);byte[]signature=in.getBytes(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);InputStreamin=newBZip2CompressorInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);InputStreamin=newBZip2InputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,UntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}if(Integer.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInput
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Integer.toHexString(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);in.seek(signatureLength);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength-1,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength)+1;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)>=0;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>=0){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==-1){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,UntilEOF)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,decompressUntilEOF)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,UntilEOF)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2Compressor.matches(signature,UntilEOF)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),BZIP2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Float.valueOf(in.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressConcatenated,UntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(deFLATE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),UntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamReader(in.read());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=IOUtils.readFully(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()||in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.setSupported(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressUntilEOF.setSupported(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:DELETE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){in.markSupported();returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){in.markSupported();returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){in.markSupported();System.arraycopy(signature,0,signatureLength,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength-1,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MIN_VALUE=in.set(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength-1,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Boolean.valueOf);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.markSupported();in.setSuppressed(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.markSupported();in.setSuppressed(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();if(signatureLength!=0){in.setSuppressed(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.setLength(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(SignatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength*1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.seek(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(signatureLength!=2){in.mark(SignatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signature=in.read(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signature=in.getBytes(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);InputStreamin=newBZip2InputStream(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);InputStreamin=newBZip2CompressorInputStream(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);InputStreamin=newBZip2CompressorInputStream(in,signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(!in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength.markSupported()){in.close();}else{returnnewCompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature);byte[]signatureLength=IOUtils.readFully(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.set(signatureLength,Integer.MIN_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length*1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==12){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}in.close();if(in!=null){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.setBoolean(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.read(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.order(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,UntilEOF)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.parseInt(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature2,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,decompressConcatenated,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signLength,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.decompress(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.mark(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(decompressConcatenated,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,DEFLATE);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}else{returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,BZIP2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.setBoolean(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218intsignatureLength=in.set(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(bZIP.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,BZIP2.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2CompressorInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2Compress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,4096);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=null){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureL
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();byte[]signature=in.read(signature.length);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);InputStreamin=newBZip2CompressorInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){in.skipChildren();}else{System.arraycopy(signature,0,signatureLength,in.markSupported());}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.skipChildren()){returnnewBZip2CompressorInputStream(in,signatureLength);}else{in.skipChildren();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=IOUtils.readInt(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=JOUtils.readInt(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=decompressUntilEOF.readInt();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=IOUtils.readInt(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=IOUtils.readInt();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength)+1;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE,Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();InputStreamin=createInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=createInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=createInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in!=null){in.close();InputStreamin=createInputStream(in,DEFLATE);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();InputStreamin=createInputStream(in,DEFLATE);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();if(!in.markSupported()){in.markSupported();in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();if(signatureLength==2){in.markSupported();in.markSupported();returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();if(signatureLength==2){in.markSupported();in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();if(!in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();if(!in.markSupported()){thrownewIllegalArgumentException("");}in.markSupported();in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();if(signatureLength==2){in.markSupported();in.markSupported();}else{in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2Compressor.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signatureLength,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip3CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE/1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE)+1;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=4){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSupported();in.decompressConcatenated();}else{System.arraycopy(signature,0,signatureLength,in.markSupported(),signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length-12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){returnnewBZip2CompressorInputStream(in);}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength*1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);byte[]signature=in.read(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);InputStreamin=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);InputStreamin=newBZIP2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);InputStreamin=newBZip2InputStream(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);byte[]signature=in.getBytes(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length)-1),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressUntilEOF.set(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,UntilEOF)){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,UntilEOF)){in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue(),Boolean.TRUE),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){in.close();if(in.markSupported()){returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressUntilEOF.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(decompressConcatenated.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,in.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()||in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()||in.markSupported()){returnnewBZip2CompressorInputStream(in);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}if(in.markSupported()||in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,16);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}else{returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(signatureLength!=2){in.markSupported();in.mark(signatureLength);}else{returnnewGZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signature=in.read(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signature=in.getBytes(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);InputStreamin=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);InputStreamin=newBZip2InputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();in.close();if(in.markSupported()){returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();in.close();if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength>12){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.toHexString(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2Compressor.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2Compressor.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength!=0){if(BZip2Compressor.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();if(!in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,3);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in=newBZip2CompressorInputStream(deFLATE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,decompressConcatenated,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Integer.MAX_VALUE,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,UntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,0,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength<2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(Signature.TRUE,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readUTF();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signatureLength=IOUtils.readFully(signature,0,signatureLength);in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);byte[]signatureLength=IOUtils.readFully(in,signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=createInputStream(in,DEFLATE);}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,Boolean.valueOf(signatureLength),Boolean.valueOf(decompressConcatenated));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressConcatenated,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.markSupported();in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.reset();in.reset();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();in.write('n');
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(in.getBooleanValue()),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.mark(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.add(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==1){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(Integer.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signatureLength,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,1,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}if(in!=null){in.close();if(in!=null){returnnewCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=1){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:PACK200);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:DELIMITER);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:BZIP);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length-2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+1).replace('','');
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+1).replace('n','r');
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,402,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,32,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length-1),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length)-1,Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218while(in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==null){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,decompressConcatenated)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewGZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(BZip2CompressorInputStream.matches(signature,decompressUntilEOF)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue(),in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(str.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.decompressConcatenated();}else{in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.decompressConcatenated();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();decompressConcatenated=in.decompressConcatenated();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Float.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.getBooleanValue());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,newFloat(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218booleandecompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){if(in.markSupported()){thrownewIllegalArgumentException("Markisnotsupported.");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZip2InputStream(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();byte[]signature=in.read();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();byte[]signature=in.read(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=0){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcaten
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signature,decompressUntilEOF)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewGZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewGzipCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.read(),Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length)-0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength).booleanValue());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length)-1,Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length-1),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read(signature.length);}else{returnnewbyte[12];}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();byte[]signature=in.read(signature.length);}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE,1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);if(signatureLength>12){in.mark(signatureLength+12);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);if(signatureLength>12){in.mark(signatureLength+12);}else{returnnewCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);if(signatureLength>12){in.mark(signatureLength+12);}else{returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);if(signatureLength>12){in.mark(signatureLength+12);}else{returnnewBZipCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);if(signatureLength>12){in.mark(signatureLength+12);}else{returnnewByteCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);if(signatureLength>12){in.mark(signatureLength+12);}else{in.mark(signatureLength+12);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength,2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(SignatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==1){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.FALSE).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength>12){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength>12){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength>12){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength!=2){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength>1024){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength>12){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewBZipCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(signatureLength>12){in.mark(signatureLength);in.mark(signatureLength);}else{returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==null){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,newBoolean(in.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength{0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}if(signatureLength==0){in.printSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.close();InputStreamin=getInputStream(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==GZIP){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFL
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();if(in.markSupported()){thrownewIllegalArgumentException("Markisnotsupported.");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated:in.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressUntilEOF.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.setSupported(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==GZIP){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorIn
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.read(signature,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=1){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(in.getBytes());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}else{in.mark(signature.length);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.mark(signatureLength);in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signatureLength=IOUtils.readFully(signature,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}if(SignatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(decompressConcatenated,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signature,in.decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.close()){in.close();InputStreamin=getInputStream();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){in.close();}else{InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}if(in.markSupported()){in.close();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||signatureLength>12){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,DECOMPRESSION);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==0){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}if(signatureLength==2){returnnewBZip2CompressorInputStream(in);}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length)-1),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,decompressConcatenated)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,SignatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewGZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature.length,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.setBoolean(signature.length,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||signatureLength>12){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218try{in.close();}catch(IOExceptione){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){thrownewIllegalArgumentException("Markisnotsupported.");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newbyte[signatureLength];
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIPInputStream(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=createInputStream(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2Reader(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIPInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.close();if(in!=null){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.close();if(in!=null){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-1,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-1,signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}if(in.markSupported())==in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||signatureLength>12){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||signatureLength<2){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,in.readLine());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,in.mark(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,in.readBytes(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSuppressed(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.markSupported();in.setSuppressed(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.setSuppressed(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();in.setSuppressed(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.markSupported();in.setSuppressed(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=in.getBytes(decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=in.getBytes(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=newbyte[12];in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=in.readBytes(decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);byte[]signature=in.read();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signatureLength=IOUtils.readFully(in,signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signatureLength=IOUtils.readFully(signature,signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);byte[]signatureLength=IOUtils.readFully(signature,in.length-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==1){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.mark(signature.length),in.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.skipChildren();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.skipChildren();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressUntilEOF.skipChildren();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skipChildren(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin.skipChildren();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength,BZIP2);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(decompressConcatenated,in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.length),Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}if(SignatureLength!=2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218intsignatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,in.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(in.getBooleanValue()),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.add(signatureLength,in.mark(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,in.mark(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readIO();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readIOF();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readFully();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();in.decompressConcatenated();in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(bzIP.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(BZIP.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){returnnewCompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();if(in.markSupported()){thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.mark(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.markSupported();in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=getInputStream();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.flush();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=this.in.read();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.flush();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integerin.decompressConcatenated=Integer.toHexString(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=Integer.MAX_VALUE){in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DEFLATE-signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException(".");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompressConcatenated=Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integerin.decompressConcatenated=Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signature,in.mark(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signnatureLength,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Integer.MAX_VALUE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){try{in.skip(signatureLength);}catch(IOExceptione){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){in.skip(signatureLength);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);if(signatureLength>12){if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenation);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length)-UntilEOF,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length)/2,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,byte.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=12){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=BZIP2){in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(signatureLength==1){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}if(signatureLength==2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}if(SignatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signatureLength=in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==1){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength!=2){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}if(signatureLength==1){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length-2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length+2));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompressConcatenated=Boolean.valueOf(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompressConcatenated();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompressConcatenated=Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(SignatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signature.length,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength*12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+10);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(in.getBooleanValue()),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);in.mark(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
